<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VectorGraphics</name>
    </assembly>
    <members>
        <member name="T:VectorGraphics.Canvas.BuildState">
            <summary>
            An enumeration that defines the possible states
            during building an element. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.BuildState.None">
            <summary>
            No new element in work.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.BuildState.BuildStarted">
            <summary>
            The building process of a new element has begun.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.BuildState.FirstPointSet">
            <summary>
            The first point of the element is set.
            </summary>
        </member>
        <member name="T:VectorGraphics.Canvas.Picture">
            <summary>
              Derived from <see cref="T:System.Windows.Forms.UserControl"/>.
              Used to display VectorGraphic elements.
            </summary>
            <remarks>
              Add elements from the VectorGraphics.dll like <see cref="T:VectorGraphics.Elements.VGPolyline"/>,
              <see cref="T:VectorGraphics.Elements.VGRectangle"/> etc. to the Element list <see cref="P:VectorGraphics.Canvas.Picture.Elements"/> , than you have
              two layers, the background with a <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/> and the transparent foreground with
              the vector graphic elements.
              You can use an animation timer with <see cref="M:VectorGraphics.Canvas.Picture.StartAnimation"/> and
              <see cref="M:VectorGraphics.Canvas.Picture.StopAnimation"/> that updates the
              <see cref="T:VectorGraphics.Canvas.Picture"/>every <see cref="P:VectorGraphics.Canvas.Picture.AnimationInterval"/> milliseconds.
            </remarks>
        </member>
        <member name="F:VectorGraphics.Canvas.Picture.graphicsLock">
            <summary>
              The lock for the graphics processes
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.Picture.elements">
            <summary>
              Element List, owns all Graphic Elements to be drawn on the surface
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.Picture.grayBrush">
            <summary>
              An alpha blended black brush, that hides grays out underlying content.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.Picture.presentationSize">
            <summary>
              The original screen size of the tracker.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.#ctor">
            <summary>
              Initializes a new instance of the Picture class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.BeginUpdate">
            <summary>
              This method prevents the control from painting until the
              <see cref="M:VectorGraphics.Canvas.Picture.EndUpdate"/> method is called.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.DrawForeground(System.Boolean)">
            <summary>
            This method invalidates this picture.
            </summary>
            <param name="invalidateAll">
            <strong>True</strong>, if the whole
              canvas should be invalidated otherwise <strong>false</strong>. If
              <strong>false</strong> then only moved element regions are redrawn.
            </param>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.EndUpdate">
            <summary>
              Resumes painting the <see cref="T:VectorGraphics.Canvas.Picture"/> control after painting is suspended by the
              <see cref="M:VectorGraphics.Canvas.Picture.BeginUpdate"/> method.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.RenderToImage">
            <summary>
              Renders whole picture to an image
            </summary>
            <remarks>Used for exporting to clipboard.</remarks>
            <returns>
              Image with drawn graphic elements and background.
              with size of stimulus screen
            </returns>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.ResetBackground">
            <summary>
              Disposes background slide and image.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.ResetPicture">
            <summary>
              Erases element list
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.StartAnimation">
            <summary>
              Starts animation by starting the update timer.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.StartBackgroundAnimation">
            <summary>
              Starts background update animation by starting the background timer.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.StopAnimation">
            <summary>
              Stops animation by stopping the update timer.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.StopBackgroundAnimation">
            <summary>
              Stops background update animation by stopping the background timer.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.CalculateTransformMatrix">
            <summary>
              Creates transparent bitmap for drawing and the corresponding graphics
              with correct transformation matrix.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.CustomDispose">
            <summary>
              Dispose custom elements that are not
              disposed by the designer.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.GetTransformationMatrix">
            <summary>
              Calculates the transformation matrix that transforms the output stimulus
              picture to the currently visible drawing bounds of the owning picture
            </summary>
            <returns>
              A scaling and translating <see cref="T:System.Drawing.Drawing2D.Matrix"/>
              that transforms output coordinates in client size coordinates.
            </returns>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Paint"/> event handler for this picture.
              Redraws the whole picture.
            </summary>
            <param name="pe">
            A <see cref="T:System.Windows.Forms.PaintEventArgs"/> with the event data.
            </param>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)"/>.
              Draws the background stimulus image onto the clipping region.
            </summary>
            <param name="pevent">
            The <see cref="T:System.Windows.Forms.PaintEventArgs"/>with the event data.
            </param>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.OnProgress(VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs)">
            <summary>
            The protected OnProgress method raises the progress event by invoking
              the delegates
            </summary>
            <param name="e">
            A <see cref="T:VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs"/> with the
              progress event arguments
            </param>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.OnResize(System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Resize"/> event handler.
              Sets new transformation matrix for graphics picture
            </summary>
            <param name="e">
            An empty <see cref="T:System.EventArgs"/>
            </param>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.ForegroundTimerTick(System.Object,System.EventArgs)">
            <summary>
            The <see cref="T:System.Windows.Forms.Timer"/>s tick event handler.
              Redraws every element by invalidating the picture method.
            </summary>
            <param name="sender">
            Source of the event.
            </param>
            <param name="e">
            An empty <see cref="T:System.EventArgs"/>
            </param>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.TmrBackgroundTick(System.Object,System.EventArgs)">
            <summary>
            The <see cref="T:System.Windows.Forms.Timer"/>s tick event handler for
              the background animation.
              Redraws the background.
            </summary>
            <param name="sender">
            Source of the event.
            </param>
            <param name="e">
            An empty <see cref="T:System.EventArgs"/>
            </param>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.InitializeOther">
            <summary>
              Custom initializations.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.Picture.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.Picture.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:VectorGraphics.Canvas.Picture.Progress">
            <summary>
              An event that notifys the progress of the animation update.
            </summary>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.AnimationInterval">
            <summary>
              Gets or sets the canvas updating animation interval
              for the timer in milliseconds
            </summary>
            <value>
              A <see cref="T:System.Int32"/> with the update interval in
              miliseconds when this <see cref="T:VectorGraphics.Canvas.Picture"/> is in animation mode
            </value>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.BgSlide">
            <summary>
              Gets or sets the <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/> for the background of this <see cref="T:VectorGraphics.Canvas.Picture"/>.
            </summary>
            <value>A <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/> with the contents that were seen during recording.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.Elements">
            <summary>
              Gets graphic element list of drawing canvas
            </summary>
            <value>
              The <see cref="T:System.Collections.Generic.List`1"/> with all <see cref="T:VectorGraphics.Elements.VGElement"/>
              objects to draw onto this <see cref="T:VectorGraphics.Canvas.Picture"/>
            </value>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.GrayBrush">
            <summary>
              Gets an alpha blended black brush, that hides grays out underlying content.
            </summary>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.InvalidateInterval">
            <summary>
              Gets or sets the canvas invalidation interval
              in milliseconds
            </summary>
            <value>
              A <see cref="T:System.Int32"/> with the invalidation interval in
              miliseconds.
            </value>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.OwningForm">
            <summary>
              Gets or sets the <see cref="T:System.Windows.Forms.Form"/> on which this <see cref="T:VectorGraphics.Canvas.Picture"/> is located.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Form"/> that is the parent of this control.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.PresentationSize">
            <summary>
              Gets or sets the original canvas size
              that is the screen size of the tracking monitor,
              that is used to calculated correct transformation matrices.
            </summary>
            <value>
              The <see cref="T:System.Drawing.Size"/>of the original
              tracking screen.
            </value>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.ScreenToStimulus">
            <summary>
              Gets or sets the ScreenToStimulusMatrix
            </summary>
            <value>
              A <see cref="T:System.Drawing.Drawing2D.Matrix"/> which transforms screen coordinates to
              stimulus coordinates.
            </value>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.SectionEndTime">
            <summary>
              Gets or sets the current sections ending time.
              Used to skip samples outside the selected time section.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the sections ending time in milliseconds.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.SectionStartTime">
            <summary>
              Gets or sets the current sections start time.
              Used to skip samples outside the selected time section.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the sections starting time in milliseconds.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.StimulusSize">
            <summary>
              Gets or sets the size of the stimulus that should be displayed
              in this picture
            </summary>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.StimulusToScreen">
            <summary>
              Gets or sets the Stimulus to Screen Matrix.
            </summary>
            <value>
              A <see cref="T:System.Drawing.Drawing2D.Matrix"/> which transforms stimulus coordinates to
              screen coordinates.
            </value>
        </member>
        <member name="P:VectorGraphics.Canvas.Picture.ZoomFactor">
            <summary>
              Gets or sets the zoom factor for the display of this picture
            </summary>
            <value>
              A <see cref="T:System.Single"/> with the zoom factor
              relative to its parents bounds. A value of 1 = fit to bounds.
            </value>
        </member>
        <member name="T:VectorGraphics.Canvas.Picture.BeginUpdateDelegate">
            <summary>
              Delegate. Support for thread-safe version of the <see cref="M:VectorGraphics.Canvas.Picture.BeginUpdate"/> method.
            </summary>
        </member>
        <member name="T:VectorGraphics.Canvas.Picture.EndUpdateDelegate">
            <summary>
              Delegate. Support for thread-safe version of the <see cref="M:VectorGraphics.Canvas.Picture.EndUpdate"/> method.
            </summary>
        </member>
        <member name="T:VectorGraphics.Canvas.PictureModifiable">
            <summary>
            Derived from <see cref="T:VectorGraphics.Canvas.Picture"/>. Allows modifying of shapes through selection
            with the mouse and grab handles.
            Adds <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeAdded"/>, <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeDeleted"/>, <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeSelected"/>,
            <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeDeselected"/>, <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeChanged"/>, <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeDoubleClick"/> events.
            to the base class.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.MAXDISTANCEPOLYLINECLOSE">
            <summary>
            Determines maximum distance of two points (in pixel) given by mouse input
            that should be considere as two different.
            If they are closer than this value polyline would suggest closing
            during creation.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.MOVEOFFSET">
            <summary>
            This value determines the amount of pixels the object should
            move, when it is moved with the arrow keys.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.SNAPPADDING">
            <summary>
            This value determines the amount of pixels of the margin to be snapped to.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.firstClickPoint">
            <summary>
            Saves mouse click point for calculation.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.currentLine">
            <summary>
            Line segment of the current mouse movement point and the last mouse down point
            during polyline creation
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.newShape">
            <summary>
            Saves the currently created shape.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.state">
            <summary>
            Saves the build state of a new element.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.selectedElement">
            <summary>
            Saves the current selected element which
            is shown with grab handles and selection frame.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.activeGrabHandle">
            <summary>
            Currently active grab handle
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.mouseDownPoint">
            <summary>
            Last mouse down point
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.defaultPen">
            <summary>
            Pen for standard shapes. Column "Group" has no entry.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.searchRectPen">
            <summary>
            Pen for shapes with column "Group" set to "SearchRect".
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.targetPen">
            <summary>
            Pen for shapes with column "Group" set to "Target".
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.dottedPen">
            <summary>
            Pen for currently edited shapes.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.defaultFont">
            <summary>
            Font for standard shapes.Column "Group" has no entry.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.searchRectFont">
            <summary>
            Font for shapes with column "Group" set to "SearchRect".
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.targetFont">
            <summary>
            Font for shapes with column "Group" set to "Target".
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.defaultFontColor">
            <summary>
            Brush for standard shapes.Column "Group" has no entry.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.searchRectFontColor">
            <summary>
            Brush for shapes with column "Group" set to "SearchRect".
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.targetFontColor">
            <summary>
            Brush for shapes with column "Group" set to "Target".
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.defaultBrush">
            <summary>
            Brush for standard shapes. Column "Group" has no entry.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.defaultTextAlignment">
            <summary>
            The VGAlignment for default shapes with column "Group" has no entry.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.searchRectTextAlignment">
            <summary>
            VGAlignment for shapes with column "Group" set to "SearchRect".
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.targetTextAlignment">
            <summary>
            VGAlignment for shapes with column "Group" set to "Target".
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.counterUnderCursor">
            <summary>
            Saves the current index of the element that 
            is selected of the list of elements that are
            under the mouse cursor.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.topMargin">
            <summary>
            Saves a <see cref="T:System.Drawing.Rectangle"/> with a margin 
            indicating the area for snapping at the 
            top of this <see cref="T:VectorGraphics.Canvas.PictureModifiable"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.leftMargin">
            <summary>
            Saves a <see cref="T:System.Drawing.Rectangle"/> with a margin 
            indicating the area for snapping at the 
            top of this <see cref="T:VectorGraphics.Canvas.PictureModifiable"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.bottomMargin">
            <summary>
            Saves a <see cref="T:System.Drawing.Rectangle"/> with a margin 
            indicating the area for snapping at the 
            bottom of this <see cref="T:VectorGraphics.Canvas.PictureModifiable"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.rightMargin">
            <summary>
            Saves a <see cref="T:System.Drawing.Rectangle"/> with a margin 
            indicating the area for snapping at the 
            right of this <see cref="T:VectorGraphics.Canvas.PictureModifiable"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.centerArea">
            <summary>
            Saves a <see cref="T:System.Drawing.Rectangle"/> with a margin 
            indicating the area for snapping at the 
            center of this <see cref="T:VectorGraphics.Canvas.PictureModifiable"/>.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.#ctor">
            <summary>
            Initializes a new instance of the PictureModifiable class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnCopy">
            <summary>
            Handles the Copy event by copying the current
            selected <see cref="T:VectorGraphics.Elements.VGElement"/> to the clipboard.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnPaste">
            <summary>
            Handles the Paste event by pasting an <see cref="T:VectorGraphics.Elements.VGElement"/> from the
            clipboard into the picture.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnCut">
            <summary>
            Handles the Cut event by copying the selected element to the clipboard
            and deleting it form the surface.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.NewRectangleStart(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGStyleGroup,System.String)">
            <summary>
            Starts new rectangular shape by creating a <see cref="T:VectorGraphics.Elements.VGRectangle"/>
            in the <see cref="F:VectorGraphics.Canvas.PictureModifiable.newShape"/> field.
            Then calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.StartCreation(System.Windows.Forms.Cursor)"/>.
            </summary>
            <param name="newShapeDrawAction">The <see cref="T:VectorGraphics.Elements.ShapeDrawAction"/> for the
            new shape.</param>
            <param name="pen">The <see cref="T:System.Drawing.Pen"/> for the new shape.</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> for the new shape.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> for the new shape.</param>
            <param name="fontColor">The <see cref="T:System.Drawing.Color"/> for the font of the new shape.</param>
            <param name="group">The <see cref="T:VectorGraphics.Elements.VGStyleGroup"/> for the new shape.</param>
            <param name="name">The optional name for the new shape.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.NewEllipseStart(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGStyleGroup,System.String)">
            <summary>
            Starts new ellipsoid shape by creating a <see cref="T:VectorGraphics.Elements.VGEllipse"/>
            in the <see cref="F:VectorGraphics.Canvas.PictureModifiable.newShape"/> field.
            Then calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.StartCreation(System.Windows.Forms.Cursor)"/>.
            </summary>
            <param name="newShapeDrawAction">The <see cref="T:VectorGraphics.Elements.ShapeDrawAction"/> for the
            new shape.</param>
            <param name="pen">The <see cref="T:System.Drawing.Pen"/> for the new shape.</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> for the new shape.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> for the new shape.</param>
            <param name="fontColor">The <see cref="T:System.Drawing.Color"/> for the font of the new shape.</param>
            <param name="group">The <see cref="T:VectorGraphics.Elements.VGStyleGroup"/> for the new shape.</param>
            <param name="name">The optional name for the new shape.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.NewPolylineStart(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGStyleGroup,System.String)">
            <summary>
            Starts new polylineal shape by creating a <see cref="T:VectorGraphics.Elements.VGPolyline"/>
            in the <see cref="F:VectorGraphics.Canvas.PictureModifiable.newShape"/> field.
            Then calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.StartCreation(System.Windows.Forms.Cursor)"/>.
            </summary>
            <param name="newShapeDrawAction">The <see cref="T:VectorGraphics.Elements.ShapeDrawAction"/> for the
            new shape.</param>
            <param name="pen">The <see cref="T:System.Drawing.Pen"/> for the new shape.</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> for the new shape.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> for the new shape.</param>
            <param name="fontColor">The <see cref="T:System.Drawing.Color"/> for the font of the new shape.</param>
            <param name="group">The <see cref="T:VectorGraphics.Elements.VGStyleGroup"/> for the new shape.</param>
            <param name="name">The optional name for the new shape.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.NewLineStart(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGStyleGroup,System.String)">
            <summary>
            Starts new line shape by creating a <see cref="T:VectorGraphics.Elements.VGLine"/>
            in the <see cref="F:VectorGraphics.Canvas.PictureModifiable.newShape"/> field.
            Then calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.StartCreation(System.Windows.Forms.Cursor)"/>.
            </summary>
            <param name="newShapeDrawAction">The <see cref="T:VectorGraphics.Elements.ShapeDrawAction"/> for the
            new shape.</param>
            <param name="pen">The <see cref="T:System.Drawing.Pen"/> for the new shape.</param>
            <param name="brush">The <see cref="T:System.Drawing.Brush"/> for the new shape.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> for the new shape.</param>
            <param name="fontColor">The <see cref="T:System.Drawing.Color"/> for the font of the new shape.</param>
            <param name="group">The <see cref="T:VectorGraphics.Elements.VGStyleGroup"/> for the new shape.</param>
            <param name="name">The optional name for the new shape.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.NewShapeStart(VectorGraphics.Elements.VGElement)">
            <summary>
            Starts new shape by setting the <see cref="T:VectorGraphics.Elements.VGElement"/>
            in the <see cref="F:VectorGraphics.Canvas.PictureModifiable.newShape"/> field.
            Then calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.StartCreation(System.Windows.Forms.Cursor)"/>.
            </summary>
            <param name="element">The <see cref="T:VectorGraphics.Elements.VGElement"/> to be added to the <see cref="T:VectorGraphics.Canvas.Picture"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.NewRtfTextStart(VectorGraphics.Elements.VGRichText)">
            <summary>
            Starts new textual shape by setting the <see cref="T:VectorGraphics.Elements.VGRichText"/>
            in the <see cref="F:VectorGraphics.Canvas.PictureModifiable.newShape"/> field.
            Then calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.StartCreation(System.Windows.Forms.Cursor)"/>.
            </summary>
            <param name="text">The <see cref="T:VectorGraphics.Elements.VGRichText"/> to be added to the <see cref="T:VectorGraphics.Canvas.Picture"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.NewTextStart(VectorGraphics.Elements.VGText)">
            <summary>
            Starts new textual shape by setting the <see cref="T:VectorGraphics.Elements.VGText"/>
            in the <see cref="F:VectorGraphics.Canvas.PictureModifiable.newShape"/> field.
            Then calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.StartCreation(System.Windows.Forms.Cursor)"/>.
            </summary>
            <param name="text">The <see cref="T:VectorGraphics.Elements.VGText"/> to be added to the <see cref="T:VectorGraphics.Canvas.Picture"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.NewImageStart(VectorGraphics.Elements.VGImage)">
            <summary>
            Starts new image object by setting the <see cref="T:VectorGraphics.Elements.VGImage"/>
            in the <see cref="F:VectorGraphics.Canvas.PictureModifiable.newShape"/> field.
            Then calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.StartCreation(System.Windows.Forms.Cursor)"/>.
            </summary>
            <param name="image">The <see cref="T:VectorGraphics.Elements.VGImage"/> to be added to the <see cref="T:VectorGraphics.Canvas.Picture"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.NewFlashStart(VectorGraphics.Elements.VGFlash)">
            <summary>
            Starts new flash object by setting the <see cref="T:VectorGraphics.Elements.VGFlash"/>
            in the <see cref="F:VectorGraphics.Canvas.PictureModifiable.newShape"/> field.
            Then calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.StartCreation(System.Windows.Forms.Cursor)"/>.
            </summary>
            <param name="flash">The <see cref="T:VectorGraphics.Elements.VGFlash"/> to be added to the <see cref="T:VectorGraphics.Canvas.Picture"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.PenChanged(System.Object,VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs)">
            <summary>
            Eventhandler for the PenChanged event. 
            Updates all graphic elements from the given group
            with the new pen.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs"/> that hold new group and pen</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.FontStyleChanged(System.Object,VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs)">
            <summary>
            Eventhandler for the FontStyleChanged event. 
            Updates all graphic elements from the given group
            with the new font.
            </summary>
            <param name="sender">message sender</param>
            <param name="e">Font change event arguments that hold new group and font and brush</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.ResetSelectedElement">
            <summary>
            Resets the selected element and its dependencies to null.
            If there was a selected element, invokes <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeDeselected"/> event.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.ResetPicture">
            <summary>
            Resets the current picture. And resets eventually selected element.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.CustomDispose">
            <summary>
            Overridden. Frees resources of objects that are not disposed
            by the designer, mainly private objects.
            Is called during the call to <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden <see cref="E:System.Windows.Forms.Control.MouseMove"/> event handler.
            During shape creation this finishes creation. So the
            <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeAdded"/> event is raised.
            Otherwise update bounds of moved objects.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden <see cref="E:System.Windows.Forms.Control.MouseDoubleClick"/> event handler.
            Raises the event <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeDoubleClick"/> when 
            a selected element was double clicked.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> with the event data (click point).</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden <see cref="E:System.Windows.Forms.Control.MouseDown"/> event handler.
            Starts requested shape creation when left mouse button is pressed.
            Otherwise looks for elements under mouse cursor and selects them.
            If there is already a selected element and the mouse is over a grab
            handle it is selected.
            </summary>
            <remarks>Pressing the ALT key during selection iterates
            through the elementsUnderMouseCursor collection.</remarks>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> with the event data (click point).</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden <see cref="E:System.Windows.Forms.Control.MouseMove"/> event handler.
            During shape creation updates currently created shape with new bounds.
            Otherwise raises mouse cursors depending on position.
            If it is over grab handle use grab handles cursor, if
            is over shape use <see cref="P:System.Windows.Forms.Cursors.SizeAll"/> cursor.
            If mouse button is pressed, update shapes postion properties.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.PreviewKeyDown"/> event handler. 
            Listens for <see cref="F:System.Windows.Forms.Keys.Delete"/> to remove selected shapes.
            Also listens for arrow keys to move elements.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs"/> with the event arguments.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Overridden <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)"/> method. 
            Sets all arrow keys as input keys, to avoid jumping in the form
            to the next control and using it for moving of elements.
            </summary>
            <param name="keyData">A <see cref="T:System.Windows.Forms.Keys"/> with the key data.</param>
            <returns><strong>True</strong>, if key should be processed in the control,
            otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.InitializePictureDefaultElements">
            <summary>
            Overrides should initialize the drawing elements of this <see cref="T:VectorGraphics.Canvas.PictureModifiable"/>
            by calling the <c>Properties.Settings.Default</c> values with
            <see cref="M:VectorGraphics.Canvas.PictureModifiable.InitializeElements(System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,System.Drawing.Font,System.Drawing.Color,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGAlignment,VectorGraphics.Elements.VGAlignment,VectorGraphics.Elements.VGAlignment)"/>.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.InitializeElements(System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,System.Drawing.Font,System.Drawing.Color,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGAlignment,VectorGraphics.Elements.VGAlignment,VectorGraphics.Elements.VGAlignment)">
            <summary>
            Initializes standard values of drawing elements
            </summary>
            <param name="targetPen">A <see cref="T:System.Drawing.Pen"/> for "target" elements</param>
            <param name="dottedPen">A <see cref="T:System.Drawing.Pen"/> for dotted elements</param>
            <param name="defaultPen">A <see cref="T:System.Drawing.Pen"/> for default elements</param>
            <param name="searchRectPen">A <see cref="T:System.Drawing.Pen"/> for "searchRect" elements</param>
            <param name="targetFont">A <see cref="T:System.Drawing.Font"/> for "target" elements</param>
            <param name="targetFontColor">A <see cref="T:System.Drawing.Color"/> for "target" elements</param>
            <param name="defaultFont">A <see cref="T:System.Drawing.Font"/> for default elements</param>
            <param name="defaultFontColor">A <see cref="T:System.Drawing.Color"/> for default elements</param>
            <param name="searchRectFont">A <see cref="T:System.Drawing.Font"/> for "searchRect" elements</param>
            <param name="searchRectFontColor">A <see cref="T:System.Drawing.Color"/> for "searchRect" elements</param>
            <param name="targetTextAlignment">A <see cref="T:VectorGraphics.Elements.VGAlignment"/> for default elements</param>
            <param name="defaultTextAlignment">A <see cref="T:VectorGraphics.Elements.VGAlignment"/> for "target" elements</param>
            <param name="searchRectTextAlignment">A <see cref="T:VectorGraphics.Elements.VGAlignment"/> for "searchRect" elements</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnShapeSelected(VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs)">
            <summary>
            The protected OnShapeSelected method raises the 
            <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeSelected"/>event by invoking the delegates.
            </summary>
            <param name="e">The <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnShapeDeselected(System.EventArgs)">
            <summary>
            The protected OnShapeDeselected method raises the 
            <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeDeselected"/>event by invoking the delegates.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnShapeAdded(VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs)">
            <summary>
            The protected OnShapeAdded method raises the 
            <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeAdded"/>event by invoking the delegates.
            </summary>
            <param name="e">The <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnShapeDeleted(VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs)">
            <summary>
            The protected OnShapeDeleted method raises the <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeDeleted"/>  
            event by invoking the delegates.
            </summary>
            <param name="e">The <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnShapeChanged(VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs)">
            <summary>
            The protected OnShapeChanged method raises the <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeChanged"/>  
            event by invoking the delegates.
            </summary>
            <param name="e">The <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnShapeDoubleClick(VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs)">
            <summary>
            The protected OnShapeDoubleClick method raises the <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeChanged"/>  
            event by invoking the delegates.
            </summary>
            <param name="e">The <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnDelete">
            <summary>
            Is called, when the user clicked the delete button.
            This base class implementation removes a selected shape
            from the elements list and invokes the <see cref="E:VectorGraphics.Canvas.PictureModifiable.ShapeDeleted"/> event.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.PictureModifiable_Resize(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Resize"/> event handler. Updates the snap
            areas.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuToFront_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuToFront"/>.
            Calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.OnPageUpKey"/> to move element to tail.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuForward_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuForward"/>.
            Calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.OnAddKey"/> to move element on index up.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuBackward_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuBackward"/>.
            Calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.OnSubtractKey"/> to move element on index down.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuToBack_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuToBack"/>.
            Calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.OnPageDownKey"/> to move element to head of list.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuDelete_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuDelete"/>.
            Calls <see cref="M:VectorGraphics.Canvas.PictureModifiable.OnDelete"/> to remove the element from the list.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuAlignCenter_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuAlignCenter"/>.
            Aligns the selected element at the center of the <see cref="T:VectorGraphics.Canvas.Picture"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuAlignLeft_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuAlignLeft"/>.
            Aligns the selected element at the left order of the <see cref="T:VectorGraphics.Canvas.Picture"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuAlignRight_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuAlignRight"/>.
            Aligns the selected element at the right border of the <see cref="T:VectorGraphics.Canvas.Picture"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuAlignTop_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuAlignTop"/>.
            Aligns the selected element at the top of the <see cref="T:VectorGraphics.Canvas.Picture"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuAlignBottom_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuAlignBottom"/>.
            Aligns the selected element at the bottom of the <see cref="T:VectorGraphics.Canvas.Picture"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.cmuSizeFullScreen_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.ToolStripMenuItem"/> <see cref="F:VectorGraphics.Canvas.PictureModifiable.cmuSizeFullScreen"/>.
            Resizes the selected element to full screen picture size.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnArrowKeyUp">
            <summary>
            Handles the arrow key up event by moving a selected object 
            by the <see cref="F:VectorGraphics.Canvas.PictureModifiable.MOVEOFFSET"/> value up.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnArrowKeyDown">
            <summary>
            Handles the arrow key down event by moving a selected object 
            by the <see cref="F:VectorGraphics.Canvas.PictureModifiable.MOVEOFFSET"/> value down.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnArrowKeyLeft">
            <summary>
            Handles the arrow key left event by moving a selected object 
            by the <see cref="F:VectorGraphics.Canvas.PictureModifiable.MOVEOFFSET"/> value to the left.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnArrowKeyRight">
            <summary>
            Handles the arrow key right event by moving a selected object 
            by the <see cref="F:VectorGraphics.Canvas.PictureModifiable.MOVEOFFSET"/> value to the right.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnAddKey">
            <summary>
            Handles the add key event by moving a selected object 
            one index up in the <see cref="P:VectorGraphics.Canvas.Picture.Elements"/> list.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnSubtractKey">
            <summary>
            Handles the subtract key event by moving a selected object 
            one index down in the <see cref="P:VectorGraphics.Canvas.Picture.Elements"/> list.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnPageDownKey">
            <summary>
            Handles the page down key event by moving a selected object 
            to the head of the <see cref="P:VectorGraphics.Canvas.Picture.Elements"/> list.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.OnPageUpKey">
            <summary>
            Handles the page up key event by moving a selected object 
            to the tail of the <see cref="P:VectorGraphics.Canvas.Picture.Elements"/> list.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.CheckElementForAlignments(System.Drawing.Point@)">
            <summary>
            This method checks the currently selected element beeing moved if the given
            movement position is in one of the alignment rectangles for snapping.
            If it is so, it changes the given point to be snapped.
            </summary>
            <param name="point">Ref. A <see cref="T:System.Drawing.Point"/> with the new location to check
            for snapping.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.CheckForAlignments(System.Drawing.Point@)">
            <summary>
            This method checks the given point to be contained in one of the
            snap rectangles <see cref="F:VectorGraphics.Canvas.PictureModifiable.topMargin"/>, <see cref="F:VectorGraphics.Canvas.PictureModifiable.bottomMargin"/>,
            <see cref="F:VectorGraphics.Canvas.PictureModifiable.leftMargin"/>, <see cref="F:VectorGraphics.Canvas.PictureModifiable.rightMargin"/>.
            When it is contained, the point is snapped to the margin of the 
            containing rectangle.
            </summary>
            <param name="point">Ref. A <see cref="T:System.Drawing.Point"/> with the new location to check
            for snapping.</param>
            <returns><strong>True</strong>, if point was modified, otherwise
            <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.StartCreation(System.Windows.Forms.Cursor)">
            <summary>
            Method for new shape creation standards.
            It should be called when the <see cref="F:VectorGraphics.Canvas.PictureModifiable.newShape"/> field is set 
            and the element is going to be added.
            </summary>
            <param name="usedCursor">A <see cref="T:System.Windows.Forms.Cursor"/> to use during creation.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.PointsAreNear(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Checks if two points are nearer than MAX_DISTANCE_POLYLINE_CLOSE
            </summary>
            <remarks>Polyline is automatically closed, if they are.</remarks>
            <param name="point1">A <see cref="T:System.Drawing.PointF"/> with point one </param>
            <param name="point2">A <see cref="T:System.Drawing.PointF"/> with point two</param>
            <returns><strong>True</strong>, if points are nearer than MAX_DISTANCE_POLYLINE_CLOSE,
            otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.GetTransformedMouseLocation(System.Drawing.Point)">
            <summary>
            Transforms given mouse point from screen coordinates to stimulus
            screen coordinates.
            </summary>
            <param name="mouseLocation">A <see cref="T:System.Drawing.Point"/> with the
            mouse location to transform.</param>
            <returns>A <see cref="T:System.Drawing.PointF"/> with the transformed position.</returns>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.MoveBoundsOfSelectedObject(System.Int32,System.Int32)">
            <summary>
            This method moves a selected object, if there is one by the amount
            given in the parameters in x and y direction.
            </summary>
            <param name="offsetX">A <see cref="T:System.Int32"/> with the offset in x-direction.</param>
            <param name="offsetY">A <see cref="T:System.Int32"/> with the offset in y-direction.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.GetBoundingRectFromMousePosition(System.Drawing.PointF)">
            <summary>
            Creates a <see cref="T:System.Drawing.RectangleF"/> with new bounds out of
            the given mouseLocation and the <see cref="F:VectorGraphics.Canvas.PictureModifiable.firstClickPoint"/>.
            It resolves the four cases the both points can have.
            </summary>
            <param name="mouseLocation">A <see cref="T:System.Drawing.PointF"/> with the new mouse location.</param>
            <returns>A <see cref="T:System.Drawing.RectangleF"/> with new bounding rectangle for the given points.</returns>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.InitializeSnapAreas">
            <summary>
            This method initially sizes the snap areas at the margin and center
            of the picture.
            </summary>
        </member>
        <member name="F:VectorGraphics.Canvas.PictureModifiable.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorGraphics.Canvas.PictureModifiable.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:VectorGraphics.Canvas.PictureModifiable.ShapeAdded">
            <summary>
            Event. Raised when new shape has been added to the picture.
            </summary>
        </member>
        <member name="E:VectorGraphics.Canvas.PictureModifiable.ShapeDeleted">
            <summary>
            Event. Raised when selected shape has been deleted.
            </summary>
        </member>
        <member name="E:VectorGraphics.Canvas.PictureModifiable.ShapeSelected">
            <summary>
            Event. Raised when a shape has been selected.
            </summary>
        </member>
        <member name="E:VectorGraphics.Canvas.PictureModifiable.ShapeDeselected">
            <summary>
            Event. Raised when the selected shape has been deselected.
            </summary>
        </member>
        <member name="E:VectorGraphics.Canvas.PictureModifiable.ShapeChanged">
            <summary>
            Event. Raised when the selected shape has been changed.
            </summary>
        </member>
        <member name="E:VectorGraphics.Canvas.PictureModifiable.ShapeDoubleClick">
            <summary>
            Event. Raised when a shape has been double clicked.
            </summary>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.TargetPen">
            <summary>
            Gets pen for target shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Pen"/> for target shapes.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.DefaultPen">
            <summary>
            Gets or sets pen for default shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Pen"/> for default shapes.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.SearchRectPen">
            <summary>
            Gets pen for search rectangle shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Pen"/> for shapes marked as SearchRect.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.DottedPen">
            <summary>
            Gets or sets pen for currently edited shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Pen"/> used during shape creation.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.DefaultFonts">
            <summary>
            Gets or sets the font for default shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> used for default shapes text.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.DefaultFontColor">
            <summary>
            Gets or sets color of default shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> used for default shapes text.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.DefaultBrush">
            <summary>
            Gets or sets brush for default shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Brush"/> for default shapes.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.SearchRectFont">
            <summary>
            Gets font for search rectangle shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> used for SearchRect shapes text.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.SearchRectFontColor">
            <summary>
            Gets color for search rectangle shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> used for search rectangle shapes text.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.TargetFont">
            <summary>
            Gets font for target shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> used for Target shapes text.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.TargetFontColor">
            <summary>
            Gets color for target shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> used for target shapes text.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.DefaultTextAlignment">
            <summary>
            Gets <see cref="T:VectorGraphics.Elements.VGAlignment"/> for default shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> used for target shapes text.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.TargetTextAlignment">
            <summary>
            Gets <see cref="T:VectorGraphics.Elements.VGAlignment"/> for target shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> used for target shapes text.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.SearchRectTextAlignment">
            <summary>
            Gets <see cref="T:VectorGraphics.Elements.VGAlignment"/> for search rect shapes.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> used for target shapes text.</value>
        </member>
        <member name="P:VectorGraphics.Canvas.PictureModifiable.SelectedElement">
            <summary>
            Gets or sets the current selected element.
            </summary>
            <value>A <see cref="T:VectorGraphics.Elements.VGElement"/> that is selected and drawn
            with selection frame and grab handles.</value>
        </member>
        <member name="T:VectorGraphics.Controls.TransparentUserControl">
            <summary>
            A <see cref="T:System.Windows.Forms.UserControl"/> which has a real transparent background.
            It works for all windows forms components, but not for ActiveX containers in the background.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.TransparentUserControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.TransparentUserControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaintBackground
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="F:VectorGraphics.Controls.TransparentUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.TransparentUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorGraphics.Controls.TransparentUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.TransparentUserControl.CreateParams">
            <summary>
            Overridden. Adds the WS_TRANSPARENT style.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGScrollImage">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGImage"/>. 
            A serializable class that represents a vector graphics image that is scrollable.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGImage">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            A serializable class that represents a vector graphics image.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGElement">
            <summary>
            The abstract parent class for all vector graphic elements.
            Is serializable and implements <see cref="T:System.ICloneable"/>
            </summary>
            <remarks>When drawing edges the line is drawn inside the bounds,
            except the <see cref="T:VectorGraphics.Elements.VGPolyline"/> class, where the edge
            is drawn on the center of the bounds.</remarks>
        </member>
        <member name="F:VectorGraphics.Elements.VGElement.pen">
            <summary>
            Pen to draw edges.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGElement.shapeDrawAction">
            <summary>
            DrawAction: Edge, Fill or Both.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGElement.isInEditMode">
            <summary>
            Flag. True, if shape should be resizable and be 
            drawn with grab handles.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGElement.name">
            <summary>
            Name for this Graphic object, used for reference.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGElement.styleGroup">
            <summary>
            Groupname for this Graphic object, used for changing styles of
            a group of style-equal objects
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGElement.elementGroup">
            <summary>
            String to group bulk of elements.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGElement.location">
            <summary>
            Coordinate of top left corner of the element.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGElement.size">
            <summary>
            Bounding width and height of the element.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#cctor">
            <summary>
            Initializes static members of the VGElement class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor">
            <summary>
            Initializes a new instance of the VGElement class.
            Parameterless Constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for text and fills</param>
            <param name="newBounds">Bounds of element</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String,VectorGraphics.Tools.AudioFile)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for text and fills</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">Bounds of element</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
            <param name="newSound">The <see cref="T:VectorGraphics.Tools.AudioFile"/> to play with this element.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for fills</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for text and fills</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for text and fills</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">Bounds of element</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">Bounds of element</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">Bounds of element</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for text and fills</param>
            <param name="newBounds">Bounds of element</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for text and fills</param>
            <param name="newBounds">Bounds of element</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGElement class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for text and fills</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">Bounds of element</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.Serialize(VectorGraphics.Elements.VGElement)">
            <summary>
            This static method serializes the current <see cref="T:VectorGraphics.Elements.VGElement"/>
            to a memorystream which itself is converted to a base64 string.
            This is needed for lossless copying and retreiving from clipboard.
            </summary>
            <param name="objectToSerialize">The <see cref="T:VectorGraphics.Elements.VGElement"/>
            to be serialized.</param>
            <returns>A base64 encoded string with the memory stream of the 
            <see cref="T:VectorGraphics.Elements.VGElement"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.Deserialize(System.String)">
            <summary>
            This static method deserializes a <see cref="T:VectorGraphics.Elements.VGElement"/>
            from a base64 encoded memorystream string.
            This is needed for lossless copying and retreiving from clipboard.
            </summary>
            <param name="serializationString">A base64 encoded string with the memory stream of the 
            <see cref="T:VectorGraphics.Elements.VGElement"/> to deserialize.</param>
            <returns>The encoded <see cref="T:VectorGraphics.Elements.VGElement"/>. or null if conversion failed.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)">
            <summary>
            Virtual. An override should draw the element. 
            This base implementation draws the name, selection frame grab handles,
            if applicable.
            </summary>
            <param name="graphics">Graphics to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.GrabHandleMoved(VectorGraphics.Elements.GrabHandle@,System.Drawing.Point)">
            <summary>
            Virtual. An override should reinitialze the grab handles of the element. 
            Resets bounds of the graphic element according to the movement of the given grab handle
            </summary>
            <param name="handle">GrabHandle that moved</param>
            <param name="handleMovement">Movement in stimulus coordinates</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.Contains(System.Drawing.PointF)">
            <summary>
            Virtual. An override should calculate wheter given point is in shape region. 
            Detects if given point is in element region.
            </summary>
            <param name="pt">Check Point</param>
            <returns><strong>True</strong> if point is in region, otherwise <strong>false</strong></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.Contains(System.Drawing.PointF,System.Int32)">
            <summary>
            Virtual. An override should calculate whether given point is in shape region,
            including the tolerance widened area.
            Detects if given point is in element region widened by the tolerance value.
            </summary>
            <param name="pt">Point to check.</param>
            <param name="tolerance">An <see cref="T:System.Int32"/> tolerance value for 
            widening areas of interest to get a better hit rate in pixel.</param>
            <returns><strong>True</strong> if point is in region, otherwise <strong>false</strong></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.GetPoints">
            <summary>
            Virtual. An override should return all points
            that constitute this shape.
            This base class implementation returns the corner points of the bounding rectangle.
            </summary>
            <returns>The points of the bounding rectangle of this shape.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.GetPointCount">
            <summary>
            Virtual. An override should return the number of points of this shape.
            This base class implementation returns 4.
            </summary>
            <returns>The actual number of point of that shape.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.Reset">
            <summary>
            Virtual. An override should reset this shape to default values.
            This base class implementation resets the base class fields.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGElement"/></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.ToShortString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current 
            <see cref="T:VectorGraphics.Elements.VGElement"/> in short form.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGElement"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:VectorGraphics.Elements.VGElement"/> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current 
            <see cref="T:VectorGraphics.Elements.VGElement"/>.</param>
            <returns><strong>True</strong> if the specified Object is equal 
            to the current <see cref="T:VectorGraphics.Elements.VGElement"/>; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            <strong>GetHashCode</strong> is suitable for use in hashing algorithms 
            and data structures like a hash table. 
            It needs to be overridden when <see cref="M:System.Object.Equals(System.Object)"/>
            is overriden.
            </summary>
            <returns>An <see cref="T:System.Int32"/> with the
            hash code for the current <see cref="T:VectorGraphics.Elements.VGElement"/>. </returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.Dispose">
            <summary>
            Releases the resources used by the element.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.Clone">
            <summary>
            Creates a excact copy of given graphic element
            </summary>
            <returns>Excact copy of this graphic element</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.UpdateBoundsWithoutRaisingNewPosition(System.Drawing.RectangleF)">
            <summary>
            Updates the location and size of the element without raising
            the NewPosition method.
            </summary>
            <remarks>Used in the <see cref="T:VectorGraphics.Elements.VGPolyline"/> method 
            <see cref="M:VectorGraphics.Elements.VGPolyline.RecalculateBounds"/></remarks>
            <param name="bounds">New bounds.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.NewPosition(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Virtual. An override should recalculate 
            member coordinates, that are not recalulated in the base class (bounds).
            Invoked, when new bounds are set.
            </summary>
            <param name="translationMatrix">Translation Matrix, that performs the translation.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.AddGrabHandles">
            <summary>
            Virtual. An override should add specialized grab handles 
            depending on shape form.
            This base class implementation adds all 7 grab handles of the bounding rectangle.
            </summary>
            <remarks>Overrides should call 
            <see cref="M:VectorGraphics.Elements.VGElement.AddGrabHandles(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
            </remarks>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.CloneCore">
            <summary>
            Abstract. Should create a excact copy of the given graphic element
            </summary>
            <returns>Excact copy of this graphic element</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.RemoveGrabHandles">
            <summary>
            Removes all grab handles from the list.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.AddGrabHandles(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a box with up to 8 grab handles around the rectangle.
            </summary>
            <param name="center">True, if center should me movable and shown with a grab handle.</param>
            <param name="topLeft">True, if top left corner should me movable and shown with a grab handle.</param>
            <param name="topMiddle">True, if top middle corner should me movable and shown with a grab handle.</param>
            <param name="topRight">True, if top right corner should me movable and shown with a grab handle.</param>
            <param name="middleLeft">True, if middle left corner should me movable and shown with a grab handle.</param>
            <param name="middleRight">True, if middle right corner should me movable and shown with a grab handle.</param>
            <param name="bottomLeft">True, if bottom left corner should me movable and shown with a grab handle.</param>
            <param name="bottomMiddle">True, if bottom middle corner should me movable and shown with a grab handle.</param>
            <param name="bottomRight">True, if bottom right corner should me movable and shown with a grab handle.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.DrawHandles(System.Drawing.Graphics)">
            <summary>
            Draws grab handles on reference points of that shape
            </summary>
            <param name="graphics">Graphics to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.DrawFillAndEdge(System.Drawing.Graphics)">
            <summary>
            If the drawing styles are set, draws the fill 
            and the the edge into the inner bounds of this element.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to draw to.</param>
            <returns>A <see cref="T:System.Drawing.RectangleF"/> with the calculated
            inner bounds of the element (This is the bounds minus the
            pen sized edge, if it is drawn.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.GetSelectionFrameBounds">
            <summary>
            This method returns the outline bounds of the selection frame
            for this element, including calculation of the newPen thickness.
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> with the bounds of the
            selection frame to be used in ControlPaint.DrawSelectionFrame(...)</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.InitStandards">
            <summary>
            Set standard values for members variables.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGElement.CalcTranslationMatrix(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calulates translation matrix for given new top,left corner
            </summary>
            <param name="topLeftNew">A <see cref="T:System.Drawing.PointF"/> with the new coordinate of new upper left corner.</param>
            <param name="topLeftOld">A <see cref="T:System.Drawing.PointF"/> with the old coordinate of new upper left corner.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.Matrix"/> with the translation matrix.</returns>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.DefaultPen">
            <summary>
            Gets a default aqua colored solid pen.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.DefaultBrush">
            <summary>
            Gets a default aqua colored solid brush;
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.DefaultFont">
            <summary>
            Gets a default font;
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.DefaultFontColor">
            <summary>
            Gets a default aqua color for text
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Name">
            <summary>
            Gets or sets name of graphic element
            </summary>
            <value>A <see cref="T:System.String"/> with the name of this element,
            can be empty.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.StyleGroup">
            <summary>
            Gets or sets group enumeration of graphic element for setting style properties.
            </summary>
            <value>A <see cref="T:VectorGraphics.Elements.VGStyleGroup"/> for this element,
            that can categorize multiple elements into one design group,
            can be <see cref="F:VectorGraphics.Elements.VGStyleGroup.None"/>.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.ElementGroup">
            <summary>
            Gets or sets group description of graphic element
            </summary>
            <value>A <see cref="T:System.String"/> for this element,
            that can categorize multiple elements into one group.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Pen">
            <summary>
            Gets or sets used newPen for graphic element
            </summary>
            <value>A <see cref="P:VectorGraphics.Elements.VGElement.Pen"/> for drawing the bounds of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.SerializedPen">
            <summary>
            Gets or sets the SerializedPen.
            Serializes the 'Pen' Pen to XML.
            </summary>
            <value>A <see cref="T:System.String"/> with the string representation of the shapes newPen.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Brush">
            <summary>
            Gets or sets used newBrush for graphic element
            </summary>
            <value>A <see cref="P:VectorGraphics.Elements.VGElement.Brush"/> for drawing the interior of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.SerializedBrush">
            <summary>
            Gets or sets the SerializedBrush.
            Serializes the 'Brush' Brush to XML.
            </summary>
            <value>A <see cref="T:System.String"/> with the string representation of the shapes newBrush.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Font">
            <summary>
            Gets or sets newFont of text element
            </summary>
            <value>A <see cref="P:VectorGraphics.Elements.VGElement.Font"/> for drawing the name of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.SerializedFont">
            <summary>
            Gets or sets the SerializedFont.
            Serializes the <see cref="P:VectorGraphics.Elements.VGElement.Font"/> property to XML.
            </summary>
            <value>A <see cref="T:System.String"/> with the string representation of the shapes newFont.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.FontColor">
            <summary>
            Gets or sets used color for the graphic elements newFont.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> for the newFont of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.SerializedFontColor">
            <summary>
            Gets or sets the SerializedFontColor.
            Serializes and deserializes the <see cref="P:VectorGraphics.Elements.VGElement.FontColor"/> to XML,
            because XMLSerializer can not serialize <see cref="T:System.Drawing.Color"/> values.
            </summary>
            <value>A <see cref="T:System.String"/> with the string representation of the shapes newFont color.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.ShapeDrawAction">
            <summary>
            Gets or sets shape drawing mode enumeration, edge, fill or both
            </summary>
            <value>The <see cref="P:VectorGraphics.Elements.VGElement.ShapeDrawAction"/> of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.IsInEditMode">
            <summary>
            Gets or sets a value indicating whether the shape is in edit mode.
            Set to true, if shape should be resizable and drawn with grab handles
            </summary>
            <value>A <see cref="T:System.Boolean"/> which is <strong>true</strong>,
            if shape should be resizable and drawn with grab handles, otherwise
            <strong>false</strong>.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.BigBounds">
            <summary>
            Gets the bounding rectangle including the newPen width.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Bounds">
            <summary>
            Gets or sets bounding rectangle. Invokes NewPosition method when setting bounds.
            </summary>
            <value>A <see cref="T:System.Drawing.RectangleF"/> with the rectangular bounds
            of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Center">
            <summary>
            Gets or sets center of graphics element
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the center of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Size">
            <summary>
            Gets or sets size of element.
            </summary>
            <value>A <see cref="T:System.Drawing.SizeF"/> with the size of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Height">
            <summary>
            Gets height of element.
            </summary>
            <value>A <see cref="T:System.Single"/> with the height of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Width">
            <summary>
            Gets width of element.
            </summary>
            <value>A <see cref="T:System.Single"/> with the width of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Location">
            <summary>
            Gets or sets upper left corner of graphic element
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the location of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Visible">
            <summary>
            Gets or sets a value indicating whether the visibility of the graphic object.
            If set to false, object will not be drawn in paint method.
            </summary>
            <value>A <see cref="T:System.Boolean"/> which is <strong>true</strong>,
            if shape should be be drawn during OnPaint, otherwise
            <strong>false</strong>.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Modified">
            <summary>
            Gets or sets a value indicating whether the object is modified.
            If set to true, object will saved into database upon mouse up event.
            </summary>
            <value>A <see cref="T:System.Boolean"/> which is <strong>true</strong>,
            if shapes properties were modified since last serialization, otherwise
            <strong>false</strong>.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.GrabHandles">
            <summary>
            Gets or sets the list of grab handles for the current graphic element.
            Used for iterating in mouse over and redrawing
            </summary>
            <value>A <see cref="T:System.Collections.Generic.List`1"/> with the
            adornments of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.ModifierKeys">
            <summary>
            Gets or sets the modifier keys from the parent picture.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Keys"/> with the modifier keys of the
            owning picture.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.SerializableModifierKeys">
            <summary>
            Gets or sets the modifier keys from the parent picture.
            </summary>
            <value>A <see cref="T:System.String"/> with the serializable representation 
            of the modifier keys of the owning picture.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.Sound">
            <summary>
            Gets or sets an <see cref="T:VectorGraphics.Tools.AudioFile"/> for the sound
            to be played when this <see cref="T:VectorGraphics.Elements.VGElement"/> is displayed.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.TextAlignment">
            <summary>
            Gets or sets the <see cref="T:VectorGraphics.Elements.VGAlignment"/> for the name position.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.OnsetTime">
            <summary>
            Gets or sets a (trial) time at which this element is first displayed.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGElement.EndTime">
            <summary>
            Gets or sets a (trial) time at which this element has been updated for the last time.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGImage.transparencyArray">
            <summary>
            An array for the color matrix containing the transparency values.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGImage.filename">
            <summary>
            Saves the filename without path of the image.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGImage.alpha">
            <summary>
            Saves the alpha (transparency) value for this image
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGImage.layout">
            <summary>
            Saves the <see cref="T:System.Windows.Forms.ImageLayout"/> for this image.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGImage.canvas">
            <summary>
            Saves the size to canvas that holds this image.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGImage.clrMatrix">
            <summary>
            The <see cref="T:System.Drawing.Imaging.ColorMatrix"/> to use during drawing.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.String,System.String,System.Windows.Forms.ImageLayout,System.Single,System.Drawing.Size,VectorGraphics.Elements.VGStyleGroup,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the VGImage class.
            When newShapeDrawAction is set to None, only the image will
            be drawn, with Edge an additional border is drawn,
            with fill an additional (hopefully transparent) fill is drawn over the image.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both, None</param>
            <param name="newPen">Pen for additional borderline.</param>
            <param name="newBrush">Brush for additional fills.</param>
            <param name="newFont">Font for drawing name</param>
            <param name="newFontColor">Font color for drawing name.</param>
            <param name="newImageFile">filename without path</param>
            <param name="newPath">path to image file</param>
            <param name="newLayout"><see cref="T:System.Windows.Forms.ImageLayout"/> of the image</param>
            <param name="newAlpha">The transparency alpha for this image.0=transparent,1=opaque</param>
            <param name="newCanvas"><see cref="T:System.Drawing.Size"/> of the owning original canvas</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
            <param name="withoutImageInMemoryCreation">Omits internal image creation during
            construction.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.#ctor(System.Drawing.Image,System.Windows.Forms.ImageLayout,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the VGImage class.
            Creates a new VGImage with the given image and properties,
            that is not persistent, because it is not saved to disk.
            </summary>
            <param name="newImage">An <see cref="P:VectorGraphics.Elements.VGImage.Image"/> that should be displayed.</param>
            <param name="newLayout">An <see cref="T:System.Windows.Forms.ImageLayout"/> for the image.</param>
            <param name="newCanvas"><see cref="T:System.Drawing.Size"/> of the owning original canvas</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.#ctor">
            <summary>
            Initializes a new instance of the VGImage class.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.#ctor(VectorGraphics.Elements.VGImage)">
            <summary>
            Initializes a new instance of the VGImage class.
            Clone Constructor. Creates new <see cref="T:VectorGraphics.Elements.VGImage"/> that is
            identical to the given <see cref="T:VectorGraphics.Elements.VGImage"/>.
            </summary>
            <param name="cloneImage"><see cref="T:VectorGraphics.Elements.VGImage"/> to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.CreateInternalImage">
            <summary>
            Checks if the bitmap in the stimulus <see cref="P:VectorGraphics.Elements.VGImage.Filename"/> property
            exists and creates the internal <see cref="P:VectorGraphics.Elements.VGImage.StimulusImage"/>
            </summary>
            <returns><strong>True</strong> if creation succeeded, 
            otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/>.  
            Draws the image to the given graphics context.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.Reset">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Reset"/>. 
            Reset the current image element to
            default values.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGImage"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGImage"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGImage"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGImage"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.Dispose">
            <summary>
            Releases the resources used by the element.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/>.  
            Creates a excact copy of given <see cref="T:VectorGraphics.Elements.VGImage"/>
            </summary>
            <returns>Excact copy of this <see cref="T:VectorGraphics.Elements.VGImage"/></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.NewPosition(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Overridden. This resets the layout to <see cref="F:System.Windows.Forms.ImageLayout.None"/>,
            because the image is going to be moved.
            </summary>
            <param name="translationMatrix">Translation Matrix, that performs the translation.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.GetPointFArray(System.Drawing.RectangleF)">
            <summary>
            Returns an array of <see cref="T:System.Drawing.PointF"/> for the given
            <see cref="T:System.Drawing.RectangleF"/> with ul, ur, and ll corner.
            </summary>
            <param name="drawing_rectangle">The <see cref="T:System.Drawing.RectangleF"/> to be converted</param>
            <returns>An array of <see cref="T:System.Drawing.PointF"/> for the given
            <see cref="T:System.Drawing.RectangleF"/> with ul, ur, and ll corner.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGImage.InitTransparencyMatrix">
            <summary>
            Creates the <see cref="T:System.Drawing.Imaging.ColorMatrix"/> for the image transparency.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGImage.Filename">
            <summary>
            Gets or sets the filename without path for this image.
            </summary>
            <remarks>This property is used for reloading the image from file.</remarks>
            <value>A <see cref="T:System.String"/> with the images filename</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGImage.Filepath">
            <summary>
            Gets or sets the filenames path for this image.
            </summary>
            <remarks>This property is used for reloading the image from file.</remarks>
            <value>A <see cref="T:System.String"/> with the images path.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGImage.FullFilename">
            <summary>
            Gets the image filename with path.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGImage.Canvas">
            <summary>
            Gets or sets the size of the canvas on which the image is drawn.
            </summary>
            <value>A <see cref="T:System.Drawing.Size"/> with the width and height
            of the canvas on which the image should be drawn.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGImage.StimulusImage">
            <summary>
            Gets or sets the image to draw.
            </summary>
            <remarks>When this is null (after deserialization) the image is
            reconstructed from file.</remarks>
            <value>A <see cref="P:VectorGraphics.Elements.VGImage.Image"/> with the image.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGImage.Layout">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.ImageLayout"/> of this image.
            </summary>
            <value>An <see cref="T:System.Windows.Forms.ImageLayout"/> enumeration member.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGImage.Alpha">
            <summary>
            Gets or sets a <see cref="T:System.Single"/> with the alpha (transparency)
            value for this image 0=transparent, 1=opaque
            </summary>
            <value>An <see cref="T:System.Single"/> with the alpha value for this image.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGImage.Image">
            <summary>
            Gets or sets the current image.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGImage.ImageAttributes">
            <summary>
            Gets or sets an <see cref="P:VectorGraphics.Elements.VGImage.ImageAttributes"/> that 
            helps to draw the images transparent.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.String,System.String,System.Windows.Forms.ImageLayout,System.Single,System.Drawing.Size,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGScrollImage class.
            When newShapeDrawAction is set to None, only the image will
            be drawn, with Edge an additional border is drawn,
            with fill an additional (hopefully transparent) fill is drawn over the image.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both, None</param>
            <param name="newPen">Pen for additional borderline.</param>
            <param name="newBrush">Brush for additional fills.</param>
            <param name="newFont">Font for drawing name</param>
            <param name="newFontColor">Font color for drawing name.</param>
            <param name="newImageFile">filename without path</param>
            <param name="newPath">path to image file</param>
            <param name="newLayout"><see cref="T:System.Windows.Forms.ImageLayout"/> of the image</param>
            <param name="newAlpha">The transparency alpha for this image.0=transparent,1=opaque</param>
            <param name="newCanvas"><see cref="P:VectorGraphics.Elements.VGScrollImage.Size"/> of the owning original canvas</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.#ctor(System.Drawing.Image,System.Windows.Forms.ImageLayout,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the VGScrollImage class.
            Creates a new VGImage with the given image and properties,
            that is not persistent, because it is not saved to disk.
            </summary>
            <param name="newImage">An <see cref="T:System.Drawing.Image"/> that should be displayed.</param>
            <param name="newLayout">An <see cref="T:System.Windows.Forms.ImageLayout"/> for the image.</param>
            <param name="newCanvas"><see cref="P:VectorGraphics.Elements.VGScrollImage.Size"/> of the owning original canvas</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.#ctor">
            <summary>
            Initializes a new instance of the VGScrollImage class.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.#ctor(VectorGraphics.Elements.VGScrollImage)">
            <summary>
            Initializes a new instance of the VGScrollImage class.
            Clone Constructor. Creates new <see cref="T:VectorGraphics.Elements.VGImage"/> that is
            identical to the given <see cref="T:VectorGraphics.Elements.VGImage"/>.
            </summary>
            <param name="cloneImage"><see cref="T:VectorGraphics.Elements.VGImage"/> to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/>.  
            Draws the image to the given graphics context.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.Reset">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Reset"/>. 
            Reset the current image element to
            default values.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGImage"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGImage"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGImage"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGImage"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.Dispose">
            <summary>
            Releases the resources used by the element.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/>.  
            Creates a excact copy of given <see cref="T:VectorGraphics.Elements.VGScrollImage"/>
            </summary>
            <returns>Excact copy of this <see cref="T:VectorGraphics.Elements.VGScrollImage"/></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGScrollImage.NewPosition(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Overridden. This resets the layout to <see cref="F:System.Windows.Forms.ImageLayout.None"/>,
            because the image is going to be moved.
            </summary>
            <param name="translationMatrix">Translation Matrix, that performs the translation.</param>
        </member>
        <member name="P:VectorGraphics.Elements.VGScrollImage.Size">
            <summary>
            Overridden. Returns the images size if it is available otherwise
            the elements size.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGBrowser">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            A serializable class that describes a <see cref="P:VectorGraphics.Elements.VGBrowser.WebBrowser"/>
            element.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGBrowser.currentTransform">
            <summary>
            A <see cref="T:System.Drawing.Drawing2D.Matrix"/> with the current graphics transformation.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGBrowser.messageFilter">
            <summary>
            A <see cref="T:VectorGraphics.Controls.Flash.FlashMessageFilter"/> that is inserted in the 
            message loop when the control is presented.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.String,System.Int32,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.PointF,System.Drawing.SizeF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGBrowser class.
            </summary>
            <param name="newShapeDrawAction"><see cref="T:VectorGraphics.Elements.ShapeDrawAction"/> for the bounds.</param>
            <param name="newBrowserURL"><see cref="T:System.Uri"/> for the browser start location</param>
            <param name="newBrowseDepth">The number of links the user is allowed to follow,
            including backward links.</param>
            <param name="newPen">Pen to use</param>
            <param name="newBrush">Brush for drawing</param>
            <param name="newFont">Font for drawing name</param>
            <param name="newFontColor">Font color for drawing name.</param>
            <param name="position">TopLeft text position</param>
            <param name="size">Size of the clipping rectangle.</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.#ctor(VectorGraphics.Elements.VGBrowser)">
            <summary>
            Initializes a new instance of the VGBrowser class.
            Clone Constructor. Creates new VGBrowser that is
            identical to the given <see cref="T:VectorGraphics.Elements.VGBrowser"/>.
            </summary>
            <param name="oldBrowser">Browser element to clone.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.#ctor">
            <summary>
            Prevents a default instance of the VGBrowser class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.InitializeOnControl(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            This method loads the given url into the browser control, adds the 
            web browser control to the controls
            controls list.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> this web browser object
            should be hosted on.</param>
            <param name="recreateBrowser"><strong>True</strong>,
            if this function is called from separate thread to avoid error.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.SendMessagesToParent(System.Boolean)">
            <summary>
            This message adds or removes a <see cref="T:VectorGraphics.Controls.Flash.FlashMessageFilter"/>
            to or from the applications message pump to ensure the duplication
            of events captured by the activeX are notified also by the parent form.
            </summary>
            <param name="sendFlashMessagesToParent"><strong>True</strong>,
            if message filter should be added, <strong>false</strong>,
            if it should be removed.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/>.  
            Draws webbrowser onto given graphics context. 
            This method does only basic drawing, because the
            webbrowser is only used during recording, afterwards the screenshots
            are used. In recording mode, there will be the activex control on top, 
            so no gdi drawing.
            </summary>
            <param name="graphics">Graphics context to draw on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.Reset">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Reset"/>. 
            Resets the current browser element to
            default values (empty url).
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGBrowser"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGBrowser"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGBrowser"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGBrowser"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.Dispose">
            <summary>
            Releases the resources used by the element.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/>.  
            Creates an excact copy of given <see cref="T:VectorGraphics.Elements.VGBrowser"/>.
            </summary>
            <returns>Excact copy of this web browser element.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.GetControlHandle(System.Windows.Forms.Control)">
            <summary>
            Returns the given controls handle.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to receive the handle for.</param>
            <returns>An <see cref="T:System.IntPtr"/> with the controls handle.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGBrowser.InitializeFields">
            <summary>
            This method initializes member of this class.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGBrowser.WebBrowser">
            <summary>
            Gets or sets the underlying <see cref="P:VectorGraphics.Elements.VGBrowser.WebBrowser"/> control.
            </summary>
            <value>A <see cref="P:VectorGraphics.Elements.VGBrowser.WebBrowser"/> control that contains the ActiveX control.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGBrowser.BrowserURL">
            <summary>
            Gets or sets the <see cref="T:System.Uri"/> for the browser.
            </summary>
            <value>A <see cref="T:System.String"/> with the starting location for the browser.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGBrowser.BrowseDepth">
            <summary>
            Gets or sets the number of links the user is allowed to follow,
            including backward links
            </summary>
            <value>A <see cref="T:System.Int32"/> with the number of links the user is allowed to follow,
            including backward links.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGBrowser.Bounds">
            <summary>
            Gets or sets the bounding rectangle of this
            <see cref="T:VectorGraphics.Elements.VGBrowser"/>. Setting this property has no effect, 
            because the control is always full sized
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGBrowser.AddDelegate">
            <summary>
            The delegate for the thread-safe call to Control.Controls.Add(Control)
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to be added to the controls container.</param>
        </member>
        <member name="T:VectorGraphics.Elements.VGBrowser.RemoveDelegate">
            <summary>
            The delegate for the thread-safe call to Control.Controls.Remove(Control)
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to be removed from the controls container.</param>
        </member>
        <member name="T:VectorGraphics.Elements.VGAlignment">
            <summary>
            This enumeration specifies how to align 
            name of elements.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGAlignment.None">
            <summary>
            No alignment
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGAlignment.Top">
            <summary>
            Draw at the top of the bounds.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGAlignment.Left">
            <summary>
            Draw at the left side of the bounds.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGAlignment.Right">
            <summary>
            Draw at the right side of the bounds.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGAlignment.Bottom">
            <summary>
            Draw at the bottom of the bounds.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGAlignment.Center">
            <summary>
            Draw at the center of the bounds.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGArrow">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            A serializable class that is a vector graphics arrow drawn with a specific pen.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.firstPoint">
            <summary>
            Saves the starting point of the arrow.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.secondPoint">
            <summary>
            Saves the ending point of the arrow.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.firstPointDistance">
            <summary>
            The distance of the arrows tip from the 
            first point of the connecting line.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.secondPointDistance">
            <summary>
            The distance of the arrows tip from the 
            second point of the connecting line.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.firstPointWeight">
            <summary>
            The weight of the arrows tip at the 
            first point of the connecting line.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.secondPointWeight">
            <summary>
            The weight of the arrows tip at the 
            second point of the connecting line.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.formatString">
            <summary>
            A <see cref="T:System.String"/> with the formatting
            string for the weights.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.addOnString">
            <summary>
            A <see cref="T:System.String"/> with an additional unit for the weights
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.weightFont">
            <summary>
            The <see cref="T:System.Drawing.Font"/> for the weight values.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.weightFontColor">
            <summary>
            The <see cref="T:System.Drawing.Color"/> for the weight values font.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.scaleFactor">
            <summary>
            This factor scales the arrow sizes.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.pointsAreSet">
            <summary>
            Indicates, whether both points are set.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGArrow.hideWeights">
            <summary>
            Indicates whether to show or hide the
            weight values.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the VGArrow class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the VGArrow class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="pt1">first point</param>
            <param name="pt2">second point</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGArrow class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="pt1">first point</param>
            <param name="pt2">second point</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGArrow class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGArrow class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.#ctor">
            <summary>
            Prevents a default instance of the VGArrow class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.#ctor(VectorGraphics.Elements.VGArrow)">
            <summary>
            Initializes a new instance of the VGArrow class.
            Clone Constructor. Creates new arrow that is
            identical to the given arrow.
            </summary>
            <param name="arrow">arrow to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.Clear">
            <summary>
            This method clears the points of this arrow without
            changing its drawing properties as <see cref="M:VectorGraphics.Elements.VGArrow.Reset"/> does.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.RecalculateBounds">
            <summary>
            This method recalculates the bounding rectangle of this arrow.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/>.  
            Draws the arrow to the given graphics context.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.GrabHandleMoved(VectorGraphics.Elements.GrabHandle@,System.Drawing.Point)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.GrabHandleMoved(VectorGraphics.Elements.GrabHandle@,System.Drawing.Point)"/>. 
            Resets bounds of the arrow
            according to the movement of the given grab handle
            </summary>
            <param name="handle">GrabHandle that moved</param>
            <param name="handleMovement">Movement in stimulus coordinates</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.GetPoints">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.GetPoints"/>. 
            Get the starting and ending point of
            the arrow in a list.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with the arrows starting
            and ending point.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.GetPointCount">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.GetPointCount"/>. 
            Gets number of points of the arrow which are two :-)
            </summary>
            <returns>Two. (Number of points that constitute this arrow.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.Reset">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Reset"/>. 
            Reset the current arrow element to
            default values.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGArrow"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGArrow"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGArrow"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGArrow"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/>.  
            Creates an excact copy of given arrow.
            </summary>
            <returns>Excact copy of this <see cref="T:VectorGraphics.Elements.VGArrow"/></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.NewPosition(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.NewPosition(System.Drawing.Drawing2D.Matrix)"/>. 
            Recalculates the starting and ending point
            coordinates when arrow is moved.
            </summary>
            <param name="translationMatrix">Translation Matrix.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.AddGrabHandles">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.AddGrabHandles"/>. 
            Adds a grab handle for the starting and ending
            point of the arrow with a sizeall cursor.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.InitializeDefaults">
            <summary>
            Set default values for members variables.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGArrow.GetBounds">
            <summary>
            This method calculates the bounding rectangle for the given
            arrow.
            </summary>
            <returns>A <see cref="T:System.Drawing.RectangleF"/> with the bounding rectangle
            for this arrow.</returns>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.FirstPoint">
            <summary>
            Gets or sets the starting point of the arrow.
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the starting point location.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.SecondPoint">
            <summary>
            Gets or sets the ending point of the arrow.
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the ending point location.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.FirstPointWeight">
            <summary>
            Gets or sets the weight for the starting point of the arrow.
            </summary>
            <value>A <see cref="T:System.Single"/> with the weight for the starting point location.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.SecondPointWeight">
            <summary>
            Gets or sets the weight for the ending point of the arrow.
            </summary>
            <value>A <see cref="T:System.Single"/> with the weight for the ending point location.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.FirstPointDistance">
            <summary>
            Gets or sets the distance of the arrow tip form the first point of the arrow in pixels.
            </summary>
            <value>A <see cref="T:System.Single"/> with the distance of the arrow tip form the first point of the arrow in pixels.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.SecondPointDistance">
            <summary>
            Gets or sets the distance of the arrow tip form the second point of the arrow in pixels.
            </summary>
            <value>A <see cref="T:System.Single"/> with the distance of the arrow tip form the second point of the arrow in pixels.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.ScaleFactor">
            <summary>
            Gets or sets the scale factor for the weighting values to pixel transformation.
            </summary>
            <value>A <see cref="T:System.Single"/> with the scale factor for the weighting values to pixel transformation.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.FormatString">
            <summary>
            Gets or sets the formatting string for the weighting values.
            </summary>
            <value>A <see cref="T:System.String"/> with the formatting string for the weighting values.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.AddOnString">
            <summary>
            Gets or sets the unit addon string for the weighting values.
            </summary>
            <value>A <see cref="T:System.String"/> with the unit addon string for the weighting values.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.WeightFont">
            <summary>
            Gets or sets the font for the weighting values.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> for the weighting values.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.HideWeights">
            <summary>
            Gets or sets a value indicating whether to hide the weighting values.
            </summary>
            <value>A <see cref="T:System.Boolean"/> whether to hide the weighting values.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.SerializedWeightFont">
            <summary>
            Gets or sets the SerializedWeightFont.
            Serializes the <see cref="P:VectorGraphics.Elements.VGArrow.WeightFont"/> property to XML.
            </summary>
            <value>A <see cref="T:System.String"/> with the string representation of the shapes weightFont.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.WeightFontColor">
            <summary>
            Gets or sets the font color for the weighting values.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> for the weighting values.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.SerializedWeightFontColor">
            <summary>
            Gets or sets the SerializedWeightFontColor.
            Serializes and deserializes the <see cref="P:VectorGraphics.Elements.VGArrow.WeightFontColor"/> to XML,
            because XMLSerializer can not serialize <see cref="T:System.Drawing.Color"/> values.
            </summary>
            <value>A <see cref="T:System.String"/> with the string representation of the shapes weightFontColor color.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGArrow.Bounds">
            <summary>
            Gets or sets the arrows bounding rectangle.
            Overridden <see cref="P:VectorGraphics.Elements.VGElement.Bounds"/>
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.ElementCollections.Slide">
            <summary>
            Class to specify a slide with stimuli that can be 
            presented in the Presentation Interface.
            </summary>
            <remarks>Do not use the flag [DefaultValue(...)] for the properties, because otherwise
            it will not be serialized if it has the default value. 
            And then deserialization fails.
            </remarks>
        </member>
        <member name="T:VectorGraphics.Tools.Interfaces.IClonableNamedObject">
            <summary>
            This interface inherits form <see cref="T:VectorGraphics.Tools.Interfaces.INamedObject"/>
            and <see cref="T:System.ICloneable"/>.
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Interfaces.INamedObject">
            <summary>
            This interface supports named objects.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.Interfaces.INamedObject.Name">
            <summary>
            Gets or sets the object name.
            </summary>
            <value>The name for the object.</value>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.Slide.stimuli">
            <summary>
            Saves the list of vector graphic stimuli.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.Slide.activeXElements">
            <summary>
            Saves the list of vector graphic stimuli that contain
            ActiveX controls (like <see cref="T:VectorGraphics.Elements.VGFlash"/>).
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.Slide.thumb">
            <summary>
            Saves a thumb for this slide.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.Slide.stopConditions">
            <summary>
            A list of <see cref="T:VectorGraphics.StopConditions.StopCondition"/> that can end the slide.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.Slide.name">
            <summary>
            Saves the slides name.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.Slide.category">
            <summary>
            Saves the slides category.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.Slide.correctResponses">
            <summary>
            Saves a <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> that contains
            valid responses for the slide.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.Slide.links">
            <summary>
            Saves a <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> that contains
            links from this slide to other trials.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.Slide.targets">
            <summary>
            Saves a <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> that contains the target
            areas of this slide.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.#cctor">
            <summary>
            Initializes static members of the <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/> class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.#ctor">
            <summary>
            Initializes a new instance of the Slide class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.#ctor(VectorGraphics.Elements.ElementCollections.Slide)">
            <summary>
            Initializes a new instance of the Slide class as a clone of 
            the given slide.
            </summary>
            <param name="slide">The <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/> to clone.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.#ctor(System.String,System.Drawing.Color,System.Drawing.Image,VectorGraphics.StopConditions.StopConditionCollection,VectorGraphics.StopConditions.StopConditionCollection,System.String,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the Slide class.
            </summary>
            <param name="newName">A <see cref="T:System.String"/> with the unique name of this Slide</param>
            <param name="newBackgroundColor">A <see cref="T:System.Drawing.Color"/> with the background color for this slide</param>
            <param name="newBackgroundImage">A <see cref="T:System.Drawing.Image"/> with the background image for this slide</param>
            <param name="newStopConditions">A <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> list
            of responses for which the slide presentation should stop.</param>
            <param name="newResponses">An optional <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> with responses
            that indicate correct answers.</param>
            <param name="newCategory">A <see cref="T:System.String"/> with an optional category 
            that gives an additional slide distinction.</param>
            <param name="newPresentationSize">A <see cref="T:System.Drawing.Size"/> with the original 
            presentation size of this slide.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.DrawSlideAsync(VectorGraphics.Elements.ElementCollections.Slide,System.Drawing.Graphics)">
            <summary>
            Draw the slide onto the given graphics in the background thread.
            </summary>
            <param name="slide">A <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/> that should be drawn.</param>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> on which the slide should be drawn.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.Clone">
            <summary>
            <see cref="T:System.ICloneable"/> interface implementation.
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.Dispose">
            <summary>
            Releases the resources used by the slide.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.Draw(System.Drawing.Graphics)">
            <summary>
            Drawing method. Draws the whole slide content to the given
            graphics.
            </summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> to render to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown, when <see cref="P:VectorGraphics.Elements.ElementCollections.Slide.PresentationSize"/> is empty.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.RemoveVGElements">
            <summary>
            Removes all vector graphic stimuli from the slide.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.RemoveActiveXElements">
            <summary>
            Removes all ActiveX stimuli from the slide.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.CreateFlashThumb(System.String,System.Drawing.Size)">
            <summary>
            Creates a thumbnail for the given flash by invoking a dialog,
            loads the movie, captures the surface, closes the dialog.
            </summary>
            <param name="filename">Filename with full path to .swf file</param>
            <param name="thumbSize">The <see cref="T:System.Drawing.Size"/> for the thumb.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> with the thumbnail image.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.CreateBrowserThumb(System.String,System.Drawing.Size)">
            <summary>
            Creates a thumbnail for the given website by invoking a dialog,
            loads the url, captures the surface, closes the dialog.
            </summary>
            <param name="url">URL of browser location</param>
            <param name="presentationSize">The <see cref="T:System.Drawing.Size"/> for the thumb.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> with the thumbnail image.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.CloneCore">
            <summary>
            Clones given slide object.
            </summary>
            <returns>A <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/> with a clone of the current slide.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.Slide.RecreateThumb">
            <summary>
            This method creates a new thumb for this slide.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.IsDisabled">
            <summary>
            Gets or sets a value indicating whether the slide should
            be disabled during slideshow presentation
            </summary>
            <value>A <see cref="T:System.Boolean"/> indicating that this slide
            should not be presented.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.IdOfPreSlideFixationTrial">
            <summary>
            Gets or sets a unique identifier for the trial that should be
            displayed before this slide is shown, but not 
            used in analysis.
            </summary>
            <value>An <see cref="T:System.Int32"/> with a unique trial id or -1 if not used.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.SlideDesignThumbSize">
            <summary>
            Gets or sets the size of slide thumbs.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.HasActiveXContent">
            <summary>
            Gets a value indicating whether one of the slides
            contains flash content
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.IsThumbNull">
            <summary>
            Gets a value indicating whether the current thumb is empty.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.Thumb">
            <summary>
            Gets or sets a thumb for this slide.
            </summary>
            <value>A <see cref="T:System.Drawing.Image"/> with the slides thumb.</value>
            <remarks>Because images can not be xml serialized directly,
            this property is duplicated by <see cref="P:VectorGraphics.Elements.ElementCollections.Slide.SerializedThumb"/>,
            which uses <see cref="T:System.ComponentModel.TypeDescriptor"/> to serialize to bytes.</remarks>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.SerializedThumb">
            <summary>
            Gets or sets the SerializedThumb.
            Serializes and deserializes the <see cref="P:VectorGraphics.Elements.ElementCollections.Slide.Thumb"/> to XML,
            because XMLSerializer can not automatically 
            serialize <see cref="T:System.Drawing.Image"/> values.
            </summary>
            <value>A <see cref="T:System.Byte"/> array with the slides thumb bytes.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.PresentationSize">
            <summary>
            Gets or sets the original presentation size of
            this Slide (used to calculate transformations)
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.StimulusSize">
            <summary>
            Gets the original size of the stimulus content
            on this slide. (That may be greater than the presentation size
            during web browsing)
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.Modified">
            <summary>
            Gets or sets a value indicating whether the slide is modified
            </summary>
            <value>A <see cref="T:System.Boolean"/> indication the modification
            state of this slide.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.IsDesktopSlide">
            <summary>
            Gets or sets a value indicating whether the slide is modified
            a desktop slide, that means invisible to the user showing
            the underlying desktop during recording
            </summary>
            <value>A <see cref="T:System.Boolean"/> indicating that this is
            a desktop slide.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.IsBrowserSlide">
            <summary>
            Gets or sets a value indicating whether the slide is 
            a browser slide containing activeX browser element
            </summary>
            <value>A <see cref="T:System.Boolean"/> indicating that this is
            a browser slide.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.VGStimuli">
            <summary>
            Gets or sets the list of vector graphic stimuli for this slide.
            </summary>
            <value>A <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> with the vector graphic
            elements.</value>
            <remarks>This elements include all <see cref="T:VectorGraphics.Elements.VGElement"/> derived classes,
            which are at the moment: <see cref="T:VectorGraphics.Elements.VGCursor"/>,<see cref="T:VectorGraphics.Elements.VGLine"/>,
            <see cref="T:VectorGraphics.Elements.VGEllipse"/>, <see cref="T:VectorGraphics.Elements.VGImage"/>, <see cref="T:VectorGraphics.Elements.VGPolyline"/>,
            <see cref="T:VectorGraphics.Elements.VGRectangle"/>, <see cref="T:VectorGraphics.Elements.VGText"/>, <see cref="T:VectorGraphics.Elements.VGRichText"/>.</remarks>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.ActiveXStimuli">
            <summary>
            Gets or sets the list of vector graphic stimuli containing
            activeX controls like <see cref="T:VectorGraphics.Elements.VGFlash"/>
            </summary>
            <value>A <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> with the vector graphic
            elements that contain activeX controls</value>
            <remarks>This elements include at the moment: <see cref="T:VectorGraphics.Elements.VGFlash"/>.</remarks>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.Name">
            <summary>
            Gets or sets a unique name for this Slide.
            </summary>
            <value>A <see cref="T:System.String"/> with the unique slide name.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.Category">
            <summary>
            Gets or sets a category of this <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/>.
            </summary>
            <value>A <see cref="T:System.String"/> with a slide category.</value>
            <remarks>Can be for example "BlankSlide" or "MultipleChoiceQuestion" etc.</remarks>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.StopConditions">
            <summary>
            Gets or sets the list of conditions that end this slide. 
            Can be of any <see cref="T:VectorGraphics.StopConditions.StopCondition"/> type.
            </summary>
            <value>A <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> with a list of <see cref="T:VectorGraphics.StopConditions.StopCondition"/>s.</value>
            <remarks>Currently three <see cref="T:VectorGraphics.StopConditions.StopCondition"/> types
            are known: <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/>,
            <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/> and <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/>.</remarks>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.BackgroundColor">
            <summary>
            Gets or sets the background color of the current slide.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> with the slides background color.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.SerializedBackgroundColor">
            <summary>
            Gets or sets the SerializedBackgroundColor.
            Serializes and deserializes the <see cref="P:VectorGraphics.Elements.ElementCollections.Slide.BackgroundColor"/> to XML,
            because XMLSerializer can not automatically 
            serialize <see cref="T:System.Drawing.Color"/> values.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.BackgroundImage">
            <summary>
            Gets or sets the background image of the slide.
            </summary>
            <value>A <see cref="T:System.Drawing.Image"/> with the background image.</value>
            <remarks>Because this property can not be xml serialized,
            there is the <see cref="P:VectorGraphics.Elements.ElementCollections.Slide.SerializedBackgroundImage"/>
            property from which this property can be persisted.</remarks>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.SerializedBackgroundImage">
            <summary>
            Gets or sets the SerializedBackgroundImage.
            Serializes and deserializes the <see cref="P:VectorGraphics.Elements.ElementCollections.Slide.BackgroundImage"/> to XML,
            because XMLSerializer can not automatically 
            serialize <see cref="T:System.Drawing.Image"/> values.
            </summary>
            <value>A <see cref="T:System.Byte"/> array with the background image bytes.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.BackgroundSound">
            <summary>
            Gets or sets an <see cref="T:VectorGraphics.Tools.AudioFile"/> for the background sound.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.TriggerSignal">
            <summary>
            Gets or sets the device trigger signal element, that can be used
            to send a trigger to other devices during presentation.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.CorrectResponses">
            <summary>
            Gets or sets the mouse or key that is the correct 
            answer to a slides question.
            </summary>
            <value>A <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> with the correct responses to the slide.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.Links">
            <summary>
            Gets or sets the collection of links from this slide
            to other trials.
            </summary>
            <value>A <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> with the
            links to other Trial s.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.TargetShapes">
            <summary>
            Gets or sets a <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> with the shapes 
            that define target areas for a response mouse event that is 
            accepted to be a valid response.
            </summary>
            <value>A <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> that with the  target areas of this slide.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.MouseCursorVisible">
            <summary>
            Gets or sets a value indicating whether the mouse cursor is visible during
            presentation of this slide.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value. 
            <strong>True</strong> if mouse cursor should be visible during 
            presentation of this slide.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.MouseInitialPosition">
            <summary>
            Gets or sets the mouse cursors initial position.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> with the initial position of the mouse cursor.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.Slide.ForceMousePositionChange">
            <summary>
            Gets or sets a value indicating whether to let the mouse cursor
            at its current location during slide change
            </summary>
            <value>A <see cref="T:System.Boolean"/> indicating whether to let the mouse cursor
            at its current location during slide change</value>
        </member>
        <member name="T:VectorGraphics.Elements.ElementCollections.Slide.AsyncDrawSlideMethodCaller">
            <summary>
            Delegate to call a slide.Draw() asynchronous from another thread
            </summary>
            <param name="slide">The <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/> to be drawn.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to draw the slide to.</param>
        </member>
        <member name="T:VectorGraphics.StopConditions.NavigatedStopCondition">
            <summary>
            Derived from <see cref="T:VectorGraphics.StopConditions.StopCondition"/>.
            This class stores a url of the navigated link
            </summary>
        </member>
        <member name="T:VectorGraphics.StopConditions.InputStopCondition">
            <summary>
            Derived from <see cref="T:VectorGraphics.StopConditions.StopCondition"/>.
            This class is the base class for input stop conditions like MouseInput or KeyInput.
            </summary>
        </member>
        <member name="T:VectorGraphics.StopConditions.StopCondition">
            <summary>
            Abstract base class for all stop conditions.
            <remarks>A <strong>StopCondition</strong> is a pair of
            a type and a value for which the slide should beeing stop displayed.
            For example A <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/> has a property 
            <see cref="P:VectorGraphics.StopConditions.TimeStopCondition.Duration"/> that means, the slide is stopped,
            after this time has left.
            There are three different Stop conditions available:
            <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/>, <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/>,
            <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/>.</remarks>
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.StopCondition.isCorrectResponse">
            <summary>
            Saves a value indication if this condition was a correct response to
            the slide. Only applies, when correct responses are defined,
            otherwise this is null.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopCondition.#ctor">
            <summary>
            Initializes a new instance of the StopCondition class.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopCondition.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the StopCondition class.
            </summary>
            <param name="newIsCorrectResponse">A <see cref="T:System.Boolean"/> indicating if this is a correct response.
            This value can be null.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopCondition.Clone">
            <summary>
            Creates a excact copy of given <see cref="T:VectorGraphics.StopConditions.StopCondition"/>
            </summary>
            <returns>Excact copy of this <see cref="T:VectorGraphics.StopConditions.StopCondition"/></returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopCondition.ResetValue">
            <summary>
            An implementation should reset the condition 
            to default values.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopCondition.CloneCore">
            <summary>
            Should create a excact copy of the given stop condition
            </summary>
            <returns>Excact copy of this stop condition</returns>
        </member>
        <member name="P:VectorGraphics.StopConditions.StopCondition.IsCorrectResponse">
            <summary>
            Gets or sets a value indicating whether this condition was a correct response to
            the slide. Only applies, when correct responses are defined,
            otherwise this is null.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.InputStopCondition.DEFAULTANYKEY">
            <summary>
            A <see cref="T:System.Boolean"/> with the default value for
            the <see cref="P:VectorGraphics.StopConditions.InputStopCondition.CanBeAnyInputOfThisType"/> property.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.InputStopCondition.anyInputOfThisType">
            <summary>
            Saves the value, if any input of child class type is valid.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.InputStopCondition.trialID">
            <summary>
            Saves the name of the trial that this condition links to
            or is null, if this is not a link.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.InputStopCondition.#ctor">
            <summary>
            Initializes a new instance of the InputStopCondition class.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.InputStopCondition.#ctor(VectorGraphics.StopConditions.InputStopCondition)">
            <summary>
            Initializes a new instance of the InputStopCondition class.
            Clone Constructor. Creates new <see cref="T:VectorGraphics.StopConditions.InputStopCondition"/> that is
            identical to the given <see cref="T:VectorGraphics.StopConditions.InputStopCondition"/>.
            </summary>
            <param name="newInputStopCondition">The <see cref="T:VectorGraphics.StopConditions.InputStopCondition"/> to clone.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.InputStopCondition.#ctor(System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the InputStopCondition class.
            </summary>
            <param name="newCanBeAnyInput"><strong>True</strong>, if any mouse button can
            end the slide display, otherwise <strong>false</strong>.</param>
            <param name="newTrialID">A nullable <see cref="T:System.Int32"/> with the trial
            ID this stop condition links to or null if this is not a link.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.InputStopCondition.ResetValue">
            <summary>
            Reset the current mouse stop condition to
            default values
            </summary>
        </member>
        <member name="P:VectorGraphics.StopConditions.InputStopCondition.CanBeAnyInputOfThisType">
            <summary>
            Gets or sets a value indicating whether any mousebutton or key can end the slide display.
            </summary>
            <value>A <see cref="T:System.Boolean"/> which is true, 
            if any mousebutton or key can end the slide display.</value>
        </member>
        <member name="P:VectorGraphics.StopConditions.InputStopCondition.TrialID">
            <summary>
            Gets or sets the trial ID this condition links to.
            </summary>
            <value>A nullable <see cref="T:System.Int32"/> which is the trial ID of 
            the trial this condition links to or null if there is no link.</value>
        </member>
        <member name="F:VectorGraphics.StopConditions.NavigatedStopCondition.link">
            <summary>
            The <see cref="T:System.Uri"/> to navigate to.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.NavigatedStopCondition.#ctor">
            <summary>
            Initializes a new instance of the NavigatedStopCondition class.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.NavigatedStopCondition.#ctor(VectorGraphics.StopConditions.NavigatedStopCondition)">
            <summary>
            Initializes a new instance of the NavigatedStopCondition class.
            Clone Constructor.
            </summary>
            <param name="cloneCondition">The <see cref="T:VectorGraphics.StopConditions.NavigatedStopCondition"/>
            to be cloned.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.NavigatedStopCondition.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the NavigatedStopCondition class.
            </summary>
            <param name="newTargetUri">A <see cref="T:System.Uri"/> with the
            link to be navigated to.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.NavigatedStopCondition.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns a <see cref="T:System.String"/> that represents 
            the current <see cref="T:VectorGraphics.StopConditions.NavigatedStopCondition"/>. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents 
            the current <see cref="T:VectorGraphics.StopConditions.NavigatedStopCondition"/></returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.NavigatedStopCondition.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:VectorGraphics.StopConditions.NavigatedStopCondition"/> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current 
            <see cref="T:VectorGraphics.StopConditions.NavigatedStopCondition"/>.</param>
            <returns><strong>True</strong> if the specified Object is equal 
            to the current <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/>; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.NavigatedStopCondition.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            <strong>GetHashCode</strong> is suitable for use in hashing algorithms 
            and data structures like a hash table. 
            It needs to be overridden when <see cref="M:System.Object.Equals(System.Object)"/>
            is overriden.
            </summary>
            <returns>A hash code for the current <see cref="T:VectorGraphics.StopConditions.NavigatedStopCondition"/>. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.NavigatedStopCondition.ResetValue">
            <summary>
            Reset the current navigated stop condition to
            default values.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.NavigatedStopCondition.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.StopConditions.StopCondition.Clone"/> method.
            Returns a <see cref="T:VectorGraphics.StopConditions.StopCondition"/> that is
            an exact copy of this <see cref="T:VectorGraphics.StopConditions.NavigatedStopCondition"/>. 
            </summary>
            <returns>A <see cref="T:VectorGraphics.StopConditions.StopCondition"/> that is
            an exact copy of this <see cref="T:VectorGraphics.StopConditions.NavigatedStopCondition"/>. </returns>
        </member>
        <member name="P:VectorGraphics.StopConditions.NavigatedStopCondition.Link">
            <summary>
            Gets or sets the link to navigate to.
            </summary>
            <value> The <see cref="T:System.Uri"/> that has been navigated to.</value>
        </member>
        <member name="T:VectorGraphics.Tools.AsyncHelper">
            <summary>
            This class provides support for fire and forget events.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.AsyncHelper.FireAndForget(System.Delegate,System.Object[])">
            <summary>
            Fires the delegate without any need to call EndInvoke.
            </summary>
            <param name="d">Target Delegate - must contain only one Target method</param>
            <param name="args">Users arguments.</param>
        </member>
        <member name="M:VectorGraphics.Tools.AsyncHelper.FireAsync(System.Delegate,System.Object[])">
            <summary>
            Fires each of the members in the delegate asynchronously. All the members
            will be fired even if one of them fires an exception
            </summary>
            <param name="del">The delegate we want to fire</param>
            <param name="args">Each of the args we want to fire.</param>
        </member>
        <member name="T:VectorGraphics.Tools.AsyncHelper.Target">
            <summary>
            Private class holds data for a delegate to be run on the thread pool
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.AsyncHelper.Target.TargetDelegate">
            <summary>
            This is the delegate for the target method.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.AsyncHelper.Target.Args">
            <summary>
            This is the array of objects for the method.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.AsyncHelper.Target.#ctor(System.Delegate,System.Object[])">
            <summary>
            Initializes a new instance of the Target class.
            Creates a new <see cref="T:VectorGraphics.Tools.AsyncHelper.Target"/> instance this holds arguments and contains
            the method ExecuteDelegate to be called on the threadpool.
            </summary>
            <param name="d">The users delegate to fire</param>
            <param name="args">The users arguments to the delegate</param>
        </member>
        <member name="M:VectorGraphics.Tools.AsyncHelper.Target.ExecuteDelegate(System.Object)">
            <summary>
            Executes the delegate by calling DynamicInvoke.
            </summary>
            <param name="o">This parameter is required by the threadpool but is unused.</param>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.FlashMouseLeaveMessageFilter">
            <summary>
            A Message Filter class derived from <see cref="T:System.Windows.Forms.IMessageFilter"/>.
            Hooks messages to the given Object and posts them also to 
            their underlying parent.
            </summary>
            <remarks>That is needed for getting mouse and key events behind a 
            ActiveX object, that does not support the standard windows event handlers.</remarks>
            <seealso cref="T:System.Windows.Forms.AxHost"/>
            <seealso cref="T:System.Windows.Forms.IMessageFilter"/>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.FlashMouseLeaveMessageFilter.comObjectHandle">
            <summary>
            Saves the <see cref="T:System.IntPtr"/> handle for the object whos events 
            should be posted to its parent.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashMouseLeaveMessageFilter.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the FlashMouseLeaveMessageFilter class.
            </summary>
            <param name="flashComObjectHandle">A Handle for the object whos events 
            should be filtered.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashMouseLeaveMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Filters out a message before it is dispatched. 
            </summary>
            <param name="m">The message to be dispatched. 
            You cannot modify this message. </param>
            <returns><strong>True</strong> to filter the message and stop 
            it from being dispatched; <strong>False</strong> to allow the message to continue 
            to the next filter or control. </returns>
        </member>
        <member name="T:VectorGraphics.Controls.Timer.TimerStartException">
            <summary>
            The exception that is thrown when a timer fails to start.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.TimerStartException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TimerStartException class.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception. 
            </param>
        </member>
        <member name="T:VectorGraphics.Controls.Timer.TimerMode">
            <summary>
            Defines constants for the multimedia Timer's event types.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.TimerMode.OneShot">
            <summary>
            Timer event occurs once.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.TimerMode.Periodic">
            <summary>
            Timer event occurs periodically.
            </summary>
        </member>
        <member name="T:VectorGraphics.Controls.Timer.TimerCaps">
            <summary>
            Represents information about the multimedia Timer's capabilities.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.TimerCaps.PeriodMin">
            <summary>
            Minimum supported period in milliseconds.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.TimerCaps.PeriodMax">
            <summary>
            Maximum supported period in milliseconds.
            </summary>
        </member>
        <member name="T:VectorGraphics.Controls.Timer.MultimediaTimer">
            <summary>
            Represents the Windows multimedia timer.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.TIMERRNOERROR">
            <summary>
            Indicates that the operation was successful.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.caps">
            <summary>
            Multimedia timer capabilities.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.timerID">
            <summary>
            Timer identifier.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.mode">
            <summary>
            Timer mode.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.period">
            <summary>
            Period between timer events in milliseconds.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.resolution">
            <summary>
            Timer resolution in milliseconds.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.timeProcPeriodic">
            <summary>
            Called by Windows when a timer periodic event occurs.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.timeProcOneShot">
            <summary>
            Called by Windows when a timer one shot event occurs.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.tickRaiser">
            <summary>
            Represents the method that raises the Tick event.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.running">
            <summary>
            Indicates whether or not the timer is running.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.disposed">
            <summary>
            Indicates whether or not the timer has been disposed.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.synchronizingObject">
            <summary>
            The ISynchronizeInvoke object to use for marshaling events.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Timer.MultimediaTimer.site">
            <summary>
            For implementing IComponent.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.#cctor">
            <summary>
            Initializes static members of the MultimediaTimer class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the MultimediaTimer class with the specified IContainer.
            </summary>
            <param name="container">
            The IContainer to which the Timer will add itself.
            </param>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.#ctor">
            <summary>
            Initializes a new instance of the MultimediaTimer class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.Finalize">
            <summary>
            Finalizes an instance of the MultimediaTimer class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.Dispose">
            <summary>
            Frees timer resources.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.Start">
            <summary>
            Starts the timer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The timer has already been disposed.
            </exception>
            <exception cref="T:VectorGraphics.Controls.Timer.TimerStartException">
            The timer failed to start.
            </exception>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.Stop">
            <summary>
            Stops timer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.timeGetDevCaps(VectorGraphics.Controls.Timer.TimerCaps@,System.Int32)">
            <summary>
            The timeGetDevCaps function queries the timer device to determine its resolution.
            </summary>
            <param name="caps">A TIMECAPS structure. This structure is filled with 
            information about the resolution of the timer device.</param>
            <param name="sizeOfTimerCaps">Size, in bytes, of the TIMECAPS structure.</param>
            <returns>Returns TIMERR_NOERROR if successful or TIMERR_STRUCT if it 
            fails to return the timer device capabilities.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.timeSetEvent(System.Int32,System.Int32,VectorGraphics.Controls.Timer.MultimediaTimer.TimeProc,System.Int32,System.Int32)">
            <summary>
            The timeSetEvent function starts a specified timer event. 
            The multimedia timer runs in its own thread. After the event is activated, 
            it calls the specified callback function or sets or pulses the specified event object.
            </summary>
            <param name="delay">Event delay, in milliseconds. If this value is not in the 
            range of the minimum and maximum event delays supported by the timer, 
            the function returns an error.</param>
            <param name="resolution">Resolution of the timer event, in milliseconds. 
            The resolution increases with smaller values; a resolution of 0 indicates
            periodic events should occur with the greatest possible accuracy. 
            To reduce system overhead, however, you should use the maximum value 
            appropriate for your application.</param>
            <param name="proc">Pointer to a callback function that is called 
            once upon expiration of a single event or periodically upon expiration 
            of periodic events. If fuEvent specifies the TIME_CALLBACK_EVENT_SET 
            or TIME_CALLBACK_EVENT_PULSE flag, then the lpTimeProc parameter is interpreted 
            as a handle to an event object. The event will be set or pulsed upon completion 
            of a single event or periodically upon completion of periodic events. For any 
            other value of fuEvent, the lpTimeProc parameter is interpreted as a function
            pointer with the following signature: void (CALLBACK)(UINT uTimerID, UINT uMsg, 
            DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);</param>
            <param name="user">User-supplied callback data.</param>
            <param name="mode">Timer event type.</param>
            <returns>Returns an identifier for the timer event if successful 
            or an error otherwise. This function returns NULL if it fails and 
            the timer event was not created. (This identifier is also passed to the callback function.)</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.timeKillEvent(System.Int32)">
            <summary>
            The timeKillEvent function cancels a specified timer event.
            </summary>
            <param name="id">Identifier of the timer event to cancel. 
            This identifier was returned by the timeSetEvent function 
            when the timer event was set up.</param>
            <returns>Returns TIMERR_NOERROR if successful or MMSYSERR_INVALPARAM 
            if the specified timer event does not exist.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.TimerPeriodicEventCallback(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Callback method called by the Win32 multimedia timer when a timer
            periodic event occurs.
            </summary>
            <param name="id">Timer identifier</param>
            <param name="msg">Message to send</param>
            <param name="user">User parameter</param>
            <param name="param1">Parameter One</param>
            <param name="param2">Parameter Two</param>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.TimerOneShotEventCallback(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Callback method called by the Win32 multimedia timer when a timer
            one shot event occurs.
            </summary>
            <param name="id">Timer identifier</param>
            <param name="msg">Message to send</param>
            <param name="user">User parameter</param>
            <param name="param1">Parameter One</param>
            <param name="param2">Parameter Two</param>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.OnDisposed(System.EventArgs)">
            <summary>
            Raises the Disposed event.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.OnStarted(System.EventArgs)">
            <summary>
            Raises the Started event.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.OnStopped(System.EventArgs)">
            <summary>
            Raises the Stopped event.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.OnTick(System.EventArgs)">
            <summary>
            Raises the Tick event.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Controls.Timer.MultimediaTimer.Initialize">
            <summary>
            Initialize timer with default values.
            </summary>
        </member>
        <member name="E:VectorGraphics.Controls.Timer.MultimediaTimer.Started">
            <summary>
            Occurs when the Timer has started;
            </summary>
        </member>
        <member name="E:VectorGraphics.Controls.Timer.MultimediaTimer.Stopped">
            <summary>
            Occurs when the Timer has stopped;
            </summary>
        </member>
        <member name="E:VectorGraphics.Controls.Timer.MultimediaTimer.Tick">
            <summary>
            Occurs when the time period has elapsed.
            </summary>
        </member>
        <member name="E:VectorGraphics.Controls.Timer.MultimediaTimer.Disposed">
            <summary>
            Occurs when the timer is disposed.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Timer.MultimediaTimer.Capabilities">
            <summary>
            Gets the timer capabilities.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Timer.MultimediaTimer.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal event-handler calls.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Timer.MultimediaTimer.Period">
            <summary>
            Gets or sets the time between Tick events.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>   
        </member>
        <member name="P:VectorGraphics.Controls.Timer.MultimediaTimer.Resolution">
            <summary>
            Gets or sets the timer resolution.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>        
            <remarks>
            The resolution is in milliseconds. The resolution increases 
            with smaller values; a resolution of 0 indicates periodic events 
            should occur with the greatest possible accuracy. To reduce system 
            overhead, however, you should use the maximum value appropriate 
            for your application.
            </remarks>
        </member>
        <member name="P:VectorGraphics.Controls.Timer.MultimediaTimer.Mode">
            <summary>
            Gets or sets the timer mode.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            If the timer has already been disposed.
            </exception>
        </member>
        <member name="P:VectorGraphics.Controls.Timer.MultimediaTimer.IsRunning">
            <summary>
            Gets a value indicating whether the Timer is running.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Timer.MultimediaTimer.Site">
            <summary>
            Gets or sets the Components <see cref="T:System.ComponentModel.ISite"/>
            </summary>
        </member>
        <member name="T:VectorGraphics.Controls.Timer.MultimediaTimer.TimeProc">
            <summary>
            Represents the method that is called by Windows when a timer event occurs.
            </summary>
            <param name="id">Timer identifier</param>
            <param name="msg">Message to send</param>
            <param name="user">User parameter</param>
            <param name="param1">Parameter One</param>
            <param name="param2">Parameter Two</param>
        </member>
        <member name="T:VectorGraphics.Controls.Timer.MultimediaTimer.EventRaiser">
            <summary>
            Represents methods that raise events.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> parameter.</param>
        </member>
        <member name="T:VectorGraphics.Controls.WebsiteThumbnailGenerator">
            <summary>
            This class creates thumbnails or screenshots of websites.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.GetWebSiteThumbnail(System.String,System.Int32,System.Int32,System.Drawing.Size)">
            <summary>
            Static method to create a website thumbnail
            </summary>
            <param name="url">The url string of the adress</param>
            <param name="browserWidth">The browser controls initial width</param>
            <param name="browserHeight">The browser controls initial height</param>
            <param name="thumbnailSize">Size of the thumbnail</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> with the web sites thumbnail</returns>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.GetWebSiteScreenshot(System.String,System.Drawing.Size)">
            <summary>
            Static method to create a website screenshot including full height.
            </summary>
            <param name="url">The url string of the adress</param>
            <param name="presentationSize">Size of the presentation screen</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> with the web sites screenshot</returns>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.GetWebSiteScreenshot(System.String,System.Windows.Forms.WebBrowserNavigatingEventArgs,System.Drawing.Size)">
            <summary>
            Static method to create a website screenshot including full height
            including navigation to frames
            </summary>
            <param name="baseUrl">The url string of the base web adress</param>
            <param name="navigatingArgs">The url and target frame to navigate to.</param>
            <param name="presentationSize">Size of the presentation screen</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> with the web sites screenshot</returns>
        </member>
        <member name="T:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage">
            <summary>
            Class that contains images of websites.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.#ctor(System.String,System.Int32,System.Int32,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the WebsiteImage class.
            </summary>
            <param name="url">The url string of the adress</param>
            <param name="browserWidth">The browser controls initial width</param>
            <param name="browserHeight">The browser controls initial height</param>
            <param name="thumbnailSize">Size of the thumbnail</param>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.#ctor(System.String,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the WebsiteImage class.
            </summary>
            <param name="baseUrl">The url string of the base web adress</param>
            <param name="presentationSize">Size of the presentation screen</param>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.#ctor(System.String,System.Windows.Forms.WebBrowserNavigatingEventArgs,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the WebsiteImage class.
            </summary>
            <param name="baseUrl">The url string of the base web adress</param>
            <param name="navigatingArgs">The url string and target frame to navigate to.</param>
            <param name="presentationSize">Size of the presentation screen</param>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.GenerateWebSiteThumbnailImage">
            <summary>
            Starts a thread that creates a websites thumbnail.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> with the websites thumbnail</returns>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.GenerateWebSiteScreenshot">
            <summary>
            Starts a thread that creates a websites thumbnail.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> with the websites thumbnail</returns>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage._GenerateWebSiteThumbnailImage">
            <summary>
            Does the threads job on creating a thumbnail of the website.
            Waiting for the DocumentCompleted event.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage._GenerateWebSiteScreenshot">
            <summary>
            Does the threads job on creating a screenshot of the website.
            Waiting for the DocumentCompleted event.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.WebBrowser_DocumentCompletedThumbnail(System.Object,System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.WebBrowser.DocumentCompleted"/> event handler.
            That takes a screenshot via DrawToBitmap and creates the thumbnail of it.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">A <see cref="T:System.Windows.Forms.WebBrowserDocumentCompletedEventArgs"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.WebBrowser_DocumentCompletedScreenshot(System.Object,System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.WebBrowser.DocumentCompleted"/> event handler.
            That takes a full size screenshot including scroll rectangle
            via DrawToBitmap.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">A <see cref="T:System.Windows.Forms.WebBrowserDocumentCompletedEventArgs"/> with the event data.</param>
        </member>
        <member name="P:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.BaseUrl">
            <summary>
            Gets or sets the URL for the website.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.NavigatingArgs">
            <summary>
            Gets or sets the URL for the website to navigate to.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.WebSiteImage">
            <summary>
            Gets or sets the screenshot or thumbnail of the website
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.ThumbnailSize">
            <summary>
            Gets or sets the thumbnail size.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.BrowserWidth">
            <summary>
            Gets or sets the width of the browser control
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.WebsiteThumbnailGenerator.WebsiteImage.BrowserHeight">
            <summary>
            Gets or sets the height of the browser control
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.CustomTypeConverter.SlideConverter">
            <summary>
            Derived from <see cref="T:System.ComponentModel.ExpandableObjectConverter"/>.
            Provides a type converter to convert <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/> objects
            to strings.
            </summary>
            <remarks>It is implemented to have the <see cref="T:VectorGraphics.Elements.ElementCollections.Slide"/>s name at the right side of the 
            <see cref="T:System.Windows.Forms.PropertyGrid"/> row.</remarks>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.SlideConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>
            </summary>
            <remarks>This value is the description at the right side of the row
            at the property grid.</remarks>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference 
            is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the 
            <strong>value</strong> parameter to.</param>
            <returns>An <strong>Object</strong> that represents the converted value.</returns>
        </member>
        <member name="T:VectorGraphics.Elements.VGRegion">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            A serializable class that is a vector graphics region,
            that can have a bounding line, a fill and a name.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGRegion.inverted">
            <summary>
            Indicates wheter this region should be drawn inverted.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGRegion.region">
            <summary>
            Saves the drawing region of this VGRegion.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">bounding rectangle</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newBounds">bounding rectangle</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRegion class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor">
            <summary>
            Prevents a default instance of the VGRegion class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.#ctor(VectorGraphics.Elements.VGRegion)">
            <summary>
            Initializes a new instance of the VGRegion class.
            Clone Constructor. Creates new region element that is
            identical to the given VGRegion.
            </summary>
            <param name="regionToClone"><see cref="T:VectorGraphics.Elements.VGRegion"/> to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.AddEllipse(System.Drawing.RectangleF)">
            <summary>
            This method adds an ellipse to the region.
            </summary>
            <param name="ellipseBounds">A <see cref="T:System.Drawing.RectangleF"/> with the 
            ellipse bounds.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/>.  
            Draws the ellipse to the given graphics context.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGRegion"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGRegion"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGEllipse"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGEllipse"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRegion.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/> method. 
            Creates a excact copy of given region
            </summary>
            <returns>Excact copy of this region</returns>
        </member>
        <member name="P:VectorGraphics.Elements.VGRegion.Inverted">
            <summary>
            Gets or sets a value indicating whether this ellipse should be drawn
            inverted, that is the fill fills the region outside this ellipse.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGRegion.Region">
            <summary>
            Gets or sets the drawing region represented by a <see cref="P:VectorGraphics.Elements.VGRegion.Region"/> of this VGRegion.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGRegion.Bounds">
            <summary>
            Gets or sets the bounding rectangle for this <see cref="T:VectorGraphics.Elements.VGRegion"/>.
            </summary>
        </member>
        <member name="T:VectorGraphics.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VectorGraphics.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VectorGraphics.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:VectorGraphics.StopConditions.StopConditionCollectionConverter">
            <summary>
            Derived from <see cref="T:System.ComponentModel.ExpandableObjectConverter"/>.
            Provides a type converter to convert <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> objects
            to strings.
            </summary>
            <remarks>It is implemented to have the human readable description
            "Slides stop conditions." for the <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> 
            at the right side of the 
            <see cref="T:System.Windows.Forms.PropertyGrid"/> row.</remarks>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference 
            is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the 
            <strong>value</strong> parameter to.</param>
            <returns>An <strong>Object</strong> that represents the converted value.
            In this implementation that is just a list description.</returns>
        </member>
        <member name="T:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor">
            <summary>
            Derived from <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            This implementation ensures a correct expandable
            property list for the <see cref="T:System.Windows.Forms.PropertyGrid"/> of
            a <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> of <see cref="T:VectorGraphics.StopConditions.StopCondition"/>s.
            </summary>
            <remarks>It is used in the <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/>
            <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> implementation.</remarks>
        </member>
        <member name="F:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.collection">
            <summary>
            Saves the current <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/>
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.index">
            <summary>
            Saves the current index of the collection.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.#ctor(VectorGraphics.StopConditions.StopConditionCollection,System.Int32)">
            <summary>
            Initializes a new instance of the StopConditionCollectionPropertyDescriptor class.
            </summary>
            <param name="collection">The <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/>
            for this <see cref="T:System.ComponentModel.PropertyDescriptor"/></param>
            <param name="index">The index to use.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)"/>.
            Returns whether resetting an object changes its value. 
            This implementation returns always true.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns><strong>True</strong> if resetting the component changes 
            its value; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>.
            Gets the current value of the property on a component. 
            This implementation returns the current <see cref="T:VectorGraphics.StopConditions.StopCondition"/>.
            </summary>
            <param name="component">The component with the property for 
            which to retrieve the value.</param>
            <returns>A <see cref="T:System.Object"/> with a <see cref="T:VectorGraphics.StopConditions.StopCondition"/>
            value of a property for the given component.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>.
            Resets the value for this property of the component to the default value. 
            This implementation returns the current <see cref="T:VectorGraphics.StopConditions.StopCondition"/>.
            </summary>
            <param name="component">The component with the property value that 
            is to be reset to the default value.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>.
            Determines a value indicating whether the value 
            of this property needs to be persisted. 
            This implementation returns true.
            </summary>
            <param name="component">The component with the property to 
            be examined for persistence.</param>
            <returns><strong>True</strong> if resetting the property 
            should be persisted; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>.
            Sets the value of the component to a different value. 
            </summary>
            <param name="component">The component with the property 
            value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.Attributes">
            <summary>
            Gets the collection of attributes for this member.
            Overridden <see cref="P:System.ComponentModel.MemberDescriptor.Attributes"/>.
            This implementation returns an empty <see cref="T:System.ComponentModel.AttributeCollection"/>.
            </summary>
            <value>An <see cref="T:System.ComponentModel.AttributeCollection"/> that provides the 
            attributes for  this member, or an empty collection if there 
            are no attributes in the <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray"/>. </value>
        </member>
        <member name="P:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to. 
            Overridden <see cref="P:System.ComponentModel.PropertyDescriptor.ComponentType"/>.
            This implementation returns a <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> type.
            </summary>
            <value>A <see cref="T:System.Type"/> that represents the type of component this property 
            is bound to. When the GetValue or SetValue methods are invoked, 
            the object specified might be an instance of this type. </value>
        </member>
        <member name="P:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.DisplayName">
            <summary>
            Gets the name that can be displayed in a window, 
            such as a Properties window. 
            Overridden <see cref="P:System.ComponentModel.MemberDescriptor.DisplayName"/>.
            This implementation returns the string representation of the current
            stop condition.
            </summary>
            <value>A <see cref="T:System.String"/> with the name to display for the member. </value>
        </member>
        <member name="P:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.Description">
            <summary>
            Gets the description of the member, as specified in the 
            <see cref="T:System.ComponentModel.DescriptionAttribute"/>. 
            Overridden <see cref="P:System.ComponentModel.MemberDescriptor.Description"/>.
            This implementation returns the string representation of the current
            <see cref="T:VectorGraphics.StopConditions.StopCondition"/>.
            </summary>
            <value>The description of the member. This is the string
            representation of the current
            <see cref="T:VectorGraphics.StopConditions.StopCondition"/></value>
        </member>
        <member name="P:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only.
            Overridden <see cref="P:System.ComponentModel.PropertyDescriptor.IsReadOnly"/>.
            This implementation returns always false, which means,
            this is not read only.
            </summary>
            <value><strong>True</strong> if the property is read-only; 
            otherwise, <strong>false</strong>.</value>
        </member>
        <member name="P:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.Name">
            <summary>
            Gets the name of the member.
            Overridden <see cref="P:System.ComponentModel.MemberDescriptor.Name"/>.
            This implementation returns the number of the current 
            collection member. (e.g "#1").
            </summary>
            <value>A <see cref="T:System.String"/> with the name of the member.</value>
        </member>
        <member name="P:VectorGraphics.StopConditions.StopConditionCollectionPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            Overridden <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/>.
            This implementation returns the type of
            <see cref="T:VectorGraphics.StopConditions.StopCondition"/>.
            </summary>
            <value>A <see cref="T:System.Type"/> that represents the type of the property. </value>
        </member>
        <member name="T:VectorGraphics.StopConditions.StopConditionConverter">
            <summary>
            Derived from <see cref="T:System.ComponentModel.ExpandableObjectConverter"/>.
            Provides a type converter to convert expandable objects 
            to and from the <see cref="T:VectorGraphics.StopConditions.StopCondition"/> object.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>
            Returns whether this converter can convert an object 
            of string to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents 
            the type you want to convert from.</param>
            <returns><strong>True</strong> if this converter can 
            perform the conversion; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>
            Returns whether this converter can convert 
            the object to the specified type <see cref="T:VectorGraphics.StopConditions.StopCondition"/>. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents 
            the type you want to convert to.</param>
            <returns><strong>True</strong> if this converter can 
            perform the conversion; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/>
            Converts the given value to the type of this converter.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <strong>Object</strong> that represents the converted value.
            In this implementation that can be any <see cref="T:VectorGraphics.StopConditions.StopCondition"/></returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference 
            is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the 
            <strong>value</strong> parameter to.</param>
            <returns>An <strong>Object</strong> that represents the converted value.
            In this implementation that is a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:VectorGraphics.Elements.VGFlash">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            A serializable class that is a vector graphics text,
            drawn with a specific font and font color.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGFlash.currentTransform">
            <summary>
            A <see cref="T:System.Drawing.Drawing2D.Matrix"/> with the current graphics transformation.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGFlash.flashControl">
            <summary>
            The <see cref="T:VectorGraphics.Controls.Flash.AxFlashControl"/> that is the ActiveX object that is
            represented by this <see cref="T:VectorGraphics.Elements.VGFlash"/>
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGFlash.messageFilter">
            <summary>
            A <see cref="T:VectorGraphics.Controls.Flash.FlashMessageFilter"/> that is inserted in the 
            message loop when the control is presented.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGFlash.messageFilterForMouseLeaveEvents">
            <summary>
            A <see cref="T:VectorGraphics.Controls.Flash.FlashMouseLeaveMessageFilter"/> that is inserted in the 
            message loop when the control is presented.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGFlash.disposing">
            <summary>
            Indicates running disposal of this element.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.String,System.String,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.PointF,System.Drawing.SizeF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGFlash class.
            </summary>
            <param name="newShapeDrawAction"><see cref="T:VectorGraphics.Elements.ShapeDrawAction"/> for the bounds.</param>
            <param name="newFilename">Filename of the flash movie without path</param>
            <param name="newPath">Path to the flash movie.</param>
            <param name="newPen">Pen to use</param>
            <param name="newBrush">Brush for drawing</param>
            <param name="newFont">Font for drawing name</param>
            <param name="newFontColor">Font color for drawing name.</param>
            <param name="position">TopLeft text position</param>
            <param name="size">Size of the clipping rectangle.</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.#ctor(VectorGraphics.Elements.VGFlash)">
            <summary>
            Initializes a new instance of the VGFlash class.
            Clone Constructor. Creates new text that is
            identical to the given <see cref="T:VectorGraphics.Elements.VGText"/>.
            </summary>
            <param name="oldFlash">Text element to clone.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.#ctor">
            <summary>
            Prevents a default instance of the VGFlash class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.Finalize">
            <summary>
            Finalizes an instance of the VGFlash class.
            Removes <see cref="T:VectorGraphics.Controls.Flash.FlashMessageFilter"/> from message stack.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.GetTransformedBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.RectangleF)">
            <summary>
            This method returns the given rectangle transformed by the given
            <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
            </summary>
            <param name="transform">The <see cref="T:System.Drawing.Drawing2D.Matrix"/> that defines the transformation.</param>
            <param name="activeXBounds">A <see cref="T:System.Drawing.RectangleF"/> with the untransformed bounds
            of the flash object.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> with the transformed rectangle.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.InitializeOnControl(System.Windows.Forms.Control,System.Boolean,System.Drawing.Drawing2D.Matrix)">
            <summary>
            This method loads the movie, adds the flashobject to the controls
            controls list and puts a message filter into the Application
            message stack to push all messages sent to the flash object 
            also to the owning parent.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> this flash object
            should be hosted on.</param>
            <param name="recreateFlash"><strong>True</strong>,
            if this function is called from separate thread to avoid error.</param>
            <param name="graphicsTransform">A <see cref="T:System.Drawing.Drawing2D.Matrix"/> with the
            transform of the canvas to display this activeX object.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.SendMessagesToParent(System.Boolean)">
            <summary>
            This message adds or removes a <see cref="T:VectorGraphics.Controls.Flash.FlashMessageFilter"/>
            to or from the applications message pump to ensure the duplication
            of events captured by the activeX are notified also by the parent form.
            </summary>
            <param name="sendFlashMessagesToParent"><strong>True</strong>,
            if message filter should be added, <strong>false</strong>,
            if it should be removed.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.Stop">
            <summary>
            Stops the running movie
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.Play">
            <summary>
            Start playing the animation
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.ResetMovie">
            <summary>
            Resets the flash movie by loading an empty movie and reloading the
            correct one. Rewinding does not work.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/>.  
            Draws text with the owning brush and font onto given 
            graphics context.
            </summary>
            <param name="graphics">Graphics context to draw on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.Reset">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Reset"/>. 
            Resets the current text element to
            default values (empty instruction).
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGText"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGText"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGText"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGText"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.Dispose">
            <summary>
            Releases the resources used by the element.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/>.  
            Creates an excact copy of given <see cref="T:VectorGraphics.Elements.VGRichText"/>.
            </summary>
            <returns>Excact copy of this text element.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.NewPosition(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.NewPosition(System.Drawing.Drawing2D.Matrix)"/>.
            Updates the bounds of the underlying <see cref="T:VectorGraphics.Controls.Flash.AxFlashControl"/>
            when bounds are changing to have correct sized drawing during
            call to <see cref="M:VectorGraphics.Elements.VGFlash.DrawFlashObject(System.Drawing.Graphics,System.Drawing.RectangleF)"/> 
            </summary>
            <param name="translationMatrix">The <see cref="T:System.Drawing.Drawing2D.Matrix"/> with the new transformation.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.GetControlHandle(System.Windows.Forms.Control)">
            <summary>
            Returns the given controls handle.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to receive the handle for.</param>
            <returns>An <see cref="T:System.IntPtr"/> with the controls handle.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.DrawFlashObject(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            This method is the kernel of this class and draws the flash activeX
            com object surface in the current state to the given <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <remarks>Note that the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IViewObject"/> is the key to
            provide us with a method to draw a com object on a graphics, without beeing visible itself.</remarks>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to draw to.</param>
            <param name="elementBounds">The <see cref="T:System.Drawing.RectangleF"/> to draw into.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.IntializeFields">
            <summary>
            This method initializes member of this class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.LoadMovie">
            <summary>
            This method loads the movie with the file name define 
            in the member fields into the flashControl if the file exists.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGFlash.RemoveMessageFilter">
            <summary>
            This method removes the current <see cref="T:VectorGraphics.Controls.Flash.FlashMessageFilter"/> 
            from the message loop.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGFlash.HandleToSurface">
            <summary>
            Gets the <see cref="T:System.IntPtr"/> that contains the handle of the <see cref="T:VectorGraphics.Controls.Flash.AxFlashControl"/>
            window surface, that is used to draw the activeX object.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGFlash.Filename">
            <summary>
            Gets or sets the filename for the flash movie.
            </summary>
            <value>A <see cref="T:System.String"/> with the filename for the flash movie.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGFlash.Filepath">
            <summary>
            Gets or sets the filenames path for this flash movie.
            </summary>
            <value>A <see cref="T:System.String"/> with the flash movies path.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGFlash.FullFilename">
            <summary>
            Gets the audio filename with path.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGFlash.Bounds">
            <summary>
            Gets or sets the bounding rectangle of this
            <see cref="T:VectorGraphics.Elements.VGFlash"/>. When setting, the underlying flashcontrol is resized.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGFlash.HandleInvoker">
            <summary>
            The delegate for the thread-safe call to GetControlHandle
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to receive the handle for.</param>
            <returns>An <see cref="T:System.IntPtr"/> with the controls handle.</returns>
        </member>
        <member name="T:VectorGraphics.Elements.VGFlash.AddDelegate">
            <summary>
            The delegate for the thread-safe call to Control.Controls.Add(Control)
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to be added to the controls container.</param>
        </member>
        <member name="T:VectorGraphics.Elements.VGFlash.RemoveDelegate">
            <summary>
            The delegate for the thread-safe call to Control.Controls.Remove(Control)
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to be removed from the controls container.</param>
        </member>
        <member name="T:VectorGraphics.Elements.VGFlash.SetBoundsDelegate">
            <summary>
            The delegate for the thread-safe call to Control.SetBounds(...)
            </summary>
            <param name="x">The new Left property value of the control. </param>
            <param name="y">The new Top property value of the control.</param>
            <param name="width">The new Width property value of the control.</param>
            <param name="height">The new Height property value of the control.</param>
        </member>
        <member name="T:VectorGraphics.Elements.VGSound">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. Creates new sound element that
            is only visible in edit mode but is clickable.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGSound.designMode">
            <summary>
            Indicates whether this object is in design mode.
            If it is a sound player image will be shown at the center of the bounds.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGSound.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the VGSound class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">Bounds of element</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSound.#ctor">
            <summary>
            Prevents a default instance of the VGSound class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGSound.#ctor(VectorGraphics.Elements.VGSound)">
            <summary>
            Initializes a new instance of the VGSound class.
            Clone Constructor. Creates new sound that is
            identical to the given <see cref="T:VectorGraphics.Elements.VGSound"/>
            </summary>
            <param name="sound">AudioFile to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSound.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/> method. 
            If in <see cref="P:VectorGraphics.Elements.VGSound.DesignMode"/>, draws a sound bitmap at the top
            left-corner of the bounds.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGSound.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGSound"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGSound"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGSound.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGSound"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGSound"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGSound.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/> method. 
            Creates a excact copy of given sound
            </summary>
            <returns>Excact copy of this rectangle</returns>
        </member>
        <member name="P:VectorGraphics.Elements.VGSound.DesignMode">
            <summary>
            Gets or sets a value indicating whether this object is in design mode.
            If it is a sound player image will be shown at the center of the bounds.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGSharp">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. Creates new vector graphics sharp.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the VGSharp class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the VGSharp class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">bounding rectangle</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGSharp class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGSharp class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGSharp class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGSharp class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the VGSharp class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newBounds">bounding rectangle</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGSharp class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.#ctor">
            <summary>
            Prevents a default instance of the VGSharp class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.#ctor(VectorGraphics.Elements.VGSharp)">
            <summary>
            Initializes a new instance of the VGSharp class.
            Clone Constructor. Creates new sharp that is
            identical to the given <see cref="T:VectorGraphics.Elements.VGSharp"/>
            </summary>
            <param name="sharp">Sharp to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/> method. 
            Draws the sharp to the given graphics context.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGSharp"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGSharp"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGSharp"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGSharp"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGSharp.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/> method. 
            Creates a excact copy of given sharp
            </summary>
            <returns>Excact copy of this sharp</returns>
        </member>
        <member name="T:VectorGraphics.Elements.VGRichText">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            A xml serializable class that represents a rich text formatted (RTF) string.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGRichText.TEXTPADDING">
            <summary>
            To this amount of pixels, the rtf text will have a padding
            to the bounds of this element.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGRichText.richTextBox">
            <summary>
            This is the underlying <see cref="T:System.Windows.Forms.RichTextBox"/> to
            handle the drawing and RTF formatting.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGRichText.textLength">
            <summary>
            Saves the <see cref="P:System.Windows.Forms.RichTextBox.TextLength"/> property.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGRichText.handleToRichTextBox">
            <summary>
            Saves the <see cref="P:System.Windows.Forms.Control.Handle"/> property.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.String,System.Boolean,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.PointF,System.Drawing.SizeF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRichText class.
            </summary>
            <param name="newShapeDrawAction"><see cref="P:VectorGraphics.Elements.VGRichText.ShapeDrawAction"/> for the bounds.</param>
            <param name="newRtf">string to display</param>
            <param name="newTransparency">A flag indicating a transparent background if true.</param>
            <param name="newPen">Pen to use</param>
            <param name="newBrush">Brush for drawing</param>
            <param name="newFont">Font for drawing name</param>
            <param name="newFontColor">Font color for drawing name.</param>
            <param name="position">TopLeft text position</param>
            <param name="size">Size of the clipping rectangle.</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.#ctor">
            <summary>
            Prevents a default instance of the VGRichText class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.#ctor(VectorGraphics.Elements.VGRichText)">
            <summary>
            Initializes a new instance of the VGRichText class.
            Clone Constructor. Creates new text that is
            identical to the given <see cref="T:VectorGraphics.Elements.VGText"/>.
            </summary>
            <param name="oldText">Text element to clone.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/>.  
            Draws text with the owning brush and font onto given 
            graphics context.
            </summary>
            <param name="graphics">Graphics context to draw on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.Reset">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Reset"/>. 
            Resets the current text element to
            default values (empty instruction).
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGText"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGText"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGText"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGText"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/>.  
            Creates an excact copy of given <see cref="T:VectorGraphics.Elements.VGRichText"/>.
            </summary>
            <returns>Excact copy of this text element.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.AddGrabHandles">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.AddGrabHandles"/>. 
            Adds a middle right, bottom middle and bottom right 
            grab handle to the current text.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.ThreadSafeSetRTF(System.String)">
            <summary>
            Thread safe version to set the <see cref="P:System.Windows.Forms.RichTextBox.Rtf"/> property
            </summary>
            <param name="rtfToDraw">The <see cref="T:System.String"/> with the rtf string to
            be set to the RichTextBox.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.ThreadSafeGetRTF">
            <summary>
            Thread safe version to get the <see cref="P:System.Windows.Forms.RichTextBox.Rtf"/> property
            </summary>
            <returns>The <see cref="T:System.String"/> with the rtf string to
            be set to the RichTextBox.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.ThreadSafeSetText(System.String)">
            <summary>
            Thread safe version to set the <see cref="P:System.Windows.Forms.RichTextBox.Text"/> property
            </summary>
            <param name="txtToDraw">The <see cref="T:System.String"/> with the string to
            be set to the RichTextBox.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.ThreadSafeGetText">
            <summary>
            Thread safe version to get the <see cref="P:System.Windows.Forms.RichTextBox.Text"/> property
            </summary>
            <returns>The <see cref="T:System.String"/> with the string to
            be set to the RichTextBox.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.FillBackground(System.Drawing.Brush)">
            <summary>
            Fills the background of the RichTextBox with the given brush.
            </summary>
            <param name="brush">A <see cref="T:System.Drawing.Brush"/> to use for the fill.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.DPToHIMETRIC(System.Drawing.Graphics,System.Drawing.SizeF@)">
            <summary>
            This method converts dots per inch into HIMETRIC values
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> with the dots per inch values.</param>
            <param name="size">Ref. A <see cref="T:System.Drawing.SizeF"/> with the new HIMETRIC values.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.FormatRange(System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Size,System.Boolean,System.Drawing.Graphics)">
            <summary>
            Formats a range of text in a rich edit control for a specific device.
            This implementation draws the contents of the <see cref="T:System.Windows.Forms.RichTextBox"/>
            to the given <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="charFrom">Character position index immediately preceding the first character in the range.</param>
            <param name="charTo">Character position immediately following the last character in the range.</param>
            <param name="position">A <see cref="T:System.Drawing.Point"/> with the location of the top left 
            corner of the rectangle to draw the text portion to.</param>
            <param name="size">A <see cref="T:System.Drawing.Size"/> with the width and height of the 
            rectangle to draw the text portion to.</param>
            <param name="measure"><strong>False</strong> if the text should be rendered,
            if <strong>true</strong>, the text is just measured.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to draw to</param>
            <returns>The index of the last character that fits in the region plus one.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRichText.RebuildUnderlyingRichTextBox">
            <summary>
            This method switches the mode of the underlying RichTextBox
            that is used for rendering according to the
            <see cref="P:VectorGraphics.Elements.VGRichText.ShapeDrawAction"/> of this element.
            When no fill ist set, the RichTextBox is transparent and
            only in this case use the CreateParams.Transparent styled
            RichTextBox, because this one renders crispy for
            unknown reason.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGRichText.StringToDraw">
            <summary>
            Gets or sets the string of this element.
            </summary>
            <value>A <see cref="T:System.String"/> with the instruction.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGRichText.RtfToDraw">
            <summary>
            Gets or sets the rtf formatted string of this element.
            </summary>
            <value>A <see cref="T:System.String"/> with the instruction in rtf format.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGRichText.ShapeDrawAction">
            <summary>
            Gets or sets shape drawing mode enumeration, edge, fill or both.
            When this property is set this overload reinitializes the underlying
            RichTextBox.
            </summary>
            <value>The <see cref="P:VectorGraphics.Elements.VGRichText.ShapeDrawAction"/> of this shape.</value>
        </member>
        <member name="T:VectorGraphics.Elements.VGRichText.GetStringInvoker">
            <summary>
            This delegate enables asynchronous calls for getting
            a string property on a RichTextBox control.
            </summary>
            <returns>An <see cref="T:System.String"/> for the Text or RTF property
            of the <see cref="T:System.Windows.Forms.RichTextBox"/>.</returns>
        </member>
        <member name="T:VectorGraphics.Elements.VGRichText.SetStringInvoker">
            <summary>
            This delegate enables asynchronous calls for setting
            a string property on a RichTextBox control.
            </summary>
            <param name="rtfToDraw">A <see cref="T:System.String"/> for the Text or RTF property
            of the <see cref="T:System.Windows.Forms.RichTextBox"/>.</param>
        </member>
        <member name="T:VectorGraphics.StopConditions.KeyStopCondition">
            <summary>
            Derived from <see cref="T:VectorGraphics.StopConditions.StopCondition"/>.
            This class stores a <see cref="P:VectorGraphics.StopConditions.KeyStopCondition.StopKey"/>.
            When this is pressed the display of the slide should be ended.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.KeyStopCondition.DEFAULTKEY">
            <summary>
            A <see cref="T:System.Windows.Forms.Keys"/> with the default value for
            the <see cref="P:VectorGraphics.StopConditions.KeyStopCondition.StopKey"/> property.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.KeyStopCondition.stopKey">
            <summary>
            The <see cref="T:System.Windows.Forms.Keys"/> to listen for.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.KeyStopCondition.#ctor">
            <summary>
            Initializes a new instance of the KeyStopCondition class.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.KeyStopCondition.#ctor(VectorGraphics.StopConditions.KeyStopCondition)">
            <summary>
            Initializes a new instance of the KeyStopCondition class.
            Clone Constructor.
            </summary>
            <param name="cloneCondition">The <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/>
            to be cloned.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.KeyStopCondition.#ctor(System.Windows.Forms.Keys,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the KeyStopCondition class.
            </summary>
            <param name="key">A <see cref="T:System.Windows.Forms.Keys"/> with the key 
            which should end the slide display.</param>
            <param name="anyKey"><strong>True</strong>, if any key can
            end the slide display, otherwise <strong>false</strong>.</param>
            <param name="newLinkTrialID">A nullable <see cref="T:System.Int32"/> with an optional trial ID
            to which this condition should link on click.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.KeyStopCondition.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns a <see cref="T:System.String"/> that represents 
            the current <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/>. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents 
            the current <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/></returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.KeyStopCondition.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current 
            <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/>.</param>
            <returns><strong>True</strong> if the specified Object is equal 
            to the current <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/>; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.KeyStopCondition.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            <strong>GetHashCode</strong> is suitable for use in hashing algorithms 
            and data structures like a hash table. 
            It needs to be overridden when <see cref="M:System.Object.Equals(System.Object)"/>
            is overriden.
            </summary>
            <returns>A hash code for the current <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/>. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.KeyStopCondition.ResetValue">
            <summary>
            Reset the current key stop condition to
            default values.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.KeyStopCondition.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.StopConditions.StopCondition.Clone"/> method.
            Returns a <see cref="T:VectorGraphics.StopConditions.StopCondition"/> that is
            an exact copy of this <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/>. 
            </summary>
            <returns>A <see cref="T:VectorGraphics.StopConditions.StopCondition"/> that is
            an exact copy of this <see cref="T:VectorGraphics.StopConditions.KeyStopCondition"/>. </returns>
        </member>
        <member name="P:VectorGraphics.StopConditions.KeyStopCondition.StopKey">
            <summary>
            Gets or sets the key that should be pressed for stopping the slide display.
            </summary>
            <value> The <see cref="T:System.Windows.Forms.Keys"/> to listen for.</value>
        </member>
        <member name="T:VectorGraphics.StopConditions.MouseStopCondition">
            <summary>
            Derived from <see cref="T:VectorGraphics.StopConditions.StopCondition"/>.
            This class stores a <see cref="P:VectorGraphics.StopConditions.MouseStopCondition.StopMouseButton"/>.
            When this is pressed the display of the slide should be ended.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.MouseStopCondition.DEFAULTBUTTON">
            <summary>
            A <see cref="T:System.Windows.Forms.MouseButtons"/> with the default value for
            the <see cref="P:VectorGraphics.StopConditions.MouseStopCondition.StopMouseButton"/> property.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.MouseStopCondition.stopButton">
            <summary>
            Saves the <see cref="T:System.Windows.Forms.MouseButtons"/> to listen for.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.MouseStopCondition.clickLocation">
            <summary>
            Saves the click location of the mouse button.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.MouseStopCondition.target">
            <summary>
            Saves the name of the target shape that has to be clicked
            to be valid.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.MouseStopCondition.#ctor">
            <summary>
            Initializes a new instance of the MouseStopCondition class.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.MouseStopCondition.#ctor(VectorGraphics.StopConditions.MouseStopCondition)">
            <summary>
            Initializes a new instance of the MouseStopCondition class.
            Clone Constructor.
            </summary>
            <param name="cloneCondition">The <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/>
            to be cloned.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.MouseStopCondition.#ctor(System.Windows.Forms.MouseButtons,System.Boolean,System.String,System.Nullable{System.Int32},System.Drawing.Point)">
            <summary>
            Initializes a new instance of the MouseStopCondition class.
            </summary>
            <param name="newButton">A <see cref="T:System.Windows.Forms.MouseButtons"/> with the button
            that should end the slide display.</param>
            <param name="anyMouseButton"><strong>True</strong>, if any mouse button can
            end the slide display, otherwise <strong>false</strong>.</param>
            <param name="newTarget">A <see cref="T:System.String"/> with an optional target shape name
            that has to be clicked.</param>
            <param name="newLinkTrialID">A nullable <see cref="T:System.Int32"/> with an optional trial ID
            to which this condition should link on click.</param>
            <param name="newClickLocation">The <see cref="T:System.Drawing.Point"/> of the mouse click location
            in screen coordinates.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.MouseStopCondition.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/>. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/></returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.MouseStopCondition.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current 
            <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/>.</param>
            <returns><strong>True</strong> if the specified Object is equal 
            to the current <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/>; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.MouseStopCondition.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            <strong>GetHashCode</strong> is suitable for use in hashing algorithms 
            and data structures like a hash table. 
            It needs to be overridden when <see cref="M:System.Object.Equals(System.Object)"/>
            is overriden.
            </summary>
            <returns>A hash code for the current <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/>. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.MouseStopCondition.ResetValue">
            <summary>
            Reset the current mouse stop condition to
            default values
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.MouseStopCondition.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.StopConditions.StopCondition.Clone"/> method.
            Returns a <see cref="T:VectorGraphics.StopConditions.StopCondition"/> that is
            an exact copy of this <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/>. 
            </summary>
            <returns>A <see cref="T:VectorGraphics.StopConditions.StopCondition"/> that is
            an exact copy of this <see cref="T:VectorGraphics.StopConditions.MouseStopCondition"/>. </returns>
        </member>
        <member name="P:VectorGraphics.StopConditions.MouseStopCondition.StopMouseButton">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.MouseButtons"/> that ends the slide display.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.MouseButtons"/> that ends the slide display.</value>
        </member>
        <member name="P:VectorGraphics.StopConditions.MouseStopCondition.ClickLocation">
            <summary>
            Gets or sets the click location of the mouse button.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> with the location of the mouse click in screen coordinates.</value>
        </member>
        <member name="P:VectorGraphics.StopConditions.MouseStopCondition.Target">
            <summary>
            Gets or sets the name of the target shape that has to be clicked
            to be valid.
            </summary>
            <value>A <see cref="T:System.String"/> with the name of an optional target shape.</value>
        </member>
        <member name="T:VectorGraphics.StopConditions.StopConditionCollection">
            <summary>
            Derived from <see cref="T:System.Collections.CollectionBase"/>, implements 
            <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> to provide custom type information.
            Inheriting from CollectionBase provides basic collection behavior. 
            Only, methods for adding, removing and querying items are be added. 
            </summary>
            <remarks>
            This is from http://www.codeproject.com/KB/tabs/customizingcollectiondata.aspx
            Customized display of collection data in a PropertyGrid By Gerd Klevesaat
            <para></para>
            Though the interface has a lot of methods, 
            most of the methods are trivial to implement because we 
            can delegate the call to a corresponding method of the static 
            TypeDescriptor object to provide standard behavior.
            The only methods we implement in a custom way are the 
            overloaded GetProperties()-methods. These are used to 
            return a collection of PropertyDescriptor objects used to 
            describe the properties, in a custom way. This property descriptor 
            objects will be used by the PropertyGrid later.</remarks>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this 
            <see cref="T:VectorGraphics.StopConditions.StopConditionCollection"/>.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.Add(VectorGraphics.StopConditions.StopCondition)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="stc">The <see cref="T:VectorGraphics.StopConditions.StopCondition"/> to be 
            added to the end of the collection.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.Contains(VectorGraphics.StopConditions.StopCondition)">
            <summary>
            Determines whether the collection contains a specific element.
            </summary>
            <param name="stc">The Object to locate in the collection.</param>
            <returns><strong>True</strong> if the collection
            contains the specified value; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.Remove(VectorGraphics.StopConditions.StopCondition)">
            <summary>
            Removes the first occurrence of a specific
            <see cref="T:VectorGraphics.StopConditions.StopCondition"/> from the collection. 
            </summary>
            <param name="stc">The <see cref="T:VectorGraphics.StopConditions.StopCondition"/>
            to remove from the collection.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>The class name of the object, or a null 
            reference if the class does not have a name.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetAttributes">
            <summary>
            Returns a collection of custom attributes 
            for this instance of a component. 
            </summary>
            <returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> containing 
            the attributes for this object. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetComponentName">
            <summary>
            Returns the name of this instance of a component. 
            </summary>
            <returns>The name of the object, or a null reference 
            if the object does not have a name.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetConverter">
            <summary>
            Returns a type converter for this instance of a component. 
            </summary>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter 
            for this object, or a null reference 
            if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component. 
            </summary>
            <returns>An EventDescriptor that represents the default 
            event for this object, or a null reference 
            if this object does not have events. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component. 
            </summary>
            <returns>A PropertyDescriptor that represents the 
            default property for this object, or a null reference 
            if this object does not have properties.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component. 
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the 
            editor for this object.</param>
            <returns>An Object of the specified type that is the editor for this 
            object, or a null reference
            if the editor cannot be found.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component
            using the specified attribute array as a filter. 
            </summary>
            <param name="attributes">An array of type 
            <see cref="T:System.Attribute"/> that is used as a filter. </param>
            <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the 
            filtered events for this component instance. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetEvents">
            <summary>
            Returns the events for this instance of a component. 
            </summary>
            <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the 
            events for this component instance. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property 
            described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents 
            the property whose owner is to be found.</param>
            <returns>An Object that represents the owner of the specified property.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetProperties(System.Attribute[])">
            <summary>
            Called to get the properties of this type. Returns properties with certain
            attributes. This restriction is not implemented here.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> 
            that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the 
            filtered properties for this component instance. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GetProperties">
            <summary>
            Called to get the properties of this type.
            </summary>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that 
            represents the properties for this component instance.</returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.StopConditionCollection.GenerateStopConditionString">
            <summary>
            Reads the StopConditionCollection and converts them into a stop condition string.
            </summary>
            <returns>A <see cref="T:System.String"/> with the stop condition.</returns>
        </member>
        <member name="P:VectorGraphics.StopConditions.StopConditionCollection.Item(System.Int32)">
            <summary>
            Gets or sets <see cref="T:VectorGraphics.StopConditions.StopCondition"/> at the
            given index.
            </summary>
            <param name="index">An <see cref="T:System.Int32"/> with the elements index.</param>
            <returns>A <see cref="T:VectorGraphics.StopConditions.StopCondition"/> at the given Index.</returns>
        </member>
        <member name="T:VectorGraphics.StopConditions.TimeStopCondition">
            <summary>
            Derived from <see cref="T:VectorGraphics.StopConditions.StopCondition"/>.
            This class stores a <see cref="P:VectorGraphics.StopConditions.TimeStopCondition.Duration"/> after 
            which the display of the slide is ended.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.TimeStopCondition.DEFAULTDURATION">
            <summary>
            The default value for the duration in milliseconds.
            </summary>
        </member>
        <member name="F:VectorGraphics.StopConditions.TimeStopCondition.duration">
            <summary>
            Saves the slide duration value in milliseconds.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.TimeStopCondition.#ctor">
            <summary>
            Initializes a new instance of the TimeStopCondition class.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.TimeStopCondition.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the TimeStopCondition class.
            </summary>
            <param name="newDuration">An <see cref="T:System.Int32"/> with the 
            length of the trial display time in milliseconds.</param>
        </member>
        <member name="M:VectorGraphics.StopConditions.TimeStopCondition.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/>. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/></returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.TimeStopCondition.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current 
            <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/>.</param>
            <returns><strong>True</strong> if the specified Object is equal 
            to the current <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/>; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.TimeStopCondition.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            <strong>GetHashCode</strong> is suitable for use in hashing algorithms 
            and data structures like a hash table. 
            It needs to be overridden when <see cref="M:System.Object.Equals(System.Object)"/>
            is overriden.
            </summary>
            <returns>An <see cref="T:System.Int32"/> with the
            hash code for the current <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/>. </returns>
        </member>
        <member name="M:VectorGraphics.StopConditions.TimeStopCondition.ResetValue">
            <summary>
            Reset the current time stop condition to
            default duration value.
            </summary>
        </member>
        <member name="M:VectorGraphics.StopConditions.TimeStopCondition.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.StopConditions.StopCondition.Clone"/> method.
            Returns a <see cref="T:VectorGraphics.StopConditions.StopCondition"/> that is
            an exact copy of this <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/>. 
            </summary>
            <returns>A <see cref="T:VectorGraphics.StopConditions.StopCondition"/> that is
            an exact copy of this <see cref="T:VectorGraphics.StopConditions.TimeStopCondition"/>. </returns>
        </member>
        <member name="P:VectorGraphics.StopConditions.TimeStopCondition.Duration">
            <summary>
            Gets or sets the length of the trial display time in milliseconds.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the trial display time.</value>
        </member>
        <member name="T:VectorGraphics.Tools.AudioFile">
            <summary>
            This class is a wrapper for an audio file with replay properties.
            Implements <see cref="T:System.ICloneable"/>
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.AudioFile.#ctor">
            <summary>
            Initializes a new instance of the AudioFile class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.AudioFile.#ctor(VectorGraphics.Tools.AudioFile)">
            <summary>
            Initializes a new instance of the AudioFile class.
            Clone Constructor. Creates new <see cref="T:VectorGraphics.Tools.AudioFile"/> that is
            identical to the given <see cref="T:VectorGraphics.Tools.AudioFile"/>.
            </summary>
            <param name="audioFileToClone">The <see cref="T:VectorGraphics.Tools.AudioFile"/> to clone.</param>
        </member>
        <member name="M:VectorGraphics.Tools.AudioFile.Clone">
            <summary>
            Creates an exact copy of given audio file.
            </summary>
            <returns>Exact copy of this audio file.</returns>
        </member>
        <member name="P:VectorGraphics.Tools.AudioFile.Filename">
            <summary>
            Gets or sets the filename without path to the audio file.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.AudioFile.Filepath">
            <summary>
            Gets or sets the path to the audio file.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.AudioFile.FullFilename">
            <summary>
            Gets the audio filename with path.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.AudioFile.ShouldPlay">
            <summary>
            Gets or sets a value indicating whether this file should be played or not.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.AudioFile.Loop">
            <summary>
            Gets or sets a value indicating whether this audio files should be looped during replay.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.AudioFile.ShowOnClick">
            <summary>
            Gets or sets a value indicating whether the file should only 
            be played when the object it belongs to
            is clicked, otherwise the file will be played immediately.
            </summary>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlash">
            <summary>
            Derives from <see cref="T:System.Windows.Forms.AxHost"/>.
            This class is auto generated with the tool aximp.exe from the flash10a.ocx.
            Adobe does not document the Com object very well, so docu is omitted
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.AxFlash.ocx">
            <summary>
            The <see cref="T:ShockwaveFlashObjects.IShockwaveFlash"/> ocx object.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.AxFlash.eventMulticaster">
            <summary>
            The <see cref="T:VectorGraphics.Controls.Flash.AxFlashEventMulticaster"/> event multicaster.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.AxFlash.cookie">
            <summary>
            The <see cref="T:System.Windows.Forms.AxHost.ConnectionPointCookie"/> cookie.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.#ctor">
            <summary>
            Initializes a new instance of the AxFlash class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TCallLabel(System.String,System.String)">
            <summary>
            In the Timeline indicated by target, executes the action in the 
            frame specified by the label frame label. The argument 
            type for both arguments is string.
            </summary>
            <example>This example runs the actions in the frame labeled HandleScriptNotify in the main timeline:
            movie.TCallLabel("/", "HandleScriptNotify");</example>
            <param name="target">A <see cref="T:System.String"/> with the target.</param>
            <param name="label">A <see cref="T:System.String"/> with the label of the target.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TSetPropertyNum(System.String,System.Int32,System.Double)">
            <summary>
            For the timeline indicated by target, sets the value of the property 
            specified by property to the value specified by value, which can be a 
            number. For property, enter the integer corresponding to the desired 
            property.
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
            <param name="property">The <see cref="T:System.Int32"/> with the number of the property.</param>
            <param name="value">The <see cref="T:System.Double"/> with the value to set.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TGetPropertyNum(System.String,System.Int32)">
            <summary>
            For the timeline indicated by target, returns a number indicating 
            the value of the property specified by property. For property,
            enter the integer corresponding to the desired property. 
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
            <param name="property">The <see cref="T:System.Int32"/> with the number of the property.</param>
            <returns>The <see cref="T:System.Double"/> with the value to retrieve.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TGetPropertyAsNumber(System.String,System.Int32)">
            <summary>
            For the timeline indicated by target, returns a number indicating 
            the value of the property specified by property. For property,
            enter the integer corresponding to the desired property. 
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
            <param name="property">The <see cref="T:System.Int32"/> with the number of the property.</param>
            <returns>The <see cref="T:System.Double"/> with the value to retrieve.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.EnforceLocalSecurity">
            <summary>
            Does what the name says.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.CallFunction(System.String)">
            <summary>
            Calls the callback function with the given xml formatted request.
            </summary>
            <param name="request">An xml formatted <see cref="T:System.String"/></param>
            <returns>The return value of the function if there is any.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.SetReturnValue(System.String)">
            <summary>
            Return a value to ActionScript; 
            the returned value must be encoded as an XML-formatted string. 
            </summary>
            <param name="returnValue">An xml formatted <see cref="T:System.String"/></param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.DisableLocalSecurity">
            <summary>
            Does what the name says.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.SetZoomRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Zoom in on a rectangular area of the movie. 
            Note that the units of the coordinates are in twips (1440 units per inch). 
            To calculate a rectangle in Flash, set the ruler units to Points and 
            multiply the coordinates by 20 to get TWIPS.
            </summary>
            <param name="left">X- Value of the top left corner.</param>
            <param name="top">Y- Value of the top left corner.</param>
            <param name="right">X- Value of the bottom right corner.</param>
            <param name="bottom">Y- Value of the bottom right corner.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.Zoom(System.Int32)">
            <summary>
            Zoom the view by a relative scale factor. 
            Zoom(50) will double the size of the objects in the view. 
            Zoom(200) will reduce the size of objects in the view by one half.
            </summary>
            <param name="factor">Indicates the zoom factor (in percent)</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.Pan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Pan a zoomed in movie. The mode can be: 0 = pixels, 1 = % of window.
            </summary>
            <param name="x">x-zoom factor</param>
            <param name="y">y-zoom factor</param>
            <param name="mode">0 = pixels, 1 = % of window.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.Play">
            <summary>
            Start playing the animation.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.Stop">
            <summary>
            Stop playing the animation.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.Back">
            <summary>
            Go to the previous frame.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.Forward">
            <summary>
            Go to the next frame.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.Rewind">
            <summary>
            Go to the first frame.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.StopPlay">
            <summary>
            Stops playing.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.GotoFrame(System.Int32)">
            <summary>
            Goto frame with the given number
            </summary>
            <param name="frameNum">An <see cref="T:System.Int32"/> with the frame to jump to.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.CurrentFrame">
            <summary>
            Gets the current frame of the flash movie.
            </summary>
            <returns>An <see cref="T:System.Int32"/> with the current frame.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.IsPlaying">
            <summary>
            Gets a value indicating whether the flash movie is playing.
            </summary>
            <returns><strong>True</strong>, if the flash movie is playing, otherwise <strong>false</strong></returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.PercentLoaded">
            <summary>
            Gets the percentage loaded.
            </summary>
            <returns>An <see cref="T:System.Int32"/> with the percentage loaded.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.FrameLoaded(System.Int32)">
            <summary>
            No documentation available
            </summary>
            <param name="frameNum">No documentation available</param>
            <returns>No documentation available</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.FlashVersion">
            <summary>
            Returns the flash version number
            </summary>
            <returns>An <see cref="T:System.Int32"/> with the flash version number.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.LoadMovie(System.Int32,System.String)">
            <summary>
            Loads the movie identified by url to the layer specified by layerNumber.  
            The argument type is integer for layerNumber and string for url. 
            </summary>
            <param name="layer">The layer number</param>
            <param name="url">The filename with full path or URL to the movie.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TGotoFrame(System.String,System.Int32)">
            <summary>
            For the timeline indicated by target, goes to the frame number specified by frameNumber.
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
            <param name="frameNum">An <see cref="T:System.Int32"/> with the frame number.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TGotoLabel(System.String,System.String)">
            <summary>
            For the timeline indicated by target, goes to the label specified by label.
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
            <param name="label">A <see cref="T:System.String"/> with the label name.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TCurrentFrame(System.String)">
            <summary>
            For the timeline indicated by target, gets the current frame
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
            <returns>An <see cref="T:System.Int32"/> with the current frame number.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TCurrentLabel(System.String)">
            <summary>
            For the timeline indicated by target, gets the current label
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
            <returns>A <see cref="T:System.String"/> with the label name.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TPlay(System.String)">
            <summary>
            For the timeline indicated by target starts play.
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TStopPlay(System.String)">
            <summary>
            For the timeline indicated by target, stops playing.
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.SetVariable(System.String,System.String)">
            <summary>
            No documentation available.
            </summary>
            <param name="name">No documentation available.</param>
            <param name="value">No documentation available.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.GetVariable(System.String)">
            <summary>
            No documentation available.
            </summary>
            <param name="name">No documentation available.</param>
            <returns>No documentation available.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TSetProperty(System.String,System.Int32,System.String)">
            <summary>
            For the timeline indicated by target, sets the value of the property 
            specified by property to the value specified by value, which can be a 
            string. For property, enter the integer corresponding to the desired 
            property.
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
            <param name="property">The <see cref="T:System.Int32"/> with the number of the property.</param>
            <param name="value">The <see cref="T:System.String"/> with the value to set.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TGetProperty(System.String,System.Int32)">
            <summary>
            For the timeline indicated by target, gets the value of the property 
            specified by property to the value specified by value, which can be a 
            string. For property, enter the integer corresponding to the desired 
            property.
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
            <param name="property">The <see cref="T:System.Int32"/> with the number of the property.</param>
            <returns>The <see cref="T:System.String"/> with the value to retrieve.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.TCallFrame(System.String,System.Int32)">
            <summary>
            For the timeline indicated by target call the given frame.
            </summary>
            <param name="target">The <see cref="T:System.String"/> with the target name.</param>
            <param name="frameNum">An <see cref="T:System.Int32"/> with the frame number to call.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.RaiseOnOnReadyStateChange(System.Object,VectorGraphics.Controls.Flash.AxFlashReadyStateChangeEvent)">
            <summary>
            Raises the OnReadyStateChange event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:VectorGraphics.Controls.Flash.AxFlashReadyStateChangeEvent"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.RaiseOnOnProgress(System.Object,VectorGraphics.Controls.Flash.AxFlashProgressEvent)">
            <summary>
            Raises the OnProgress event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:VectorGraphics.Controls.Flash.AxFlashProgressEvent"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.RaiseOnFSCommand(System.Object,VectorGraphics.Controls.Flash.AxFlashFSCommandEvent)">
            <summary>
            Raises the FSCommand event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:VectorGraphics.Controls.Flash.AxFlashFSCommandEvent"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.RaiseOnFlashCall(System.Object,VectorGraphics.Controls.Flash.AxFlashCallEvent)">
            <summary>
            Raises the FlashCall event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:VectorGraphics.Controls.Flash.AxFlashCallEvent"/> with the event data.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.CreateSink">
            <summary>
            Overridden. Associates the underlying ActiveX control with a client that can handle control events. 
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.DetachSink">
            <summary>
            Overridden. Releases the event-handling client attached 
            in the CreateSink method from the underlying ActiveX control. 
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlash.AttachInterfaces">
            <summary>
            When overridden in a derived class, attaches interfaces to the underlying ActiveX control. 
            </summary>
        </member>
        <member name="E:VectorGraphics.Controls.Flash.AxFlash.OnReadyStateChange">
            <summary>
            Generated when the ready state of the control changes. 
            The possible states are 0=Loading, 1=Uninitialized, 2=Loaded, 3=Interactive, 4=Complete.
            </summary>
        </member>
        <member name="E:VectorGraphics.Controls.Flash.AxFlash.OnProgress">
            <summary>
            Generated as the Flash Player movie is downloading.
            </summary>
        </member>
        <member name="E:VectorGraphics.Controls.Flash.AxFlash.FSCommand">
            <summary>
            This event is generated when a GetURL action is performed 
            in the movie with a URL and the URL starts with "FSCommand:". 
            The portion of the URL after the : is provided in command and 
            the target is provided in args. This can be used to create a 
            response to a frame or button action in the Shockwave Flash movie.
            </summary>
        </member>
        <member name="E:VectorGraphics.Controls.Flash.AxFlash.FlashCall">
            <summary>
            Called when you receive a FlashCall.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.ReadyState">
            <summary>
            Gets the state of the Flash movie. Use to check for availability. 
            0=Loading, 1=Uninitialized, 2=Loaded, 3=Interactive, 4=Complete.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.TotalFrames">
            <summary>
            Gets the total number of frames in the movie. This is not available until the movie has loaded. 
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.Playing">
            <summary>
            Gets or sets a value indicating whether the movie is playing. 
            Returns true if the movie is currently playing, false if it is paused.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.Quality">
            <summary>
            Gets or sets the current rendering quality (0=Low, 1=High, 2=AutoLow, 3=AutoHigh).
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.ScaleMode">
            <summary>
            Gets or sets the scale mode for the Flash movie 
            (0=ShowAll, 1= NoBorder, 2 = ExactFit)
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.AlignMode">
            <summary>
            Gets or sets the align mode of bit flags. 
            (Left=+1, Right=+2, Top=+4, Bottom=+8). 
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.BackgroundColor">
            <summary>
            Gets or sets the BackgroundColor.
            Override the background color of a movie. 
            An integer of the form red*65536+green*256+blue use -1 for the default movie color.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.Loop">
            <summary>
            Gets or sets a value indicating whether the loop state of the Flash movie.
            Returns true if the movie loops, false to play once. 
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.Movie">
            <summary>
            Gets or sets the URL source for the movie file. 
            Setting this property will load a new movie.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.FrameNum">
            <summary>
            Gets or sets the currently displayed frame of the movie. 
            Setting this property advances or rewinds the movie.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.WMode">
            <summary>
            Gets or sets the Window Mode property of the Flash movie for transparency, 
            layering, and positioning in the browser.
            Possible values: window, opaque, transparent. 
            * window - movie plays in its own rectangular window on a web page.
            * opaque - the movie hides everything on the page behind it.
            * transparent - the background of the HTML page shows through all 
            transparent portions of the movie, this may slow animation performance. 
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.SAlign">
            <summary>
            Gets or sets the align mode.
            Possible values: l, t, r, b, tl, tr, bl, br.
            * l, r, t, and b align the movie along the left, right,
            top or bottom edge, respectively, of the browser 
            window and crop the remaining three sides as needed.
            * tl and tr align the movie to the top left and top 
            right corner, respectively, of the browser window and 
            crop the bottom and remaining right or left side as needed.
            * bl and br align the movie to the bottom left and bottom right 
            corner, respectively, of the browser window and crop the
            top and remaining right or left side as needed. 
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.Menu">
            <summary>
            Gets or sets a value indicating whether the menu is visible.
            Possible values: true, false.
            * true displays the full menu, allowing the user a 
            variety of options to enhance or control playback.
            * false displays a menu that contains only the 
            Settings option and the About Flash option. 
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.Base">
            <summary>
            Gets or sets the base directory.[base directory] or [URL]. 
            Specifies the base directory or URL used to resolve all 
            relative path statements in the Flash Player movie. This 
            attribute is helpful when your Flash Player movies are kept 
            in a different directory from your other files.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.CtlScale">
            <summary>
            Gets or sets the control scale mode.
            Possible values: showall, noborder, exactfit.
            * default (Show all) makes the entire movie visible in the 
            specified area without distortion, while maintaining the 
            original aspect ratio of the movie. Borders may appear on two sides of the movie.
            * noorder scales the movie to fill the specified area, without 
            distortion but possibly with some cropping, while maintaining 
            the original aspect ratio of the movie.
            * exactfit makes the entire movie visible in the specified 
            area without trying to preserve the original aspect ratio. Distortion may occur. 
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.DeviceFont">
            <summary>
            Gets or sets a value indicating whether DeviceFonts are used.
            can be true or false indicating whethert to use device font or not.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.EmbedMovie">
            <summary>
            Gets or sets a value indicating whether movie should be embedded.
            Can be true or false indicating whether to embed the movie in the player or not.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.BGColor">
            <summary>
            Gets or sets BGColor property.
            Override the background color of a movie. 
            [hexadecimal RGB value] in the format #RRGGBB . 
            Specifies the background color of the movie. Use this attribute to 
            override the background color setting specified in the 
            Flash file. This attribute does not affect the background color of the HTML page.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.Quality2">
            <summary>
            Gets or sets the Quality2 property.
            </summary>
            <seealso cref="P:VectorGraphics.Controls.Flash.AxFlash.Quality"/>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.SWRemote">
            <summary>
            Gets or sets the Shockmachine parameters.
            To specify an  swRemote  parameter, use a structure like this: "NAME='VALUE' NAME='VALUE'.
            -> swPicon: A fully qualified URL to a picon BMP or GIF file.
            The image should be a 64 x 64 pixels, 8-bit image and use the Web system palette.
            If a picon is not specified, one will be generated automatically, 
            but Macromedia strongly recommends that you provide custom art.
            -> swPackage: A fully qualified or relative URL (relative to the primary movie) 
            of a package text file. This text file, in XML format, provides a list of URLs 
            of all the files that need to be downloaded for a complete save of this piece.
            For more information about package files, see Saving titles with multiple movies
            or external media.
            -> swTitle: A text string that provides the Shockwave movie's title; 
            this title appears in the Name field of the Save to Shockmachine dialog
            box when a user saves your movie to Shockmachine. The text string can include spaces.
            If you do not provide a title, one is generated based on the movie's 
            file name, but Macromedia strongly recommends that you provide a title.
            -> swTotalSize: For content with packages (see swPackage , above), specifies
            the size, in bytes, of all the content that needs to be downloaded for the 
            piece to save successfully. The size should include the movie currently being 
            saved, even though it's already in the cache. If nothing is specified, an 
            estimate is calculated based on URLs already downloaded.
            -> swCategory Specifies the category that will appear in the Category 
            field of the Save to Shockmachine dialog box when a user saves your movie to Shockmachine.
            If a category is not specified or is unavailable, the category that 
            comes first alphabetically will be chosen.
            -> swSendUrl: Specifies the URL to be sent when the user clicks the 
            Shockmachine Send button. Typically, the URL is the location of the 
            Web page that contains your movie.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.FlashVars">
            <summary>
            Gets or sets FlashVars property.
            Possible values: variable to pass to Flash Player. Requires Macromedia Flash Player 6 or later.
            * Used to send root level variables to the movie. The format 
            of the string is a set of name=value combinations separated by AND.
            * Browsers will support string sizes of up to 64KB (65535 bytes) in length.
            * For more information on FlashVars, please refer to Using FlashVars 
            to pass variables to a SWF (TechNote 16417). 
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.AllowScriptAccess">
            <summary>
            Gets or sets AllowScriptAccess property.
            AllowScriptAccesscan have two possible values: "always" and "never":
            When AllowScriptAccess is "never", outbound scripting will always fail.
            When AllowScriptAccess is "always", outbound scripting will always succeed.
            IfAllowScriptAccess is not specified by an HTML page, it defaults to "always".
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.MovieData">
            <summary>
            Gets or sets additinal movie data.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.InlineData">
            <summary>
            Gets or sets the InlineData property.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.SeamlessTabbing">
            <summary>
            Gets or sets a value indicating whether to use seamless tabbing or not.
            The default value is true; set this parameter to false 
            to disable "seamless tabbing", which allows users to use the 
            Tab key to move keyboard focus out of a Flash movie and into the 
            surrounding HTML (or the browser, if there is nothing focusable 
            in the HTML following the Flash movie).
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.Profile">
            <summary>
            Gets or sets a value indicating whether to use a profile or not.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.ProfileAddress">
            <summary>
            Gets or sets ProfileAddress property.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.ProfilePort">
            <summary>
            Gets or sets ProfilePort property.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.AllowNetworking">
            <summary>
            Gets or sets AllowNetworking property.
            "allowNetworking" affects the ability of a SWF to perform network I/O, 
            either via the browser (opening new windows, etc.) or directly 
            using Flash networking APIs. This implicitly may also restrict 
            scripting access to the browser, as you cannot prevent network 
            I/O without prohibiting access to the browser's JavaScript DOM.
            In order of least to most restrictive, you can specify:
            "allowScriptAccess=always": This permits the SWF to call arbitrary 
            browser JavaScript at all times, even if the SWF came from 
            another domain. This is generally not safe to do unless you 
            completely trust the SWF you are loading (and any children SWFs it may subsequently load).
            "allowNetworking=all": All normal network I/O is allowed 
            (as permitted by the Flash Player security model).
            "allowScriptAccess=sameDomain": This permits the SWF to call
            into the browser's JavaScript DOM only if the SWF came from 
            the same domain as the HTML hosting it. This is equivalent to the 
            typical browser "same origin policy" model.
            "allowScriptAccess=never": The SWF is never permitted to call into 
            the browser's JavaScript, even if it came from the same domain as
            its HTML container. You can use this tag if you host SWFs in the
            same domain as the HTML, but don't trust the SWFs to interact with
            the surrounding HTML, cookies, etc. In particular this setting will
            also prevent the SWF from modifying or redirecting existing frames
            windows. However, if you really don't trust the SWF you may need 
            some stronger medicine.
            "allowNetworking=internal": Everything with "allowScriptAccess=never" 
            applies, and also prevents the SWF from opening new browser windows, 
            modifying existing ones, or otherwise affecting any browser state. 
            The SWF can still use internal networking ActionScript APIs like 
            loadMovie(), XML.load(), LoadVars, etc.
            Finally, "allowNetworking=none" prohibits any browser or 
            network interaction. This means that the SWF cannot do much 
            more than interact with the assets it contains internally,
            and cannot do anything to influence the browser, or load 
            or send any data over the network.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlash.AllowFullScreen">
            <summary>
            Gets or sets AllowFullScreen property.
            Can be "true" or "false".
            </summary>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashReadyStateChangeEventHandler">
            <summary>
            Delegate for the OnReadyStateChange event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:VectorGraphics.Controls.Flash.AxFlashReadyStateChangeEvent"/> with the event data.</param>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashReadyStateChangeEvent">
            <summary>
            The event arguments for the <see cref="E:VectorGraphics.Controls.Flash.AxFlash.OnReadyStateChange"/> event.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashReadyStateChangeEvent.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AxFlashReadyStateChangeEvent class.
            </summary>
            <param name="newState">An <see cref="T:System.Int32"/> with the new state.</param>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlashReadyStateChangeEvent.NewState">
            <summary>
            Gets or sets an <see cref="T:System.Int32"/> with the new state.
            </summary>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashProgressEventHandler">
            <summary>
            Delegate for the OnProgress event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:VectorGraphics.Controls.Flash.AxFlashProgressEvent"/> with the event data.</param>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashProgressEvent">
            <summary>
            The event arguments for the <see cref="E:VectorGraphics.Controls.Flash.AxFlash.OnProgress"/> event.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashProgressEvent.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AxFlashProgressEvent class.
            </summary>
            <param name="percentDone">An <see cref="T:System.Int32"/> with the percentDone.</param>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlashProgressEvent.PercentDone">
            <summary>
            Gets or sets an <see cref="T:System.Int32"/> with the percent done.
            </summary>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashFSCommandEventHandler">
            <summary>
            Delegate for the FSCommand event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:VectorGraphics.Controls.Flash.AxFlashFSCommandEvent"/> with the event data.</param>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashFSCommandEvent">
            <summary>
            The event arguments for the <see cref="E:VectorGraphics.Controls.Flash.AxFlash.FSCommand"/> event.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashFSCommandEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the AxFlashFSCommandEvent class.
            </summary>
            <param name="command">A <see cref="T:System.String"/> with the command to be sent.</param>
            <param name="args">A <see cref="T:System.String"/> with the command arguments.</param>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlashFSCommandEvent.Command">
            <summary>
            Gets or sets a <see cref="T:System.String"/> with the command to be sent.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlashFSCommandEvent.Arguments">
            <summary>
            Gets or sets a <see cref="T:System.String"/> with the command arguments.
            </summary>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashEventMulticaster">
            <summary>
            The class for the <see cref="T:ShockwaveFlashObjects._IShockwaveFlashEvents"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.AxFlashEventMulticaster.parent">
            <summary>
            The <see cref="T:VectorGraphics.Controls.Flash.AxFlash"/> parent for the events.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashEventMulticaster.#ctor(VectorGraphics.Controls.Flash.AxFlash)">
            <summary>
            Initializes a new instance of the AxFlashEventMulticaster class.
            </summary>
            <param name="parent">The <see cref="T:VectorGraphics.Controls.Flash.AxFlash"/> parent for the events.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashEventMulticaster.OnReadyStateChange(System.Int32)">
            <summary>
            Raises the OnReadyStateChange event.
            </summary>
            <param name="newState">An <see cref="T:System.Int32"/> with the new state.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashEventMulticaster.OnProgress(System.Int32)">
            <summary>
            Raises the OnProgress event.
            </summary>
            <param name="percentDone">An <see cref="T:System.Int32"/> with the percentage done.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashEventMulticaster.FSCommand(System.String,System.String)">
            <summary>
            Raises the FSCommand event.
            </summary>
            <param name="command">A <see cref="T:System.String"/> with the command to be sent.</param>
            <param name="args">A <see cref="T:System.String"/> with the comman arguments.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashEventMulticaster.FlashCall(System.String)">
            <summary>
            Raises the FlashCall event.
            </summary>
            <param name="request">A <see cref="T:System.String"/> with the flash request , xml formatted.</param>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashCallEventHandler">
            <summary>
            Delegate for the FlashCall event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:VectorGraphics.Controls.Flash.AxFlashCallEvent"/> with the event data.</param>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashCallEvent">
            <summary>
            The event arguments for the <see cref="E:VectorGraphics.Controls.Flash.AxFlash.FlashCall"/> event.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashCallEvent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AxFlashCallEvent class.
            </summary>
            <param name="request">A <see cref="T:System.String"/> with the flash request, xml formatted.</param>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlashCallEvent.Request">
            <summary>
            Gets or sets a <see cref="T:System.String"/> with the xml formatted flash request.
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs">
            <summary>
            Class that contains the data for the ShapePropertiesChanged event.
            Derives from <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.drawAction">
            <summary>
            New <see cref="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.ShapeDrawAction"/> that should be used.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.pen">
            <summary>
            New <see cref="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.Pen"/> for the element.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.brush">
            <summary>
            New <see cref="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.Brush"/> for the element.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.font">
            <summary>
            New <see cref="T:System.Drawing.Font"/> for the element.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.fontColor">
            <summary>
            New font <see cref="T:System.Drawing.Color"/> for the element.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.name">
            <summary>
            New elements name as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.newFontAlignment">
            <summary>
            New elements <see cref="T:VectorGraphics.Elements.VGAlignment"/>.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.String,VectorGraphics.Elements.VGAlignment)">
            <summary>
            Initializes a new instance of the ShapePropertiesChangedEventArgs class.
            </summary>
            <param name="newDrawAction">New <see cref="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.ShapeDrawAction"/> that should be used.</param>
            <param name="newPen">new <see cref="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.Pen"/> for the element.</param>
            <param name="newBrush">new <see cref="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.Brush"/> for the element.</param>
            <param name="newFont">new <see cref="T:System.Drawing.Font"/> for the element.</param>
            <param name="newFontColor">new font <see cref="T:System.Drawing.Color"/> for the element.</param>
            <param name="newName">new elements name.</param>
            <param name="newAlignment">new elements <see cref="T:VectorGraphics.Elements.VGAlignment"/>.</param>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.NewName">
            <summary>
            Gets the name.
            </summary>
            <value>The newly defined name.</value>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.NewFont">
            <summary>
            Gets the <see cref="T:System.Drawing.Font"/>.
            </summary>
            <value>The newly defined <see cref="T:System.Drawing.Font"/>.</value>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.NewFontColor">
            <summary>
            Gets the fonts <see cref="T:System.Drawing.Color"/>.
            </summary>
            <value>The newly defined <see cref="T:System.Drawing.Color"/> for the font.</value>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.Pen">
            <summary>
            Gets the Pen property. This is the new created pen.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.Brush">
            <summary>
            Gets the Brush property. This is the new created brush.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.ShapeDrawAction">
            <summary>
            Gets the ShapeDrawAction property. This can be
            None, Edge, Fill or Both.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs.TextAlignment">
            <summary>
            Gets the <see cref="T:VectorGraphics.Elements.VGAlignment"/> property. 
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs">
            <summary>
            Class that contains the data for the BrushChanged event. Derives from <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs.brush">
            <summary>
            The new <see cref="P:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs.Brush"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs.brushGroup">
            <summary>
            The <see cref="T:VectorGraphics.Elements.VGStyleGroup"/> of the new <see cref="P:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs.Brush"/>
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs.#ctor(System.Drawing.Brush,VectorGraphics.Elements.VGStyleGroup)">
            <summary>
            Initializes a new instance of the BrushChangedEventArgs class.
            </summary>
            <param name="newBrush">The newly created <see cref="P:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs.Brush"/>.</param>
            <param name="newGroup">vector graphics
            group to which the new brush should be applied.</param>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs.Brush">
            <summary>
            Gets the Brush property. This is the new created brush.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs.ElementGroup">
            <summary>
            Gets or sets the ElementGroup property. This is the vector graphics
            group to which the new brush should be applied.
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs">
            <summary>
            Class that contains the data for the PenChanged event. 
            Derives from <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs.pen">
            <summary>
            This is the new created pen.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs.penGroup">
            <summary>
            This is the vector graphics
            group to which the new pen should be applied.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs.#ctor(System.Drawing.Pen,VectorGraphics.Elements.VGStyleGroup)">
            <summary>
            Initializes a new instance of the PenChangedEventArgs class.
            </summary>
            <param name="newPen">This is the new created pen.</param>
            <param name="newGroup">vector graphics
            group to which the new pen should be applied.</param>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs.Pen">
            <summary>
            Gets the Pen property. This is the new created pen.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs.ElementGroup">
            <summary>
            Gets or sets the PenGroup property. This is the vector graphics
            group to which the new pen should be applied.
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs">
            <summary>
            Class that contains the data for the FontChanged event. 
            Derives from <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.font">
            <summary>
            The newly created <see cref="P:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.Font"/>
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.fontColor">
            <summary>
            The <see cref="T:System.Drawing.Color"/> for the newly created font.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.fontAlignment">
            <summary>
            The <see cref="T:VectorGraphics.Elements.VGAlignment"/> for the newly created font.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.elementGroup">
            <summary>
            This is the vector graphics
            group to which the new font should be applied.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.#ctor(System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGAlignment,VectorGraphics.Elements.VGStyleGroup)">
            <summary>
            Initializes a new instance of the FontChangedEventArgs class.
            </summary>
            <param name="newFont">The newly created <see cref="P:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.Font"/></param>
            <param name="newColor">The <see cref="T:System.Drawing.Color"/> for the newly created font.</param>
            <param name="newAlignment">The <see cref="T:VectorGraphics.Elements.VGAlignment"/> for the newly created font.</param>
            <param name="newGroup">vector graphics
            group to which the new font should be applied.</param>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.Font">
            <summary>
            Gets the Font property. This is the new created font.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.FontColor">
            <summary>
            Gets the Color property. This is the new created font color.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.FontAlignment">
            <summary>
            Gets the FontAlignment property. This is the new created fonts text alignment value.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs.ElementGroup">
            <summary>
            Gets or sets the ElementGroup property. This is the vector graphics
            group to which the new font should be applied.
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventHandler">
            <summary>
            Delegate. Handles shape events.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> with the <see cref="T:VectorGraphics.Elements.VGElement"/> shape.</param>
        </member>
        <member name="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs">
            <summary>
            Class that contains the data for shape events. Derives from <see cref="T:System.EventArgs"/>.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs.shape">
            <summary>
            Saves the <see cref="T:VectorGraphics.Elements.VGElement"/> that is sent within
            this <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/>.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs.#ctor(VectorGraphics.Elements.VGElement)">
            <summary>
            Initializes a new instance of the ShapeEventArgs class.
            </summary>
            <param name="shape">The <see cref="T:VectorGraphics.Elements.VGElement"/> to store.</param>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs.Shape">
            <summary>
            Gets the whole original shape object
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.CustomTypeConverter.PointFConverter">
            <summary>
            Derived from <see cref="T:System.ComponentModel.ExpandableObjectConverter"/>.
            Provides a type converter to convert expandable objects 
            to and from the <see cref="T:System.Drawing.PointF"/> structure
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.PointFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>
            Returns whether this converter can convert an object 
            of string to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents 
            the type you want to convert from.</param>
            <returns><strong>True</strong> if this converter can 
            perform the conversion; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.PointFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>
            Returns whether this converter can convert 
            the object to the specified type <see cref="T:System.Drawing.PointF"/>. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents 
            the type you want to convert to.</param>
            <returns><strong>True</strong> if this converter can 
            perform the conversion; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.PointFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/>
            Converts the given value to the type of this converter.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <strong>Object</strong> that represents the converted value.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.PointFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference 
            is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the 
            <strong>value</strong> parameter to.</param>
            <returns>An <strong>Object</strong> that represents the converted value.</returns>
        </member>
        <member name="T:VectorGraphics.Tools.CustomTypeConverter.PenConverter">
            <summary>
            Derived from <see cref="T:System.ComponentModel.ExpandableObjectConverter"/>.
            Provides a type converter to convert expandable objects 
            to and from the <see cref="T:System.Drawing.Pen"/> object.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.PenConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>
            Returns whether this converter can convert an object 
            of string to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents 
            the type you want to convert from.</param>
            <returns><strong>True</strong> if this converter can 
            perform the conversion; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.PenConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>
            Returns whether this converter can convert 
            the object to the specified type <see cref="T:System.Drawing.Pen"/>. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents 
            the type you want to convert to.</param>
            <returns><strong>True</strong> if this converter can 
            perform the conversion; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.PenConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/>
            Converts the given value to the type of this converter.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <strong>Object</strong> that represents the converted value.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.PenConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>
            Converts the given value object to the specified type, 
            using the specified context and culture information. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference 
            is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the 
            <strong>value</strong> parameter to.</param>
            <returns>An <strong>Object</strong> that represents the converted value.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.PenConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)"/>
            Returns whether this object supports properties. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <returns><strong>True</strong>, because we would like to implement properties.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.PenConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)"/>
            Returns a collection of properties for the type of array 
            specified by the value parameter, using the specified context and attributes.
            This implementation removes properties that have to TypeDescriptor.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> 
            that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that 
            are exposed for the pen type.</returns>
        </member>
        <member name="T:VectorGraphics.Tools.CustomTypeConverter.BrushConverter">
            <summary>
            Derived from <see cref="T:System.ComponentModel.ExpandableObjectConverter"/>.
            Provides a type converter to convert expandable objects 
            to and from the <see cref="T:System.Drawing.Brush"/> object.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.BrushConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>
            Returns whether this converter can convert an object 
            of string to the type of this converter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents 
            the type you want to convert from.</param>
            <returns><strong>True</strong> if this converter can 
            perform the conversion; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.BrushConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>
            Returns whether this converter can convert 
            the object to the specified type <see cref="T:System.Drawing.Brush"/>. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents 
            the type you want to convert to.</param>
            <returns><strong>True</strong> if this converter can 
            perform the conversion; otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.BrushConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/>
            Converts the given value to the type of this converter.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <strong>Object</strong> that represents the converted value.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.BrushConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>
            Converts the given value object to the specified type, 
            using the specified context and culture information. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference 
            is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the 
            <strong>value</strong> parameter to.</param>
            <returns>An <strong>Object</strong> that represents the converted value.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.BrushConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)"/>
            Returns whether this object supports properties. 
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <returns><strong>True</strong>, because we would like to implement properties.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.BrushConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)"/>
            Returns a collection of properties for the type of array 
            specified by the value parameter, using the specified context and attributes.
            This implementation uses properties specialized for the brush type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> 
            that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that 
            are exposed for the brush type.</returns>
        </member>
        <member name="T:VectorGraphics.Tools.CustomTypeConverter.VGElementConverter">
            <summary>
            Derived from <see cref="T:System.ComponentModel.ExpandableObjectConverter"/>.
            Provides a type converter to convert <see cref="T:VectorGraphics.Elements.VGElement"/> objects
            to strings.
            </summary>
            <remarks>It is implemented to have a human readable description
            of the <see cref="T:VectorGraphics.Elements.VGElement"/> at the right side of the 
            <see cref="T:System.Windows.Forms.PropertyGrid"/> row.</remarks>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.VGElementConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>
            </summary>
            <remarks>This value is the description at the right side of the row
            at the property grid.</remarks>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference 
            is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the 
            <strong>value</strong> parameter to.</param>
            <returns>An <strong>Object</strong> that represents the converted value.</returns>
        </member>
        <member name="T:VectorGraphics.Tools.VGExceptionMethods">
            <summary>
            Static methods used for the Vector Graphics exception handling.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.VGExceptionMethods.LogStack">
            <summary>
            This static method logs the current call stack into the log file.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.VGExceptionMethods.HandleException(System.Exception)">
            <summary>
            Creates the error message and displays it.
            </summary>
            <param name="e">The <see cref="T:System.Exception"/> to show.</param>
        </member>
        <member name="M:VectorGraphics.Tools.VGExceptionMethods.HandleExceptionSilent(System.Exception)">
            <summary>
            Silently handles the incoming exception.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to be processed.</param>
        </member>
        <member name="T:VectorGraphics.Tools.Interfaces.IViewObject">
            <summary>
            The IViewObject interface enables an object to display itself directly 
            without passing a data object to the caller. In addition, this interface 
            can create and manage a connection with an advise sink so the caller 
            can be notified of changes in the view object.
            </summary>
            <remarks>This is implemented through com import, because this
            custom marshalling ensures correct work, the OLE.Interop implementation
            seems not to be valid. Please google for more information.</remarks>
            <seealso cref="T:Microsoft.VisualStudio.OLE.Interop.IViewObject"/>
        </member>
        <member name="M:VectorGraphics.Tools.Interfaces.IViewObject.Draw(Microsoft.VisualStudio.OLE.Interop.DVASPECT,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECTL@,Microsoft.VisualStudio.OLE.Interop.RECTL@,System.IntPtr,System.UInt32)">
            <summary>
            Draws a representation of an object onto the specified device context.
            </summary>
            <param name="drawAspect">Aspect to be drawn</param>
            <param name="index">Part of the object of interest in the draw operation</param>
            <param name="aspectPointer">Pointer to DVASPECTINFO structure or NULL</param>
            <param name="ptd">Pointer to target device in a structure</param>
            <param name="hdcTargetDev">Information context for the target device</param>
            <param name="hdcDraw">Device context on which to draw</param>
            <param name="lprcBounds">Ref. The <see cref="T:Microsoft.VisualStudio.OLE.Interop.RECTL"/> in which the object is drawn.</param>
            <param name="lprcWBounds">Ref. Pointer to the window extent and window origin 
            when drawing a metafile.</param>
            <param name="pfnContinue">Pointer to the callback function for canceling 
            or continuing the drawing</param>
            <param name="doContinue">Value to pass to the callback function</param>
            <returns>An error code.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Interfaces.IViewObject.GetColorSet(System.UInt32,System.Int32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.DVTARGETDEVICE,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.LOGPALETTE@)">
            <summary>
            Returns the logical palette that the object will use 
            for drawing in its IViewObject::Draw method with the corresponding parameters. 
            </summary>
            <param name="drawAspect">How the object is to be represented</param>
            <param name="index">Part of the object of interest in the draw operation</param>
            <param name="aspectPointer">Always NULL</param>
            <param name="ptd">Pointer to target device in a structure</param>
            <param name="hicTargetDev">Information context for the target device</param>
            <param name="colorSet">Out.Requested LOGPALETTE structure</param>
        </member>
        <member name="M:VectorGraphics.Tools.Interfaces.IViewObject.Freeze(System.UInt32,System.Int32,System.IntPtr,System.IntPtr@)">
            <summary>
            Freezes a certain aspect of the object's presentation so that 
            it does not change until the IViewObject::Unfreeze method is called. 
            The most common use of this method is for banded printing.
            </summary>
            <param name="drawAspect">How the object is to be represented</param>
            <param name="index">Part of the object of interest in the draw operation</param>
            <param name="aspectPointer">Always NULL</param>
            <param name="pdwFreeze">Points to location containing an identifying key</param>
        </member>
        <member name="M:VectorGraphics.Tools.Interfaces.IViewObject.Unfreeze(System.Int32)">
            <summary>
            Releases a previously frozen drawing. The most common use 
            of this method is for banded printing.
            </summary>
            <param name="freeze">Contains key that determines view object to unfreeze</param>
        </member>
        <member name="M:VectorGraphics.Tools.Interfaces.IViewObject.SetAdvise(System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink)">
            <summary>
            Sets up a connection between the view object and an advise 
            sink so that the advise sink can be notified about 
            changes in the object's view.
            </summary>
            <param name="aspects">View for which notification is being requested</param>
            <param name="advf">Information about the advise sink</param>
            <param name="adviseSink"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IAdviseSink"/> that is to receive change notifications</param>
        </member>
        <member name="M:VectorGraphics.Tools.Interfaces.IViewObject.GetAdvise(System.IntPtr,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IAdviseSink@)">
            <summary>
            Retrieves the existing advisory connection on the object if 
            there is one. This method simply returns the parameters used in 
            the most recent call to the IViewObject::SetAdvise method.
            </summary>
            <param name="paspects">Pointer to where dwAspect parameter from 
            previous SetAdvise call is returned</param>
            <param name="advf">Pointer to where advf parameter from 
            previous SetAdvise call is returned</param>
            <param name="adviseSink">Out. Receives the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IAdviseSink"/> interface</param>
        </member>
        <member name="T:VectorGraphics.Controls.RichEdit50">
            <summary>
            Derived from <see cref="T:System.Windows.Forms.RichTextBox"/>.
            This class is the RichTextBox version used by WordPad.
            It is imported from the msftedit.dll.
            </summary>
            <remarks>Standard .Net 2 <see cref="T:System.Windows.Forms.RichTextBox"/> uses an old 
            version which doesn´t support transparency.</remarks>
        </member>
        <member name="M:VectorGraphics.Controls.RichEdit50.#ctor">
            <summary>
            Initializes a new instance of the RichEdit50 class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.RichEdit50.LoadLibrary(System.String)">
            <summary>
            The LoadLibrary function maps the specified executable 
            module into the address space of the calling process.
            </summary>
            <param name="fileName">[in] Pointer to a null-terminated string 
            that names the executable module (either a .dll or .exe file). 
            The name specified is the file name of the module and is 
            not related to the name stored in the library module 
            itself, as specified by the LIBRARY keyword in the module-definition (.def) file. </param>
            <returns>If the function succeeds, the return value is a handle to the module.
            If the function fails, the return value is NULL. 
            To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.RichEdit50.GetTextLength">
            <summary>
            This method returns the <see cref="P:System.Windows.Forms.RichTextBox.TextLength"/>
            property
            </summary>
            <returns>An <see cref="T:System.Int32"/> with the text length of the
            content in the <see cref="T:System.Windows.Forms.RichTextBox"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.RichEdit50.GetBackgroundColor">
            <summary>
            This method returns the <see cref="T:System.Windows.Forms.RichTextBox"/> BackColor.
            property
            </summary>
            <returns>An <see cref="T:System.Drawing.Color"/> with the BackgroundColor of the
            content in the <see cref="T:System.Windows.Forms.RichTextBox"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.RichEdit50.SetBackgroundColor(System.Drawing.Color)">
            <summary>
            This method sets the <see cref="T:System.Windows.Forms.RichTextBox"/> BackColor.
            property.
            </summary>
            <param name="newColor">A <see cref="T:System.Drawing.Color"/> with the BackgroundColor of the
            content in the <see cref="T:System.Windows.Forms.RichTextBox"/>.</param>
        </member>
        <member name="P:VectorGraphics.Controls.RichEdit50.TextLength">
            <summary>
            Gets the text length of the
            content in the <see cref="T:System.Windows.Forms.RichTextBox"/>.
            Overridden. Thread safe version of the
            <see cref="P:System.Windows.Forms.RichTextBox.TextLength"/> property.
            </summary>
            <returns>An <see cref="T:System.Int32"/> with the text length of the
            content in the <see cref="T:System.Windows.Forms.RichTextBox"/>.</returns>
        </member>
        <member name="P:VectorGraphics.Controls.RichEdit50.BackColor">
            <summary>
            Gets or sets the BackColor of the
            content in the <see cref="T:System.Windows.Forms.RichTextBox"/>.
            Overridden. Thread safe version of the
            <see cref="T:System.Windows.Forms.RichTextBox"/> BackColor property.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.RichEdit50.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            It sets the class name to the modern rich text version.
            </summary>
            <value>A <see cref="P:VectorGraphics.Controls.RichEdit50.CreateParams"/> that contains the required creation 
            parameters when the handle to the control is created.</value>
        </member>
        <member name="T:VectorGraphics.Controls.RichEdit50.GetTextCallback">
            <summary>
            This delegate enables asynchronous calls for getting
            the TextLength property on a RichTextBox control.
            </summary>
            <returns>An <see cref="T:System.Int32"/> with the text length of the
            content int the <see cref="T:System.Windows.Forms.RichTextBox"/>.</returns>
        </member>
        <member name="T:VectorGraphics.Controls.RichEdit50.GetBackgroundColorCallback">
            <summary>
            This delegate enables asynchronous calls for getting
            the BackgroundColor property on a RichTextBox control.
            </summary>
            <returns>An <see cref="T:System.Drawing.Color"/> with the BackgroundColor of the
            <see cref="T:System.Windows.Forms.RichTextBox"/>.</returns>
        </member>
        <member name="T:VectorGraphics.Controls.RichEdit50.SetBackgroundColorCallback">
            <summary>
            This delegate enables asynchronous calls for setting
            the BackgroundColor property on a RichTextBox control.
            </summary>
            <param name="color">An <see cref="T:System.Drawing.Color"/> with the BackgroundColor of the
            <see cref="T:System.Windows.Forms.RichTextBox"/>.</param>
        </member>
        <member name="T:VectorGraphics.Tools.CustomCursors">
            <summary>
            This class provides a set of custom cursors for
            the creation of the vector graphics elements in this namespace.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomCursors.rectangle">
            <summary>
            This is a cursor for creating rectangles.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomCursors.ellipse">
            <summary>
            This is a cursor for creating ellipse.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomCursors.polyline">
            <summary>
            This is a cursor for creating polylines.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomCursors.line">
            <summary>
            This is a cursor for creating line.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomCursors.text">
            <summary>
            This is a cursor for creating instructions.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomCursors.image">
            <summary>
            This is a cursor for creating images.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomCursors.sound">
            <summary>
            This is a cursor for creating sounds.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomCursors.sharp">
            <summary>
            This is a cursor for creating sharps.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomCursors.Rectangle">
            <summary>
            Gets the cursor for creating rectangles.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomCursors.Ellipse">
            <summary>
            Gets the cursor for creating ellipse.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomCursors.Polyline">
            <summary>
            Gets the cursor for creating polylines.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomCursors.Line">
            <summary>
            Gets the cursor for creating line.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomCursors.Text">
            <summary>
            Gets the cursor for creating instructions.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomCursors.Image">
            <summary>
            Gets the cursor for creating images.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomCursors.Sound">
            <summary>
            Gets the cursor for creating sounds.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.CustomCursors.Sharp">
            <summary>
            Gets the cursor for creating sharps.
            </summary>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashControl">
            <summary>
            Derives from <see cref="T:VectorGraphics.Controls.Flash.AxFlash"/> which is the import
            class for the Macromedia Flash com object.
            Adds a window handle support to retrieve the surface of the com object
            to draw directly on it without flicker.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.AxFlashControl.handleToSurface">
            <summary>
            This <see cref="T:System.IntPtr"/> saves the window handle
            of the flash com objects surface.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashControl.#ctor">
            <summary>
            Initializes a new instance of the AxFlashControl class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashControl.CreateWindowHandle">
            <summary>
            This method creates the window handle of the com object surface.
            </summary>
            <remarks>Note: this only can be done, when the control is already added
            to another controls control collection that is windowed.</remarks>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashControl.GetControlHandle(System.Windows.Forms.Control)">
            <summary>
            Returns the given controls handle.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to receive the handle for.</param>
            <returns>An <see cref="T:System.IntPtr"/> with the controls handle.</returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.AxFlashControl.GetFlashWindow">
            <summary>
            This method iterates through the window tree of the controls parent
            to find the surface window of the com object, that is
            the window thats name is starting with "Macromedia"
            </summary>
            <returns>The window handle <see cref="T:System.IntPtr"/>
            of the flash com objects surface.</returns>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.AxFlashControl.HandleToSurface">
            <summary>
            Gets the <see cref="T:System.IntPtr"/> with the window handle
            of the flash com objects surface.
            </summary>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.AxFlashControl.HandleInvoker">
            <summary>
            The delgate for the thread-safe call to GetControlHandle
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to receive the handle for.</param>
            <returns>An <see cref="T:System.IntPtr"/> with the controls handle.</returns>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.FlashMessageFilter">
            <summary>
            A Message Filter class derived from <see cref="T:System.Windows.Forms.IMessageFilter"/>.
            Hooks messages to the given Object and posts them also to 
            their underlying parent.
            </summary>
            <remarks>That is needed for getting mouse and key events behind a 
            ActiveX object, that does not support the standard windows event handlers.</remarks>
            <seealso cref="T:System.Windows.Forms.AxHost"/>
            <seealso cref="T:System.Windows.Forms.IMessageFilter"/>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.FlashMessageFilter.comObjectHandle">
            <summary>
            Saves the <see cref="T:System.IntPtr"/> handle for the object whos events 
            should be posted to its parent.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.FlashMessageFilter.receivingControlHandle">
            <summary>
            Saves the <see cref="T:System.IntPtr"/> handle for the parent that receives the
            copied message.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.FlashMessageFilter.comObject">
            <summary>
            Saves the <see cref="T:System.Windows.Forms.Control"/> who's events 
            should be posted to its parent.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.FlashMessageFilter.receivingControl">
            <summary>
            Saves the parent <see cref="T:System.Windows.Forms.Control"/> that receives the
            copied message.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashMessageFilter.#ctor(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the FlashMessageFilter class.
            </summary>
            <param name="sendingComObject">A Handle for the object whos events 
            should be posted to its parent.</param>
            <param name="receivingControl">A Handle to the object should receive
            a copy of the events. Normally the parents handle.
            Can be received from <see cref="P:System.Windows.Forms.Control.Handle"/></param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Filters out a message before it is dispatched. 
            </summary>
            <param name="m">The message to be dispatched. 
            You cannot modify this message. </param>
            <returns><strong>True</strong> to filter the message and stop 
            it from being dispatched; <strong>False</strong> to allow the message to continue 
            to the next filter or control. </returns>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashMessageFilter.GetControlHandle(System.Windows.Forms.Control)">
            <summary>
            Returns the given controls handle.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to receive the handle for.</param>
            <returns>An <see cref="T:System.IntPtr"/> with the controls handle.</returns>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.FlashMessageFilter.HandleInvoker">
            <summary>
            The delgate for the thread-safe call to GetControlHandle
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to receive the handle for.</param>
            <returns>An <see cref="T:System.IntPtr"/> with the controls handle.</returns>
        </member>
        <member name="T:VectorGraphics.Controls.Flash.FlashCapture">
            <summary>
            A <see cref="T:System.Windows.Forms.Form"/> with a thumb sized flash object.
            </summary>
            <remarks>Used in Thumbs thumbs creation.
            It then should load a flash movie, make a screenshot and closes itself.
            <para></para>
            How to use:
            <example>
            FlashCapture dlg = new FlashCapture(thumbSize);
            dlg.Show();
            dlg.flashObject.LoadMovie(0, filename);
            do
            {
              Application.DoEvents();
            } 
            while (dlg.flashObject.ReadyState != 4);
            Image thumb = ScreenCapture.GetWindowImage(dlg.flashObject.Handle, dlg.flashObject.Size);
            thumb.Tag = filename;
            dlg.Close();
            return thumb;
            </example>
            </remarks>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.FlashCapture.flashObject">
            <summary>
            Shockwave flash object on the form.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.FlashCapture.movieFile">
            <summary>
            Saves the filename with path to the loaded movie.
            </summary>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.FlashCapture.screenShot">
            <summary>
            Saves the screenshot of the flash movie.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashCapture.#ctor">
            <summary>
            Initializes a new instance of the FlashCapture class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashCapture.#ctor(System.Drawing.Size,System.String)">
            <summary>
            Initializes a new instance of the FlashCapture class.
            </summary>
            <param name="formSize">A <see cref="T:System.Drawing.Size"/> with the new size for this dialog.</param>
            <param name="filename">A <see cref="T:System.String"/> with the movie file to load (including path).</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashCapture.FlashCapture_Load(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Form.Load"/> event handler. 
            Loads the movie into the com object.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashCapture.FlashCapture_Shown(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Form.Shown"/> event handler. 
            Makes a screenshot of the flash movie in its initial state.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="F:VectorGraphics.Controls.Flash.FlashCapture.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashCapture.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VectorGraphics.Controls.Flash.FlashCapture.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.FlashCapture.FlashObject">
            <summary>
            Gets the Shockwave flash object on the form.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.Flash.FlashCapture.ScreenShot">
            <summary>
            Gets the screenshot of the flash movie
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Images">
            <summary>
            A class for creating gray scale images and other image related stuff.
            </summary>
            <remarks>Some of the code in this class 
            SetGrayscalePalette and CreateGrayscaleImage
            is a part from the great:
            <para></para>
            AForge Image Processing Library
            <para></para>
            Copyright © Andrew Kirillov, 2005-2006
            andrew.kirillov@gmail.com.
            <para></para>
            Some others are adopted from the MSDN VB.NET GDI+ Images Sample</remarks>
        </member>
        <member name="F:VectorGraphics.Tools.Images.RGBR">
            <summary>
            Index of red component
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Images.RGBG">
            <summary>
            Index of green component
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Images.RGBB">
            <summary>
            Index of blue component
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Images.BIRGB">
            <summary>
            Specifies the type of compression for a compressed 
            bottom-up bitmap (top-down DIBs cannot be compressed).
            In this case 0 means uncompressed.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Images.DIBRGBCOLORS">
            <summary>
            Type of data contained in the
            bmiColors array member of the BITMAPINFO
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.Images.ThumbnailCallback">
            <summary>
            Thumbnail creation callback.
            Currently not used
            </summary>
            <returns>always false</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.CreateNotFoundImage(System.Drawing.Size,System.String)">
            <summary>
            This method creates a <see cref="T:System.Drawing.Bitmap"/> of given size 
            with the custom background color.
            </summary>
            <param name="size">The <see cref="T:System.Drawing.Size"/> of the image.</param>
            <param name="whatWasNotFound">A <see cref="T:System.String"/> indicating the thing that was not found.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of given size 
            with gray background color.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.CreateRecordInstructionImage(System.Int32,System.Int32)">
            <summary>
            This method creates a <see cref="T:System.Drawing.Bitmap"/> of given size 
            with recording instructions.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of given size 
            with recording instructions.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.GrayBackground(System.Drawing.Image)">
            <summary>
            Returns a grayscaled <see cref="T:System.Drawing.Bitmap"/> of given color image.
            </summary>
            <param name="original">A colored <see cref="T:System.Drawing.Image"/> to convert to grayscale.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> with a grayscale image of the given image.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.SetGrayscalePalette(System.Drawing.Bitmap)">
            <summary>
            Set palette of the image to grayscale.
            </summary>
            <param name="image">Image to convert.</param>
            <remarks>The method initializes palette of
            <see cref="T:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>
            image with 256 gradients of gray color.</remarks>
        </member>
        <member name="M:VectorGraphics.Tools.Images.ConvertToGrayScale(System.Drawing.Image,System.Single)">
            <summary>
            Converts the given image to grayscale by using a <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.
            </summary>
            <param name="currentImage">image to convert to grayscale</param>
            <param name="brightness">A <see cref="T:System.Single"/> with the 
            absolute brightness value. Can be from 0f up to +1.0f.</param>
            <returns><strong>True</strong> if succeeded, otherwise <strong>false</strong>.</returns>
            <exception cref="T:System.ArgumentException">Thrown, when brightness value is less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown, when image is null.</exception>
        </member>
        <member name="M:VectorGraphics.Tools.Images.AdjustBrightness(System.Drawing.Image,System.Single)">
            <summary>
            Adjust given images brightness by given value with 
            a color matrix.
            </summary>
            <param name="currentImage">image to adjust</param>
            <param name="brightness">A <see cref="T:System.Single"/> with the 
            relative brightness value. Can be from -1.0f um to +1.0f.</param>
            <returns><strong>True</strong> if succeeded, otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.CreateGrayscaleImage(System.Int32,System.Int32)">
            <summary>
            Create and initialize grayscale image. 
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <returns>Returns the created grayscale image</returns>
            <remarks>The methods create new grayscale image and initializes its palette.
            Grayscale image is represented as <see cref="T:System.Drawing.Imaging.PixelFormat"/>
            Format8bppIndexed image with palette initialized
            to 256 gradients of gray color</remarks>
        </member>
        <member name="M:VectorGraphics.Tools.Images.CopyToBpp(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Copies a bitmap into a 1bpp/8bpp bitmap of the same dimensions, very fast.
            </summary>
            <param name="bitmap">A <see cref="T:System.Drawing.Bitmap"/> with the output bitmap.</param>
            <param name="bitPerPixel">1 or 8, target bits per pixel.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> with a converted copy of the bitmap.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.ExportImageToFile(System.Drawing.Image)">
            <summary>
            Saves given image into a file. Filename is requested via <see cref="T:System.Windows.Forms.SaveFileDialog"/>.
            </summary>
            <param name="image">Image to save to disk</param>
            <returns><strong>True</strong> if succeeded, otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.RescaleImage(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Rescale the given image.
            </summary>
            <param name="sourceData">Source image data</param>
            <param name="destinationData">Destination image data</param>
        </member>
        <member name="M:VectorGraphics.Tools.Images.RescaleImage(System.Drawing.Size,System.Drawing.Bitmap,System.Boolean)">
            <summary>
            This static method returns a bitmap that is a scaled version of
            the given bitmap to the newly given size.
            </summary>
            <param name="newSize">A <see cref="T:System.Drawing.Size"/> for the scaled bitmap.</param>
            <param name="srcBitmap">The source <see cref="T:System.Drawing.Bitmap"/> to scale.</param>
            <param name="inHighQuality"><strong>True</strong>, if rescaling should
            be performed in high quality (lasts longer).</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> with the rescaled image.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.GetImageOfFile(System.String)">
            <summary>
            This method returns a bitmap copy of the image in the given file.
            It is used to avoid the blocking of the png files when shown in
            the listview.
            </summary>
            <param name="filename">A <see cref="T:System.String"/> with the filename with path.</param>
            <returns>An <see cref="T:System.Drawing.Image"/> with a <see cref="T:System.Drawing.Bitmap"/> that 
            is the copy of the given image file.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.DrawAdjustedImage(System.Drawing.Image,System.Drawing.Imaging.ColorMatrix)">
            <summary>
            Applies a color Matrix to a given Image.
            E.g. transforms image to grayscale.
            </summary>
            <param name="currentImage">image to apply color matrix to</param>
            <param name="colorMatrix">color matrix to apply</param>
            <returns><strong>True</strong> if succeeded, otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.MAKERGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method creates a <see cref="T:System.UInt32"/> representation of the
            given r,g,b values.
            </summary>
            <param name="r">A <see cref="T:System.Int32"/> with the red portion.</param>
            <param name="g">A <see cref="T:System.Int32"/> with the green portion.</param>
            <param name="b">A <see cref="T:System.Int32"/> with the blue portion.</param>
            <returns>a <see cref="T:System.UInt32"/> representation of the
            given r,g,b values.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Images.BiCubicKernel(System.Double)">
            <summary>
            This method calculates the bicubic kernel for the given value.
            </summary>
            <param name="x">The X value</param>
            <returns>Bicubic coefficient</returns>
        </member>
        <member name="T:VectorGraphics.Controls.RichEdit50Opaque">
            <summary>
            Derived from <see cref="T:VectorGraphics.Controls.RichEdit50"/>.
            This is the opaque version of the control.
            </summary>
        </member>
        <member name="M:VectorGraphics.Controls.RichEdit50Opaque.#ctor">
            <summary>
            Initializes a new instance of the RichEdit50Opaque class.
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.CustomEventArgs.ProgressEventHandler">
            <summary>
            Delegate. Handles progress event
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs"/> with progress data.</param>
        </member>
        <member name="T:VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs">
            <summary>
            Derived from <see cref="T:System.EventArgs"/>
            Class that contains the data for the progress event. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs.isFinished">
            <summary>
            Flag. True, if backgroundworker has finished work.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs.percentComplete">
            <summary>
            Percentage of task completition.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs.currentMillisecond">
            <summary>
            string containing current timing position in ms.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ProgressEventArgs class.
            </summary>
            <param name="newIsFinished">Flag. True, if backgroundworker has finished work.</param>
            <param name="newPercentComplete">Percentage of task completition.</param>
            <param name="newCurrentMillisecond">An <see cref="T:System.Int32"/> 
            containing the current timing position in ms.</param>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs.ProgressInPercent">
            <summary>
            Gets progress value in percent. 
            </summary>
            <value>An <see cref="T:System.Int32"/> with the total
            percentage of finished rows when the progress event 
            is generated.</value>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs.Finished">
            <summary>
            Gets a value indicating whether the background worker 
            has finished when the progress event is generated
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            when the background worker has finished when the progress event is generated,
            otherwise <strong>false</strong>.
            </value>
        </member>
        <member name="P:VectorGraphics.Tools.CustomEventArgs.ProgressEventArgs.Millisecond">
            <summary>
            Gets  a string containing current timing position in ms.
            </summary>
            <value>An <see cref="T:System.Int32"/> with the
            timing position in ms when the progress event 
            is generated.</value>
        </member>
        <member name="T:VectorGraphics.Tools.CustomTypeConverter.VGElementCollectionConverter">
            <summary>
            Derived from <see cref="T:System.ComponentModel.ExpandableObjectConverter"/>.
            Provides a type converter to convert <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> objects
            to strings.
            </summary>
            <remarks>It is implemented to have the human readable description
            "Vector graphic elements" for the <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> 
            at the right side of the 
            <see cref="T:System.Windows.Forms.PropertyGrid"/> row.</remarks>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.VGElementCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that 
            provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If a null reference 
            is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the 
            <strong>value</strong> parameter to.</param>
            <returns>An <strong>Object</strong> that represents the converted value.
            In this implementation that is just a list description.</returns>
        </member>
        <member name="T:VectorGraphics.Controls.RichEdit50Transparent">
            <summary>
            Derived from <see cref="T:VectorGraphics.Controls.RichEdit50"/>.
            This is the transparent version of the control by setting the
            create params property.
            </summary>
            <remarks>Transparency flag can be set, because it is
            the (new) version of the RichTextBox used by Wordpad, not the one from the .Net2 framwork,
            which does not support transparency.</remarks>
        </member>
        <member name="M:VectorGraphics.Controls.RichEdit50Transparent.#ctor">
            <summary>
            Initializes a new instance of the RichEdit50Transparent class.
            </summary>
        </member>
        <member name="P:VectorGraphics.Controls.RichEdit50Transparent.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            It sets the class name to the modern rich text version and
            adds the transparency style.
            </summary>
            <value>A <see cref="P:VectorGraphics.Controls.RichEdit50Transparent.CreateParams"/> that contains the required creation 
            parameters when the handle to the control is created.</value>
        </member>
        <member name="T:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor">
            <summary>
            Derived from <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            This implementation ensures a correct expandable
            property list for the <see cref="T:System.Windows.Forms.PropertyGrid"/> of
            a <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> of <see cref="T:VectorGraphics.Elements.VGElement"/>s.
            </summary>
            <remarks>It is used in the <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/>
            <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> implementation.</remarks>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.collection">
            <summary>
            Saves the current <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/>
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.index">
            <summary>
            Saves the current index of the collection.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.#ctor(VectorGraphics.Elements.ElementCollections.VGElementCollection,System.Int32)">
            <summary>
            Initializes a new instance of the VGElementCollectionPropertyDescriptor class.
            </summary>
            <param name="collection">The <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/>
            for this <see cref="T:System.ComponentModel.PropertyDescriptor"/></param>
            <param name="index">The index to use.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)"/>.
            Returns whether resetting an object changes its value. 
            This implementation returns always true.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns><strong>True</strong> if resetting the component changes 
            its value; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>.
            Gets the current value of the property on a component. 
            This implementation returns the current <see cref="T:VectorGraphics.Elements.VGElement"/>.
            </summary>
            <param name="component">The component with the property for 
            which to retrieve the value.</param>
            <returns>A <see cref="T:System.Object"/> with a <see cref="T:VectorGraphics.Elements.VGElement"/>
            value of a property for the given component.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>.
            Resets the value for this property of the component to the default value. 
            This implementation returns the current <see cref="T:VectorGraphics.Elements.VGElement"/>.
            </summary>
            <param name="component">The component with the property value that 
            is to be reset to the default value.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>.
            Determines a value indicating whether the value 
            of this property needs to be persisted. 
            This implementation returns true.
            </summary>
            <param name="component">The component with the property to 
            be examined for persistence.</param>
            <returns><strong>True</strong> if resetting the property 
            should be persisted; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Overridden <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>.
            Sets the value of the component to a different value. 
            </summary>
            <param name="component">The component with the property 
            value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.Attributes">
            <summary>
            Gets the collection of attributes for this member.
            Overridden <see cref="P:System.ComponentModel.MemberDescriptor.Attributes"/>.
            This implementation returns an empty <see cref="T:System.ComponentModel.AttributeCollection"/>.
            </summary>
            <value>An <see cref="T:System.ComponentModel.AttributeCollection"/> that provides the 
            attributes for  this member, or an empty collection if there 
            are no attributes in the <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray"/>. </value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to. 
            Overridden <see cref="P:System.ComponentModel.PropertyDescriptor.ComponentType"/>.
            This implementation returns a <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> type.
            </summary>
            <value>A <see cref="T:System.Type"/> that represents the type of component this property 
            is bound to. When the GetValue or SetValue methods are invoked, 
            the object specified might be an instance of this type. </value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.DisplayName">
            <summary>
            Gets the name that can be displayed in a window, 
            such as a Properties window. 
            Overridden <see cref="P:System.ComponentModel.MemberDescriptor.DisplayName"/>.
            This implementation returns the string representation of the current
            VGElement.
            </summary>
            <remarks>This property is the description at the left side of the row
            of the property grid.</remarks>
            <value>A <see cref="T:System.String"/> with the name to display for the member. </value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.Description">
            <summary>
            Gets the description of the member, as specified in the 
            <see cref="T:System.ComponentModel.DescriptionAttribute"/>. 
            Overridden <see cref="P:System.ComponentModel.MemberDescriptor.Description"/>.
            This implementation returns the string representation of the current
            <see cref="T:VectorGraphics.Elements.VGElement"/>.
            </summary>
            <remarks>This property is the description at the bottom
            of the property grid.</remarks>
            <value>The description of the member. This is the string
            representation of the current
            <see cref="T:VectorGraphics.Elements.VGElement"/></value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only.
            Overridden <see cref="P:System.ComponentModel.PropertyDescriptor.IsReadOnly"/>.
            This implementation returns always false, which means,
            this is not read only.
            </summary>
            <value><strong>True</strong> if the property is read-only; 
            otherwise, <strong>false</strong>.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.Name">
            <summary>
            Gets the name of the member.
            Overridden <see cref="P:System.ComponentModel.MemberDescriptor.Name"/>.
            This implementation returns the number of the current 
            collection member. (e.g "#1").
            </summary>
            <value>A <see cref="T:System.String"/> with the name of the member.</value>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.VGElementCollectionPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            Overridden <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/>.
            This implementation returns the type of
            <see cref="T:VectorGraphics.Elements.VGElement"/>.
            </summary>
            <value>A <see cref="T:System.Type"/> that represents the type of the property. </value>
        </member>
        <member name="T:VectorGraphics.Elements.ElementCollections.VGElementCollection">
            <summary>
            Derived from <see cref="T:System.Collections.CollectionBase"/>, implements 
            <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> to provide custom type information.
            Inheriting from CollectionBase provides basic collection behavior. 
            Only, methods for adding, removing and querying items are be added. 
            </summary>
            <remarks>
            This is from http://www.codeproject.com/KB/tabs/customizingcollectiondata.aspx
            Customized display of collection data in a PropertyGrid By Gerd Klevesaat
            Though the interface has a lot of methods, 
            most of the methods are trivial to implement because we 
            can delegate the call to a corresponding method of the static 
            TypeDescriptor object to provide standard behavior.
            The only methods we implement in a custom way are the 
            overloaded GetProperties()-methods. These are used to 
            return a collection of PropertyDescriptor objects used to 
            describe the properties, in a custom way. This property descriptor 
            objects will be used by the PropertyGrid later.</remarks>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.#ctor">
            <summary>
            Initializes a new instance of the VGElementCollection class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.ToTail(VectorGraphics.Elements.VGElement)">
            <summary>
            Moves gives object to the end of the collection.
            </summary>
            <param name="element">The <see cref="T:VectorGraphics.Elements.VGElement"/> to be 
            moved to the end of the collection.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.ToHead(VectorGraphics.Elements.VGElement)">
            <summary>
            Moves gives object to the beginning of the collection.
            </summary>
            <param name="element">The <see cref="T:VectorGraphics.Elements.VGElement"/> to be 
            moved to the beginning of the collection.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.MoveDown(VectorGraphics.Elements.VGElement)">
            <summary>
            Moves gives object one step in direction beginning of the collection.
            </summary>
            <param name="element">The <see cref="T:VectorGraphics.Elements.VGElement"/> to be 
            moved in direction beginning of the collection.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.MoveUp(VectorGraphics.Elements.VGElement)">
            <summary>
            Moves gives object one step in direction end of the collection.
            </summary>
            <param name="element">The <see cref="T:VectorGraphics.Elements.VGElement"/> to be 
            moved in direction end of the collection.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.Add(VectorGraphics.Elements.VGElement)">
            <summary>
            Adds an object to the end of the collection.
            </summary>
            <param name="element">The <see cref="T:VectorGraphics.Elements.VGElement"/> to be 
            added to the end of the collection.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.AddRange(VectorGraphics.Elements.ElementCollections.VGElementCollection)">
            <summary>
            Adds a range of <see cref="T:VectorGraphics.Elements.VGElement"/>s to the collection.
            </summary>
            <param name="elementCollection">The <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> to be 
            added to the end of the collection.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.Contains(VectorGraphics.Elements.VGElement)">
            <summary>
            Determines whether the collection contains a specific element.
            </summary>
            <param name="element">The Object to locate in the collection.</param>
            <returns><strong>True</strong> if the collection
            contains the specified value; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.Remove(VectorGraphics.Elements.VGElement)">
            <summary>
            Removes the first occurrence of a specific
            <see cref="T:VectorGraphics.Elements.VGElement"/> from the collection. 
            </summary>
            <param name="element">The <see cref="T:VectorGraphics.Elements.VGElement"/>
            to remove from the collection.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.Remove(System.String)">
            <summary>
            Removes all occurrences of <see cref="T:VectorGraphics.Elements.VGElement"/>s
            with the given name from the collection. 
            </summary>
            <param name="name">The <see cref="T:System.String"/> with the name of the elements
            to remove from the collection.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.Contains(System.String)">
            <summary>
            Returns <strong>true</strong>, if an element with the given
            name is member of the collection, otherwise <strong>false</strong>.
            </summary>
            <param name="name">The <see cref="T:System.String"/> with the name of the element
            to search for.</param>
            <returns><strong>True</strong>, if an element with the given
            name is member of the collection, otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.RemoveAll(VectorGraphics.Elements.ElementCollections.VGElementCollection)">
            <summary>
            Removes the first occurrence of a specific
            <see cref="T:VectorGraphics.Elements.VGElement"/> from the collection. 
            </summary>
            <param name="list">The <see cref="T:VectorGraphics.Elements.VGElement"/>
            to remove from the collection.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>The class name of the object, or a null 
            reference if the class does not have a name.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetAttributes">
            <summary>
            Returns a collection of custom attributes 
            for this instance of a component. 
            </summary>
            <returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> containing 
            the attributes for this object. </returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetComponentName">
            <summary>
            Returns the name of this instance of a component. 
            </summary>
            <returns>The name of the object, or a null reference 
            if the object does not have a name.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetConverter">
            <summary>
            Returns a type converter for this instance of a component. 
            </summary>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter 
            for this object, or a null reference 
            if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component. 
            </summary>
            <returns>An EventDescriptor that represents the default 
            event for this object, or a null reference 
            if this object does not have events. </returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component. 
            </summary>
            <returns>A PropertyDescriptor that represents the 
            default property for this object, or a null reference 
            if this object does not have properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component. 
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the 
            editor for this object.</param>
            <returns>An Object of the specified type that is the editor for this 
            object, or a null reference
            if the editor cannot be found.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component
            using the specified attribute array as a filter. 
            </summary>
            <param name="attributes">An array of type 
            <see cref="T:System.Attribute"/> that is used as a filter. </param>
            <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the 
            filtered events for this component instance. </returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetEvents">
            <summary>
            Returns the events for this instance of a component. 
            </summary>
            <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the 
            events for this component instance. </returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property 
            described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents 
            the property whose owner is to be found.</param>
            <returns>An Object that represents the owner of the specified property.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetProperties(System.Attribute[])">
            <summary>
            Called to get the properties of this type. Returns properties with certain
            attributes. This restriction is not implemented here.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> 
            that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the 
            filtered properties for this component instance. </returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetProperties">
            <summary>
            Called to get the properties of this type.
            </summary>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that 
            represents the properties for this component instance.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.FindAllGroupMembers(VectorGraphics.Elements.VGStyleGroup)">
            <summary>
            Searches the collection list for all members with
            the given group and returns this items in a new
            <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/>
            </summary>
            <param name="searchGroup">The <see cref="T:VectorGraphics.Elements.VGStyleGroup"/>
            that the elements should match.</param>
            <returns>A <see cref="T:VectorGraphics.Elements.ElementCollections.VGElementCollection"/> with the 
            members of the list that are in the given search group.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.GetElementByName(System.String)">
            <summary>
            Gets the first element in the baselist with the given name
            or null, if no one is found.
            </summary>
            <param name="name">A <see cref="T:System.String"/> with the name of
            an element to search for.</param>
            <returns>The first <see cref="T:VectorGraphics.Elements.VGElement"/> with this name,
            or <strong>null</strong> if none is found.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.OnClear">
            <summary>
            Overridden. Performs additional custom processes when clearing 
            the contents of the CollectionBase instance.
            Disposes the <see cref="T:VectorGraphics.Elements.VGElement"/>s before clearing the list.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.ElementCollections.VGElementCollection.Dispose">
            <summary>
            Disposes the elements in this list and clears the list afterwards.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.ElementCollections.VGElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets <see cref="T:VectorGraphics.Elements.VGElement"/> at the
            given index.
            </summary>
            <param name="index">An <see cref="T:System.Int32"/> with the elements index.</param>
            <returns>A <see cref="T:VectorGraphics.Elements.VGElement"/> at the given Index.</returns>
        </member>
        <member name="T:VectorGraphics.Elements.VGCursor">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            A serializable class that is a vector graphics cursor,
            that can have standard mouse cursor shape or be a sharp,
            circle or rectangle.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.arrowBitmap">
            <summary>
            Stores a bitmap of the <see cref="P:System.Windows.Forms.Cursors.Arrow"/> in its original size.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.crossBitmap">
            <summary>
            Stores a bitmap of the <see cref="P:System.Windows.Forms.Cursors.Cross"/> in its original size.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.handBitmap">
            <summary>
            Stores a bitmap of the <see cref="P:System.Windows.Forms.Cursors.Hand"/> in its original size.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.helpBitmap">
            <summary>
            Stores a bitmap of the <see cref="P:System.Windows.Forms.Cursors.Help"/> in its original size.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.sizeAllBitmap">
            <summary>
            Stores a bitmap of the <see cref="P:System.Windows.Forms.Cursors.SizeAll"/> in its original size.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.upArrowBitmap">
            <summary>
            Stores a bitmap of the <see cref="P:System.Windows.Forms.Cursors.UpArrow"/> in its original size.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.waitCursorBitmap">
            <summary>
            Stores a bitmap of the <see cref="P:System.Windows.Forms.Cursors.WaitCursor"/> in its original size.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.mouseCursorBitmap">
            <summary>
            Stores a bitmap of the mouse button cursor in its original size.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.leftMouseCursorBitmap">
            <summary>
            Stores a bitmap of the left mouse button cursor in its original size.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.rightMouseCursorBitmap">
            <summary>
            Stores a bitmap of the right mouse button cursor in its original size.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.cursorType">
            <summary>
            Saves the cursor to use.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.#cctor">
            <summary>
            Initializes static members of the VGCursor class
            which are the static standard cursor bitmaps.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.#ctor(System.Drawing.Pen,VectorGraphics.Elements.VGCursor.DrawingCursors,System.Single,VectorGraphics.Elements.VGStyleGroup)">
            <summary>
            Initializes a new instance of the VGCursor class.
            </summary>
            <param name="newPen">A <see cref="T:System.Drawing.Pen"/> for the edges.</param>
            <param name="newCursorType">A <see cref="T:VectorGraphics.Elements.VGCursor.DrawingCursors"/> to define the type of the cursor.</param>
            <param name="newSize">A <see cref="T:System.Single"/> with the cursors size</param>
            <param name="newStyleGroup">A <see cref="T:VectorGraphics.Elements.VGStyleGroup"/> with the elements category</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.#ctor(System.Drawing.Pen,System.Drawing.Brush,VectorGraphics.Elements.VGCursor.DrawingCursors,System.Single,VectorGraphics.Elements.VGStyleGroup)">
            <summary>
            Initializes a new instance of the VGCursor class.
            </summary>
            <param name="newPen">A <see cref="T:System.Drawing.Pen"/> for the edges.</param>
            <param name="newBrush">A <see cref="T:System.Drawing.Brush"/> for the fills.<remarks>Currently used only for Mouse button fills.</remarks></param>
            <param name="newCursorType">A <see cref="T:VectorGraphics.Elements.VGCursor.DrawingCursors"/> to define the type of the cursor.</param>
            <param name="newSize">A <see cref="T:System.Single"/> with the cursors size</param>
            <param name="newStyleGroup">A <see cref="T:VectorGraphics.Elements.VGStyleGroup"/> with the elements category</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.#ctor">
            <summary>
            Prevents a default instance of the VGCursor class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.#ctor(VectorGraphics.Elements.VGCursor)">
            <summary>
            Initializes a new instance of the VGCursor class.
            Clone Constructor. Creates new cursor element that is
            identical to the given cursor.
            </summary>
            <param name="cursor">VGCursor to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/> method. 
            Draws the cursor to the given graphics context.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.Reset">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Reset"/> method.
            Reset the current cursor element to
            default value, which is an arrow cursor.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGCursor"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:VectorGraphics.Elements.VGCursor"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGCursor"/> properties as a short human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGCursor"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/> method. 
            Creates a excact copy of given cursor.
            </summary>
            <returns>Excact copy of this cursor</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.CreateCursorBitmaps">
            <summary>
            Creates transparent bitmaps of the standard cursors.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.DrawMouseCursor(System.Drawing.Graphics,System.Windows.Forms.MouseButtons,System.Drawing.RectangleF)">
            <summary>
            This method draws a custom drawn mouse cursor with pressed button in red.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to draw to.</param>
            <param name="mouseButtons">The <see cref="T:System.Windows.Forms.MouseButtons"/> that is pressed.</param>
            <param name="bounds">The <see cref="T:System.Drawing.RectangleF"/> with the bounds to draw the cursor in.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGCursor.GetOffsetBounds(System.Windows.Forms.Cursor)">
            <summary>
            Calculates the moved bounds when taking the hot spot
            of the cursor into account.
            </summary>
            <param name="cursor">The <see cref="T:System.Windows.Forms.Cursor"/> with hot spot to calculate moved bounds for.</param>
            <returns>A <see cref="T:System.Drawing.RectangleF"/> with the moved bounds.</returns>
        </member>
        <member name="P:VectorGraphics.Elements.VGCursor.CursorType">
            <summary>
            Gets or sets the type of the cursor to draw.
            </summary>
            <value>A <see cref="T:VectorGraphics.Elements.VGCursor.DrawingCursors"/> with the type of the cursor.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGCursor.BigBounds">
            <summary>
            Gets the bounding rectangle including the newPen width.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGCursor.DrawingCursors">
            <summary>
            The list of cursor types that can be drawn.
            </summary>
            <remarks>A lot is part of the <see cref="T:System.Windows.Forms.Cursors"/> list,
            the others are custom cursors.</remarks>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.Arrow">
            <summary>
            The arrow cursor.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.Cross">
            <summary>
            The crosshair cursor
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.Hand">
            <summary>
            The hand cursor, typically used when hovering over a Web link.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.Help">
            <summary>
            The Help cursor, which is a combination of an arrow and a question mark.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.SizeAll">
            <summary>
            The four-headed sizing cursor, which consists of four joined arrows that point north, south, east, and west.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.UpArrow">
            <summary>
            The up arrow cursor, typically used to identify an insertion point.
            </summary>     
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.WaitCursor">
            <summary>
            The wait cursor, typically an hourglass shape.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.Circle">
            <summary>
            A circle shaped cursor.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.Sharp">
            <summary>
            A sharp shaped cursor.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.Square">
            <summary>
            A square shaped cursor.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.MouseLeft">
            <summary>
            A mouse with red left button.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.MouseRight">
            <summary>
            A mouse with red right button.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGCursor.DrawingCursors.Mouse">
            <summary>
            A mouse shaped cursor.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.ShapeDrawAction">
            <summary>
            This enumeration specifies what to draw from
            a vector graphic element: edge, fill, name or all.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ShapeDrawAction.None">
            <summary>
            Nothing to draw...
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ShapeDrawAction.Edge">
            <summary>
            Draw only edges of graphic object
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ShapeDrawAction.Fill">
            <summary>
            Only fill the interior of the object with defined brush.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ShapeDrawAction.EdgeAndFill">
            <summary>
            Draw both edge and fill.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ShapeDrawAction.Name">
            <summary>
            Draw the name of the element at the center.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ShapeDrawAction.NameAndEdge">
            <summary>
            Draw the name and the edge
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ShapeDrawAction.NameAndFill">
            <summary>
            Draw the name and the fill
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.ShapeDrawAction.NameEdgeFill">
            <summary>
            Draw the name the edge and the fill
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter">
            <summary>
            A class with a set of custom object to string (and back) converters.
            These are not implemented by the NET Framework.
            For example a <see cref="T:System.Drawing.PointF"/> can be converted into a <see cref="T:System.String"/> and back.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.StringToPointFList(System.String)">
            <summary>
            Returns <see cref="T:System.Collections.Generic.List`1"/> from the given formatted string point list.
            </summary>
            <param name="strPtList">A string representation of the point list.
            In the form "P1:(XXX.XX;YYY.YY) P2:(XXX.XX;YYY.YY) ...".</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with the point list.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.PointFListToString(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Returns a unique string representation for a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="lstPoints">A <see cref="T:System.Collections.Generic.List`1"/> to convert.</param>
            <returns>The <see cref="T:System.String"/> in the form "P1:(XX.XX;YY.YY) P2:(..."</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.StringToGraphicsPath(System.String)">
            <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> from the given formatted string.
            </summary>
            <param name="strGraphicsPath">A string representation of the graphics path.
            In the form "GraphicsPath-SPLIT-PointFList-SPLIT-PathTypes".</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> with the graphics path.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.GraphicsPathToString(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Returns a unique string representation for a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to convert.</param>
            <returns>The <see cref="T:System.String"/> in the form "GraphicsPath-SPLIT-PointFList-SPLIT-PathTypes"</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.ColorToHtmlAlpha(System.Drawing.Color)">
            <summary>
            Returns a unique string representation for an ARGB Color value.
            </summary>
            <param name="c">The <see cref="T:System.Drawing.Color"/> to transform.</param>
            <returns>The <see cref="T:System.String"/> in the form "AARRGGBB"</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.HtmlAlphaToColor(System.String)">
            <summary>
            Returns ARGB <see cref="T:System.Drawing.Color"/> structure from given string.
            </summary>
            <param name="str">A <see cref="T:System.String"/> in the form "AARRGGBB"</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structur.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.BrushToString(System.Drawing.Brush)">
            <summary>
            Returns unique string representation of a Brush structure.
            </summary>
            <remarks>Currently only <see cref="T:System.Drawing.SolidBrush"/>, <see cref="T:System.Drawing.TextureBrush"/>,
            or <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> are supported.</remarks>
            <param name="brush">Brush to convert.</param>
            <returns>A <see cref="T:System.String"/> representation of the given
            <see cref="T:System.Drawing.SolidBrush"/>, <see cref="T:System.Drawing.TextureBrush"/>,
            or <see cref="T:System.Drawing.Drawing2D.HatchBrush"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.StringToBrush(System.String)">
            <summary>
            Returns Brush representation of given Brush string,
            if the brush was a <see cref="T:System.Drawing.SolidBrush"/>, <see cref="T:System.Drawing.TextureBrush"/>,
            or <see cref="T:System.Drawing.Drawing2D.HatchBrush"/>.
            </summary>
            <remarks>All other Brushtypes are currently not serializable.</remarks>
            <param name="str">string with brush description.</param>
            <returns>A <see cref="T:System.Drawing.SolidBrush"/>, <see cref="T:System.Drawing.TextureBrush"/>,
            or <see cref="T:System.Drawing.Drawing2D.HatchBrush"/> or null if string is empty.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.StringToBrushOld(System.String)">
            <summary>
            Obsolete. Returns Brush representation of given Brush string,
            if the brush was a SolidBrush.
            </summary>
            <remarks>This method is only for compatibility reasons.</remarks>
            <param name="str">A <see cref="T:System.String"/> with the brush representation
            in OGAMA 1.0 format.</param>
            <returns>The converted <see cref="T:System.Drawing.Brush"/></returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.PenToString(System.Drawing.Pen)">
            <summary>
            Returns unique string representation of a Pen structure.
            </summary>
            <param name="newPen">The <see cref="T:System.Drawing.Pen"/> to convert.</param>
            <returns>A <see cref="T:System.String"/> with Color, Width, DashStyle and arrows.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.StringToPen(System.String)">
            <summary>
            Returns Pen representation of given pen string .
            </summary>
            <param name="str">A <see cref="T:System.String"/> with Color, Width, DashStyle and arrows.</param>
            <returns>The converted <see cref="T:System.Drawing.Pen"/></returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.StringToPenOld(System.String)">
            <summary>
            Obsolete. Returns Pen representation of given pen string 
            </summary>
            <remarks>This method is only for compatibility reasons.</remarks>
            <param name="str">A <see cref="T:System.String"/> representing the pen in Ogama 1.0 versions.</param>
            <returns>The converted <see cref="T:System.Drawing.Pen"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.PointToString(System.Drawing.Point)">
            <summary>
            Returns unique string representation of a point structure,
            of type "(PosX,PosY)"
            </summary>
            <param name="pt">The <see cref="T:System.Drawing.Point"/> to convert.</param>
            <returns>A <see cref="T:System.String"/> in the format "(PosX,PosY)"</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.StringToPoint(System.String)">
            <summary>
            Returns point representation of given point string of
            the form "(PosX,PosY)"
            </summary>
            <param name="str">A <see cref="T:System.String"/> in the format "(PosX,PosY)"</param>
            <returns>The converted <see cref="T:System.Drawing.Point"/></returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.StringToFontOld(System.String)">
            <summary>
            Obsolete. Returns a <see cref="T:System.Drawing.Font"/> from the given string format.
            </summary>
            <remarks>This method is only for compatibility reasons.</remarks>
            <param name="formattedFont">A string representation of a font to retrieve.</param>
            <returns>A <see cref="T:System.Drawing.Font"/> which represents the given string.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.CustomTypeConverter.ObjectStringConverter.StringToColor(System.String)">
            <summary>
            Returns <see cref="T:System.Drawing.Color"/> value from given RGB string.
            </summary>
            <param name="formattedColor">A <see cref="T:System.String"/> with the string formatted color
            using <see cref="M:System.Drawing.Color.ToString"/> method. </param>
            <returns>A <see cref="T:System.Drawing.Color"/> representing the string.</returns>
        </member>
        <member name="T:VectorGraphics.Elements.VGEllipse">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            An xml serializable class that is a vector graphics ellipse,
            that can have a bounding line, a fill and a name.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGEllipse.inverted">
            <summary>
            This indicates whether this shape should be drawn inverted,
            that means all outside the bounds of the ellipse is filled with the
            brush.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">bounding rectangle</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newBounds">bounding rectangle</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor">
            <summary>
            Prevents a default instance of the VGEllipse class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.#ctor(VectorGraphics.Elements.VGEllipse)">
            <summary>
            Initializes a new instance of the VGEllipse class.
            Clone Constructor. Creates new ellipse element that is
            identical to the given VGEllipse.
            </summary>
            <param name="ellipse"><see cref="T:VectorGraphics.Elements.VGEllipse"/> to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/>.  
            Draws the ellipse to the given graphics context.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.Contains(System.Drawing.PointF)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Contains(System.Drawing.PointF)"/>. 
            Detects if given point is in ellipse region.
            </summary>
            <param name="pt">Check Point</param>
            <returns><strong>True</strong> if point is in ellipse, otherwise <strong>false</strong></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.Contains(System.Drawing.PointF,System.Int32)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Contains(System.Drawing.PointF,System.Int32)"/>. 
            Detects if given point is in element region widened by the tolerance value.
            </summary>
            <param name="pt">Point to check.</param>
            <param name="tolerance">An <see cref="T:System.Int32"/> tolerance value for 
            widening areas of interest to get a better hit rate in pixel.</param>
            <returns><strong>True</strong> if point is in region, otherwise <strong>false</strong></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGEllipse"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGEllipse"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGEllipse"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGEllipse"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGEllipse.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/> method. 
            Creates a excact copy of given ellipse
            </summary>
            <returns>Excact copy of this ellipse</returns>
        </member>
        <member name="P:VectorGraphics.Elements.VGEllipse.Inverted">
            <summary>
            Gets or sets a value indicating whether this ellipse should be drawn
            inverted, that is the fill fills the region outside this ellipse.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.GrabHandle">
            <summary>
            This class <strong>GrabHandle</strong> encapsulates a single grab handle,
            which is a rectangular shape at the corners of a vector graphic element,
            that indicates the possibility of moving its corners.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.handleSize">
            <summary>
            Size of grab handles when in edit mode. Used for resizing shapes.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.handlePosition">
            <summary>
            Saves the <see cref="T:VectorGraphics.Elements.GrabHandle.HandlePosition"/> of the grab handle,
            resp. its position in the owning shape.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.size">
            <summary>
            Saves the size of the grab handle.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.location">
            <summary>
            Saves the location of the grab handle in experiment coordinates.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.cursor">
            <summary>
            Saves the cursor, that will be shown when the mouse is over this grab handle.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.GrabHandle.#ctor(System.Drawing.Point,System.Windows.Forms.Cursor,VectorGraphics.Elements.GrabHandle.HandlePosition)">
            <summary>
            Initializes a new instance of the GrabHandle class.
            </summary>
            <param name="newLocation">new grab handle location</param>
            <param name="newCursor">new grab handle mouse over cursor</param>
            <param name="newHandlePosition">Position indicator</param>
        </member>
        <member name="M:VectorGraphics.Elements.GrabHandle.#ctor(System.Drawing.PointF,System.Windows.Forms.Cursor,VectorGraphics.Elements.GrabHandle.HandlePosition)">
            <summary>
            Initializes a new instance of the GrabHandle class.
            </summary>
            <param name="newLocation">new grab handle location</param>
            <param name="newCursor">new grab handle mouse over cursor</param>
            <param name="newHandlePosition">Position indicator</param>
        </member>
        <member name="M:VectorGraphics.Elements.GrabHandle.#ctor">
            <summary>
            Prevents a default instance of the GrabHandle class from being created.
            Parameterless Constructor. Needed for Serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.GrabHandle.Draw(System.Drawing.Graphics)">
            <summary>
            Draws this grab handle to the given graphics context
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> to draw the grab handle to.</param>
        </member>
        <member name="M:VectorGraphics.Elements.GrabHandle.Contains(System.Drawing.Point)">
            <summary>
            Detects if given point is in grab handle bounded area.
            </summary>
            <param name="point">Point to check</param>
            <returns><strong>True</strong>, if given point is inside the bounds of the grab handle,
            otherwise <strong>false</strong>.</returns>
        </member>
        <member name="P:VectorGraphics.Elements.GrabHandle.HANDLESIZE">
            <summary>
            Gets the size of grab handles when in edit mode. Used for resizing shapes.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.GrabHandle.GrabHandlePosition">
            <summary>
            Gets or sets the position of the grab handle 
            in relation to the owning shape.
            </summary>
            <value>A <see cref="T:VectorGraphics.Elements.GrabHandle.HandlePosition"/> which indicates
            the position of the grab handle.</value>
        </member>
        <member name="P:VectorGraphics.Elements.GrabHandle.Size">
            <summary>
            Gets or sets the size of the grab handle
            </summary>
            <value>A <see cref="P:VectorGraphics.Elements.GrabHandle.Size"/> with the size of the grab handle.</value>
        </member>
        <member name="P:VectorGraphics.Elements.GrabHandle.Location">
            <summary>
            Gets or sets location of the grab handle
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the top left position
            of the grab handle.</value>
        </member>
        <member name="P:VectorGraphics.Elements.GrabHandle.Center">
            <summary>
            Gets or sets center of the grab handle
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the center of the grab handle.</value>
        </member>
        <member name="P:VectorGraphics.Elements.GrabHandle.Cursor">
            <summary>
            Gets or sets the cursor to show when the mouse is over the grab handle.
            </summary>
            <value>A <see cref="P:VectorGraphics.Elements.GrabHandle.Cursor"/> that is show when the mouse
            is over the grab handle.</value>
        </member>
        <member name="T:VectorGraphics.Elements.GrabHandle.HandlePosition">
            <summary>
            Grab handle resize modes.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.HandlePosition.Top">
            <summary>
            Top center resize handle position
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.HandlePosition.Down">
            <summary>
            Bottom center resize handle position
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.HandlePosition.Left">
            <summary>
            Left center resize handle position
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.HandlePosition.Right">
            <summary>
            Right center resize handle position
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.HandlePosition.Center">
            <summary>
            Middle resize handle position
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.HandlePosition.TopLeft">
            <summary>
            TopLeft resize handle position
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.HandlePosition.TopRight">
            <summary>
            TopRight resize handle position
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.HandlePosition.BottomLeft">
            <summary>
            BottomLeft resize handle position
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.GrabHandle.HandlePosition.BottomRight">
            <summary>
            BottomRight resize handle position
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGLine">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            A serializable class that is a vector graphics line drawn with a specific pen.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGLine.firstPoint">
            <summary>
            Saves the starting point of the line.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGLine.secondPoint">
            <summary>
            Saves the ending point of the line.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGLine.pointsAreSet">
            <summary>
            Indicates, whether both points are set.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the VGLine class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the VGLine class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="pt1">first point</param>
            <param name="pt2">second point</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGLine class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="pt1">first point</param>
            <param name="pt2">second point</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGLine class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGLine class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.#ctor">
            <summary>
            Prevents a default instance of the VGLine class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.#ctor(VectorGraphics.Elements.VGLine)">
            <summary>
            Initializes a new instance of the VGLine class.
            Clone Constructor. Creates new line that is
            identical to the given line.
            </summary>
            <param name="line">Line to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.Clear">
            <summary>
            This method clears the points of this line without
            changing its drawing properties as <see cref="M:VectorGraphics.Elements.VGLine.Reset"/> does.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.RecalculateBounds">
            <summary>
            This method recalculates the bounding rectangle of this line.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.Contains(System.Drawing.PointF)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Contains(System.Drawing.PointF)"/>.
            This is overridden because when the line is horizontal or vertical
            it could not be clicked, because the bounding rect has no area.
            </summary>
            <param name="pt">The <see cref="T:System.Drawing.PointF"/> to check whether it is contained
            in this line.</param>
            <returns><strong>True</strong> if point is in line, otherwise <strong>false</strong></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/>.  
            Draws the line to the given graphics context.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.GrabHandleMoved(VectorGraphics.Elements.GrabHandle@,System.Drawing.Point)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.GrabHandleMoved(VectorGraphics.Elements.GrabHandle@,System.Drawing.Point)"/>. 
            Resets bounds of the line
            according to the movement of the given grab handle
            </summary>
            <param name="handle">GrabHandle that moved</param>
            <param name="handleMovement">Movement in stimulus coordinates</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.GetPoints">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.GetPoints"/>. 
            Get the starting and ending point of
            the line in a list.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with the lines starting
            and ending point.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.GetPointCount">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.GetPointCount"/>. 
            Gets number of points of the line which are two :-)
            </summary>
            <returns>Two. (Number of points that constitute this line.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.Reset">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Reset"/>. 
            Reset the current line element to
            default values.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGLine"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGLine"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGLine"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGLine"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/>.  
            Creates an excact copy of given line.
            </summary>
            <returns>Excact copy of this <see cref="T:VectorGraphics.Elements.VGLine"/></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.NewPosition(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.NewPosition(System.Drawing.Drawing2D.Matrix)"/>. 
            Recalculates the starting and ending point
            coordinates when line is moved.
            </summary>
            <param name="translationMatrix">Translation Matrix.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.AddGrabHandles">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.AddGrabHandles"/>. 
            Adds a grab handle for the starting and ending
            point of the line with a sizeall cursor.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGLine.GetBounds">
            <summary>
            This method calculates the bounding rectangle for the given
            line.
            </summary>
            <returns>A <see cref="T:System.Drawing.RectangleF"/> with the bounding rectangle
            for this line.</returns>
        </member>
        <member name="P:VectorGraphics.Elements.VGLine.FirstPoint">
            <summary>
            Gets or sets the starting point of the line.
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the starting point location.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGLine.SecondPoint">
            <summary>
            Gets or sets the ending point of the line.
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the ending point location.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGLine.Bounds">
            <summary>
            Gets or sets the lines bounding rectangle.
            Overridden <see cref="P:VectorGraphics.Elements.VGElement.Bounds"/>
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGPolyline">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            A serializable class that is a vector graphics polyline,
            that can be closed or open and drawn with bounds and/or filled.
            </summary>
            <remarks>Note that the bounding line is centered over the bounds,
            so if you have a 10 px thick edge, your polyline will
            be 5 px bigger at each side than its bounds.</remarks>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the VGPolyline class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGPolyline class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGPolyline class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGPolyline class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the VGPolyline class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="pts">Point list that constitutes polyline</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.PointF[],VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGPolyline class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="pts">Point list that constitutes polyline</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.#ctor">
            <summary>
            Prevents a default instance of the VGPolyline class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.#ctor(VectorGraphics.Elements.VGPolyline)">
            <summary>
            Initializes a new instance of the VGPolyline class.
            Clone Constructor. Creates new polyline element that is
            identical to the given polyline.
            </summary>
            <param name="newPolyline">Polyline to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.Distance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculate Distance of two Vectors per Phythagoras
            </summary>
            <param name="pt1">Point 1 to calculate the distance for.</param>
            <param name="pt2">Point 2 to calculate the distance for.</param>
            <returns>Distance of the given Points in picture coordinates.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.Clear">
            <summary>
            This method clears the points of this polyline without
            changing its drawing properties as <see cref="M:VectorGraphics.Elements.VGPolyline.Reset"/> does.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.AddPt(System.Drawing.PointF)">
            <summary>
            Adds given point at the end of the graphics path.
            </summary>
            <param name="pt">Point to add</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.AddPts(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Adds given points at the end of the graphics path.
            </summary>
            <param name="pts">A <see cref="T:System.Collections.Generic.List`1"/> with points to add.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.RemoveLastPt">
            <summary>
            Removes last point in the pointlist from the polyline
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.RemoveLastPts(System.Int32)">
            <summary>
            Removes last point in the pointlist from the polyline
            </summary>
            <param name="number">An <see cref="T:System.Int32"/> with the number of 
            points to be removed.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.RemoveFirstPt">
            <summary>
            Removes first point in the pointlist from the polyline
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.RemoveFirstPts(System.Int32)">
            <summary>
            Removes the given number of points from to head of the polyline
            </summary>
            <param name="number">An <see cref="T:System.Int32"/> with the number of 
            points to be removed.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.ClosePolyline">
            <summary>
            Closes polyline by adding the first 
            point to the end of the polyline.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.GetLength">
            <summary>
            Returns length of polyline in pixels.
            </summary>
            <returns>Length of polyline in pixels</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.RecalculateBounds">
            <summary>
            Recalculates the bounds of this polyline.
            Must be called before position values are requested.
            </summary>
            <remarks>Automatic calculation is disabled due to performance reasons.</remarks>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.GetPointCount">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.GetPointCount"/>. 
            Gets number of points in pointlist.
            </summary>
            <returns>Number of points in graphics path list.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/> method. 
            Draws the polyline to the given graphics context.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.Contains(System.Drawing.PointF)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Contains(System.Drawing.PointF)"/>. 
            Detects if given point is in polyline region.
            </summary>
            <param name="pt">Point to test.</param>
            <returns><strong>True</strong> if point is in region,
            otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.Contains(System.Drawing.PointF,System.Int32)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Contains(System.Drawing.PointF,System.Int32)"/>. 
            Detects if given point is in element region widened by the tolerance value.
            </summary>
            <param name="pt">Point to check.</param>
            <param name="tolerance">An <see cref="T:System.Int32"/> tolerance value for 
            widening areas of interest to get a better hit rate in pixel.</param>
            <returns><strong>True</strong> if point is in region, otherwise <strong>false</strong></returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.GrabHandleMoved(VectorGraphics.Elements.GrabHandle@,System.Drawing.Point)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.GrabHandleMoved(VectorGraphics.Elements.GrabHandle@,System.Drawing.Point)"/>. 
            Resets bounds of the poyline according to the movement of the given grab handle.
            </summary>
            <param name="handle">GrabHandle that moved</param>
            <param name="handleMovement">Movement in stimulus coordinates</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.GetPoints">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.GetPoints"/>. 
            Gets point list of this polyline.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with the points of the path.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.Reset">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Reset"/>. 
            Reset the current polyline element to
            default values.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGPolyline"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGPolyline"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGPolyline"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGPolyline"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/> method. 
            Creates a excact copy of given <see cref="T:VectorGraphics.Elements.VGPolyline"/>.
            </summary>
            <returns>Excact copy of this <see cref="T:VectorGraphics.Elements.VGPolyline"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.NewPosition(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.NewPosition(System.Drawing.Drawing2D.Matrix)"/>. 
            Transforms graphic path referring to given translation.
            </summary>
            <param name="translationMatrix">Translation Matrix</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.AddGrabHandles">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.AddGrabHandles"/>. 
            Adds a grab handle for each vertex of the polyline with a sizeall cursor
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.GetPathCopy">
            <summary>
            Gets a copy of the graphics path.
            </summary>
            <returns>Exact copy of the polylines graphic path.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGPolyline.SamePosition(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Checks whether the given two points are at the same 
            position, when rounded up to two decimals.
            </summary>
            <param name="pt1">First point to test.</param>
            <param name="pt2">Second point to test.</param>
            <returns><strong>True</strong> if both points
            cn be considered as equal.</returns>
        </member>
        <member name="P:VectorGraphics.Elements.VGPolyline.Path">
            <summary>
            Gets or sets the graphics path that encapsulates the points
            of the polyline.
            </summary>
            <value>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> with the polyline points.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGPolyline.SerializableGraphicsPath">
            <summary>
            Gets or sets the SerializableGraphicsPath.
            Serializes the graphics path to string.
            </summary>
            <value>A <see cref="T:System.String"/> representation of the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/></value>
        </member>
        <member name="P:VectorGraphics.Elements.VGPolyline.LastPt">
            <summary>
            Gets last point in pointlist.
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the last point of the polyline.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGPolyline.FirstPt">
            <summary>
            Gets or sets the first point in pointlist.
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the first point of the polyline.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGPolyline.Bounds">
            <summary>
            Gets or sets polylines bounding rectangle.
            Overriden <see cref="P:VectorGraphics.Elements.VGElement.Bounds"/>. 
            </summary>
            <value>A <see cref="T:System.Drawing.RectangleF"/> with the polylines bounds.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGPolyline.Center">
            <summary>
            Gets the center of the polyline
            </summary>
            <value>A <see cref="T:System.Drawing.PointF"/> with the center of this polyline.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGPolyline.IsClosed">
            <summary>
            Gets or sets a value indicating whether the polyline is closed.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the polyline is closed, otherwise <strong>false</strong>.</value>
        </member>
        <member name="T:VectorGraphics.Elements.VGRectangle">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>.
            Creates new vector graphics rectangle.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGRectangle.inverted">
            <summary>
            This indicates whether this shape should be drawn inverted,
            that means all outside the bounds of the rectangle is filled with the
            brush.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the VGRectangle class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the VGRectangle class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">bounding rectangle</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRectangle class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRectangle class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRectangle class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newFont">Font for text</param>
            <param name="newFontColor">Color for text</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Pen,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRectangle class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newPen">Pen for edges</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the VGRectangle class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newBounds">bounding rectangle</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.Drawing.Brush,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String)">
            <summary>
            Initializes a new instance of the VGRectangle class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newBounds">bounding rectangle</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.#ctor">
            <summary>
            Prevents a default instance of the VGRectangle class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.#ctor(VectorGraphics.Elements.VGRectangle)">
            <summary>
            Initializes a new instance of the VGRectangle class.
            Clone Constructor. Creates new rectangle that is
            identical to the given <see cref="T:VectorGraphics.Elements.VGRectangle"/>
            </summary>
            <param name="newBounds">Rectangle to clone</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.GetRoundedRect(System.Drawing.Rectangle,System.Single)">
            <summary>
            This static method rounds a given rectangle into a graphics path that
            represents the rounded rectangle with the given radius
            </summary>
            <param name="newBounds">A <see cref="T:System.Drawing.Rectangle"/> with the bounds of the rounded rectangle</param>
            <param name="radius">A <see cref="T:System.Single"/> with the radius of the corners.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> with the rounded rectangle.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/> method. 
            Draws the rectangle to the given graphics context.
            </summary>
            <param name="graphics">Graphics context to draw to</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGRectangle"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGRectangle"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGRectangle"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGRectangle"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGRectangle.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/> method. 
            Creates a excact copy of given rectangle
            </summary>
            <returns>Excact copy of this rectangle</returns>
        </member>
        <member name="P:VectorGraphics.Elements.VGRectangle.Inverted">
            <summary>
            Gets or sets a value indicating whether this rectangle should be drawn
            inverted, that is the fill fills the region outside this rectangle.
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.ScreenCapture">
            <summary>
            This class provides functions to capture the entire screen, 
            or a particular window, and save it to a file or a image.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.ScreenCapture.CaptureScreen">
            <summary>
            Creates an Image object containing a screen shot of the entire desktop.
            </summary>
            <returns>An <see cref="T:System.Drawing.Image"/> of the entire desktop in its original size.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.ScreenCapture.CaptureWindowToFile(System.IntPtr,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Captures a screen shot of a specific window, and saves it to a file
            </summary>
            <param name="handle">A <see cref="T:System.IntPtr"/> to the window to capture.
            (In windows forms, this is obtained by the Handle property)</param>
            <param name="filename">A <see cref="T:System.String"/> with full filename
            and path of the file to save to.</param>
            <param name="format">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> that the 
            saved <see cref="T:System.Drawing.Image"/> should have.</param>
        </member>
        <member name="M:VectorGraphics.Tools.ScreenCapture.CaptureScreenToFile(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Captures a screen shot of the entire desktop, and saves it to a file
            </summary>
            <param name="filename">A <see cref="T:System.String"/> with full filename
            and path of the file to save to.</param>
            <param name="format">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> that the 
            saved <see cref="T:System.Drawing.Image"/> should have.</param>
        </member>
        <member name="M:VectorGraphics.Tools.ScreenCapture.CaptureWindow(System.IntPtr)">
            <summary>
            Creates an Image object containing a screen shot of a specific window
            </summary>
            <param name="handle">A <see cref="T:System.IntPtr"/> to the window to capture.
            (In windows forms, this is obtained by the Handle property)</param>
            <returns>An <see cref="T:System.Drawing.Image"/> with the captured window if successfull,
            otherwise null.</returns>
            <remarks>This method uses the GDI32.BitBlt()
            method, so the window has to be visible and should not be 
            minimized or hidden for example. In this cases use 
            <see cref="M:VectorGraphics.Tools.ScreenCapture.GetWindowImage(System.IntPtr,System.Drawing.Size)"/> which uses
            User32.PrintWindow().
            </remarks>
        </member>
        <member name="M:VectorGraphics.Tools.ScreenCapture.GetWindowImage(System.IntPtr,System.Drawing.Size)">
            <summary>
            Captures a screen shot of a specific window of given size,
            even if it is hidden.
            </summary>
            <param name="windowHandle">A <see cref="T:System.IntPtr"/> to the window to capture.
            (In windows forms, this is obtained by the Handle property)</param>
            <param name="size">The <see cref="T:System.Drawing.Size"/> of the captured image.</param>
            <returns>An <see cref="T:System.Drawing.Bitmap"/> with the captured window if successful,
            otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown, when size is empty, 
            or width ot height are less than zero.</exception>
        </member>
        <member name="T:VectorGraphics.Elements.VGShapeType">
            <summary>
            Type of selected shape to be drawn or created.
            Can be None, Rectangle, Ellipse, Polyline, Text, Image, Cursor, Line.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGShapeType.None">
            <summary>
            Undefined shape type.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGShapeType.Rectangle">
            <summary>
            Rectangular shape.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGShapeType.Ellipse">
            <summary>
            Ellipsoid shape.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGShapeType.Polyline">
            <summary>
            Polyline shape.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGShapeType.Text">
            <summary>
            Textual shape/object.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGShapeType.Image">
            <summary>
            Image shape/object.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGShapeType.Cursor">
            <summary>
            Cursor shape/object.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGShapeType.Line">
            <summary>
            Line shape.
            </summary>
        </member>
        <member name="T:VectorGraphics.Elements.VGText">
            <summary>
            Inherited from <see cref="T:VectorGraphics.Elements.VGElement"/>. 
            A serializable class that is a vector graphics text,
            drawn with a specific font and font color.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGText.text">
            <summary>
            Text to be drawn.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGText.textFont">
            <summary>
            The font that should be used for drawing of the text.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGText.textFontColor">
            <summary>
            The font color that should be used for drawing of the text.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGText.textAlignment">
            <summary>
            Saves the <see cref="T:System.Windows.Forms.HorizontalAlignment"/> of the text.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGText.#ctor(VectorGraphics.Elements.ShapeDrawAction,System.String,System.Drawing.Font,System.Drawing.Color,System.Windows.Forms.HorizontalAlignment,System.Single,System.Single,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,VectorGraphics.Elements.VGStyleGroup,System.String,System.String,VectorGraphics.Tools.AudioFile)">
            <summary>
            Initializes a new instance of the VGText class.
            </summary>
            <param name="newShapeDrawAction">Drawing action: Edge, Fill, Both</param>
            <param name="newText">string to display</param>
            <param name="newFont">Font to use for the text</param>
            <param name="newFontColor">Color for the text</param>
            <param name="newAlignment">The <see cref="T:System.Windows.Forms.HorizontalAlignment"/> for the text.</param>
            <param name="newLineSpacing">The <see cref="T:System.Single"/> with the new line spacing for the text.</param>
            <param name="newPadding">The <see cref="T:System.Single"/> with the new text padding.</param>
            <param name="newPen">Pen for bounds</param>
            <param name="newBrush">Brush for fills</param>
            <param name="newNameFont">Font for name</param>
            <param name="newNameFontColor">Color for name</param>
            <param name="newBounds">Bounds of element</param>
            <param name="newStyleGroup">Group Enumeration, <see cref="T:VectorGraphics.Elements.VGStyleGroup"/></param>
            <param name="newName">Name of Element</param>
            <param name="newElementGroup">Element group description</param>
            <param name="newSound">Audio contents of Element</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGText.#ctor">
            <summary>
            Prevents a default instance of the VGText class from being created.
            Parameterless constructor. Used for serialization.
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGText.#ctor(VectorGraphics.Elements.VGText)">
            <summary>
            Initializes a new instance of the VGText class.
            Clone Constructor. Creates new text that is
            identical to the given <see cref="T:VectorGraphics.Elements.VGText"/>.
            </summary>
            <param name="cloneText">Text element to clone.</param>
        </member>
        <member name="M:VectorGraphics.Elements.VGText.Draw(System.Drawing.Graphics)">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Draw(System.Drawing.Graphics)"/>.  
            Draws text with the owning brush and font onto given 
            graphics context.
            </summary>
            <param name="graphics">Graphics context to draw on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown, when graphics object is null.</exception>
        </member>
        <member name="M:VectorGraphics.Elements.VGText.Reset">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.Reset"/>. 
            Resets the current text element to
            default values (empty instruction).
            </summary>
        </member>
        <member name="M:VectorGraphics.Elements.VGText.ToString">
            <summary>
            Overridden <see cref="M:System.Object.ToString"/> method.
            Returns the <see cref="T:VectorGraphics.Elements.VGText"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this <see cref="T:VectorGraphics.Elements.VGText"/>.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGText.ToShortString">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.ToShortString"/> method.
            Returns the main <see cref="T:VectorGraphics.Elements.VGText"/> properties as a human readable string.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the 
            current <see cref="T:VectorGraphics.Elements.VGText"/> in short form with its main properties.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGText.CloneCore">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.CloneCore"/>.  
            Creates an excact copy of given <see cref="T:VectorGraphics.Elements.VGText"/>.
            </summary>
            <returns>Excact copy of this text element.</returns>
        </member>
        <member name="M:VectorGraphics.Elements.VGText.AddGrabHandles">
            <summary>
            Overridden <see cref="M:VectorGraphics.Elements.VGElement.AddGrabHandles"/>. 
            Adds a middle right, bottom middle and bottom right 
            grab handle to the current text.
            </summary>
        </member>
        <member name="P:VectorGraphics.Elements.VGText.StringToDraw">
            <summary>
            Gets or sets the text of this element.
            </summary>
            <value>A <see cref="T:System.String"/> with the instruction.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGText.Alignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.HorizontalAlignment"/> with the alignment for the text.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGText.TextFont">
            <summary>
            Gets or sets font of text element
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> for drawing the name of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGText.SerializedTextFont">
            <summary>
            Gets or sets SerializedTextFont.
            Serializes the <see cref="P:VectorGraphics.Elements.VGText.TextFont"/> property to XML.
            </summary>
            <value>A <see cref="T:System.String"/> with the string representation of the shapes font.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGText.TextFontColor">
            <summary>
            Gets or sets used color for the graphic elements font.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> for the font of this shape.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGText.SerializedTextFontColor">
            <summary>
            Gets or sets SerializedTextFontColor.
            Serializes and deserializes the <see cref="P:VectorGraphics.Elements.VGText.TextFontColor"/> to XML,
            because XMLSerializer can not serialize <see cref="T:System.Drawing.Color"/> values.
            </summary>
            <value>A <see cref="T:System.String"/> with the string representation of the shapes font color.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGText.LineSpacing">
            <summary>
            Gets or sets the factor for the line spacing of the text.
            </summary>
            <value>A <see cref="T:System.Single"/> with the factor for the line spacing for the text.</value>
        </member>
        <member name="P:VectorGraphics.Elements.VGText.Padding">
            <summary>
            Gets or sets the text padding of the text.
            </summary>
            <value>A <see cref="T:System.Single"/> with the text padding of the text.</value>
        </member>
        <member name="T:VectorGraphics.Elements.VGStyleGroup">
            <summary>
            List of vector graphics groups, that are used in Ogamas pictures
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.None">
            <summary>
            No Group specified.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.AOI_NORMAL">
            <summary>
            Areas of interest module. Standard elements.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.AOI_TARGET">
            <summary>
            Areas of interest module. Target elements.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.AOI_SEARCHRECT">
            <summary>
            Areas of interest module. Search rectangle elements.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.RPL_PEN_GAZE_CURSOR">
            <summary>
            Replay Module. Pen for gaze cursor.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.RPL_PEN_GAZE_PATH">
            <summary>
            Replay Module. Pen for gaze path.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.RPL_PEN_GAZE_FIX">
            <summary>
            Replay Module. Pen for fixation circles.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.RPL_PEN_GAZE_FIXCON">
            <summary>
            Replay Module. Pen for fixation connections.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.RPL_PEN_GAZE_NODATA">
            <summary>
            Replay Module. Pen for lines that show nodata connections. e.g. blinks.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.RPL_PEN_MOUSE_CURSOR">
            <summary>
            Replay Module. Pen for mouse cursor.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.RPL_PEN_MOUSE_PATH">
            <summary>
            Replay Module. Pen for mouse path.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.RPL_PEN_MOUSE_FIX">
            <summary>
            Replay Module. Pen for mouse fixations.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.RPL_PEN_MOUSE_FIXCON">
            <summary>
            Replay Module. Pen for mouse fixation connections.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.RPL_MOUSE_CLICK">
            <summary>
            Replay module. Click elements.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.FIX_GAZE_ELEMENT">
            <summary>
            Fixations Module. Standard gaze elements.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.FIX_MOUSE_ELEMENT">
            <summary>
            Fixations Module. Standard mouse elements.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.SCA_GRID_RECTANGLE">
            <summary>
            Scanpaths Module. Grid rectangle elements.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.SCA_GRID_AOI">
            <summary>
            Scanpaths Module. AOI elements.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.AOI_STATISTICS_BUBBLE">
            <summary>
            AOI module. Statistical bubbles.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.AOI_STATISTICS_ARROW">
            <summary>
            AOI module. Statistical transitions.
            </summary>
        </member>
        <member name="F:VectorGraphics.Elements.VGStyleGroup.ACTIVEX">
            <summary>
            All modules. ActiveX elements.
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Win32.User32">
            <summary>
            Helper class containing User32 API functions
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMUSER">
            <summary>
            The WM_USER constant is used by applications to help 
            define private messages for use by private window classes, 
            usually of the form WM_USER+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.MKLBUTTON">
            <summary>
            The left mouse button is down.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.MKRBUTTON">
            <summary>
            The right mouse button is down.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.MKMBUTTON">
            <summary>
            The middle mouse button is down.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.EMFORMATRANGE">
            <summary>
            The EM_FORMATRANGE message formats a range of text in a rich edit control for a specific device.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.EMSETTARGETDEVICE">
            <summary>
            The EM_SETTARGETDEVICE message sets the target device and line width used for WYSIWYG formatting in a rich edit control.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.EMSETBKGNDCOLOR">
            <summary>
            The EM_SETBKGNDCOLOR message sets the background color for a rich edit control.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMSETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to 
            a window to allow changes in that window to be redrawn 
            or to prevent changes in that window from being redrawn. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMPAINT">
            <summary>
            The WM_PAINT message is sent when the system or another 
            application makes a request to paint a portion of an application's window. 
            The message is sent when the UpdateWindow or RedrawWindow 
            function is called, or by the DispatchMessage function when 
            the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window 
            background must be erased (for example, when a window is resized). 
            The message is sent to prepare an invalidated portion of a window for painting. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WSEXCOMPOSITED">
            <summary>
            Windows XP: Paints all descendants of a window 
            in bottom-to-top painting order using double-buffering. For more information, see Remarks. 
            This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WSCHILD">
            <summary>
            Creates a child window. Cannot be used with the WS_POPUP style.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WSCLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows 
            when you draw within the parent window. Used when you create the parent window.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WSCLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; 
            that is, when a particular child window receives a paint message, 
            the WS_CLIPSIBLINGS style clips all other overlapped child windows 
            out of the region of the child window to be updated. (If WS_CLIPSIBLINGS 
            is not given and child windows overlap, when you draw within the 
            client area of a child window, it is possible to draw within the 
            client area of a neighboring child window.) For use with the WS_CHILD style only.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WSEXTRANSPARENT">
            <summary>
            Specifies that a window created with this style is 
            to be transparent. That is, any windows that are beneath 
            the window are not obscured by the window. A window created 
            with this style receives WM_PAINT messages only after all 
            sibling windows beneath it have been updated.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WSVISIBLE">
            <summary>
            Creates a window that is initially visible.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMMOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. 
            If the mouse is not captured, the message is posted to the window 
            that contains the cursor. Otherwise, the message is posted 
            to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMMOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an 
            inactive window and the user presses a mouse button. 
            The parent window receives this message only if the child 
            window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMCAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the 
            window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMSETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse 
            causes the cursor to move within a window and mouse input is not captured
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMMOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor 
            leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMLBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses 
            the left mouse button while the cursor is in the client 
            area of a window. If the mouse is not captured, 
            the message is posted to the window beneath the cursor. 
            Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMLBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases 
            the left mouse button while the cursor is in the client 
            area of a window. If the mouse is not captured, the message 
            is posted to the window beneath the cursor. Otherwise, the 
            message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMRBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses
            the right mouse button while the cursor is in the client 
            area of a window. If the mouse is not captured, the message
            is posted to the window beneath the cursor. Otherwise, the 
            message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMRBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases 
            the right mouse button while the cursor is in the 
            client area of a window. If the mouse is not captured, 
            the message is posted to the window beneath the cursor. 
            Otherwise, the message is posted to the window that has 
            captured the mouse
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMRBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user 
            double-clicks the right mouse button while the cursor 
            is in the client area of a window. If the mouse is not 
            captured, the message is posted to the window beneath 
            the cursor. Otherwise, the message is posted to the window 
            that has captured the mouse.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMMBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user 
            presses the middle mouse button while the cursor 
            is in the client area of a window. If the mouse is 
            not captured, the message is posted to the window beneath 
            the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMMBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases 
            the middle mouse button while the cursor is in the 
            client area of a window. If the mouse is not captured, 
            the message is posted to the window beneath the cursor. 
            Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMMBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks
            the middle mouse button while the cursor is in the client area 
            of a window. If the mouse is not captured, the message is posted 
            to the window beneath the cursor. Otherwise, the message is 
            posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.GWHWNDNEXT">
            <summary>
            The retrieved handle identifies the window below the specified window 
            in the Z order. If the specified window is a topmost window, 
            the handle identifies the topmost window below the specified window. 
            If the specified window is a top-level window, the handle identifies 
            the top-level window below the specified window. If the specified 
            window is a child window, the handle identifies the sibling window 
            below the specified window.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.GWCHILD">
            <summary>
            The retrieved handle identifies the child window at the top 
            of the Z order, if the specified window is a parent window;
            otherwise, the retrieved handle is NULL. The function examines 
            only child windows of the specified window. It does not examine descendant windows.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMSETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.HTCLIENT">
            <summary>
            Indicates client window.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.WMKILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.RDWUPDATENOW">
            <summary>
            Causes the affected windows (as specified by the RDW_ALLCHILDREN and RDW_NOCHILDREN flags) 
            to receive WM_NCPAINT, WM_ERASEBKGND, and WM_PAINT messages, if necessary, 
            before the function returns.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.RDWNOCHILDREN">
            <summary>
            Excludes child windows, if any, from the repainting operation.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.RDWALLCHILDREN">
            <summary>
            Includes child windows, if any, in the repainting operation.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.RedrawWindow(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            The RedrawWindow function updates the specified rectangle or region in a window's client area. 
            </summary>
            <param name="windowHandle">[in] Handle to the window to be redrawn. 
            If this parameter is NULL, the desktop window is updated.</param>
            <param name="updateRectangle">[in] Pointer to a RECT structure containing 
            the coordinates, in device units, of the update rectangle. 
            This parameter is ignored if the hrgnUpdate parameter identifies a region. </param>
            <param name="updateRegion">[in] Handle to the update region. 
            If both the hrgnUpdate and lprcUpdate parameters are NULL,
            the entire client area is added to the update region. </param>
            <param name="flags">[in] Specifies one or more redraw flags. 
            This parameter can be used to invalidate or validate a window, 
            control repainting, and control which windows are affected by RedrawWindow. </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.GetDesktopWindow">
            <summary>
            The GetDesktopWindow function returns a handle to the desktop window. 
            The desktop window covers the entire screen. 
            The desktop window is the area on top of which other windows are painted.
            </summary>
            <returns>The return value is a handle to the desktop window. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.GetWindow(System.IntPtr,System.UInt32)">
            <summary>
            The GetWindow function retrieves a handle to a window 
            that has the specified relationship (Z-Order or owner) to the specified window. 
            </summary>
            <param name="windowHandle">[in] Handle to a window. The window handle 
            retrieved is relative to this window, based on the value of the uCmd parameter. </param>
            <param name="cmd">[in] Specifies the relationship between the specified 
            window and the window whose handle is to be retrieved.
            Use one of the GW_ constants</param>
            <returns>If the function succeeds, the return value is a window handle. 
            If no window exists with the specified relationship to the specified window,
            the return value is NULL.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            The GetClassName function retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name="windowHandle">[in] Handle to the window and, indirectly, the class to which the window belongs. </param>
            <param name="className">[out] Pointer to the buffer that is to receive the class name string.</param>
            <param name="maxCount">[in] Specifies the length, in TCHAR, of the buffer 
            pointed to by the lpClassName parameter. The class name string 
            is truncated if it is longer than the buffer and is always null-terminated. </param>
            <returns>If the function succeeds, the return value is 
            the number of TCHAR copied to the specified buffer.
            If the function fails, the return value is zero. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.GetWindowDC(System.IntPtr)">
            <summary>
            The GetWindowDC function retrieves the device context (DC) 
            for the entire window, including title bar, menus, and scroll bars. 
            A window device context permits painting anywhere in a window, 
            because the origin of the device context is the upper-left 
            corner of the window instead of the client area. 
            GetWindowDC assigns default attributes to the window device 
            context each time it retrieves the device context. 
            Previous attributes are lost. 
            </summary>
            <param name="windowHandle">[in] Handle to the window with a device 
            context that is to be retrieved. If this value is NULL, 
            GetWindowDC retrieves the device context for the entire screen. </param>
            <returns>If the function succeeds, the return value is a handle 
            to a device context for the specified window. 
            If the function fails, the return value is NULL, 
            indicating an error or an invalid windowHandle parameter. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.GetWindowRect(System.IntPtr,VectorGraphics.Tools.Win32.User32.RECT@)">
            <summary>
            The GetWindowRect function retrieves the dimensions of 
            the bounding rectangle of the specified window. 
            The dimensions are given in screen coordinates that 
            are relative to the upper-left corner of the screen. 
            </summary>
            <param name="windowHandle">[in] Handle to the window. </param>
            <param name="rect">[out] Pointer to a structure that receives 
            the screen coordinates of the upper-left and lower-right 
            corners of the window. </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended 
            error information, call. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.PrintWindow(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            The PrintWindow function copies a visual window into 
            the specified device context (DC), typically a printer DC.
            </summary>
            <param name="windowHandle">Handle to the window that will be copied.</param>
            <param name="dc">Handle to the device context.</param>
            <param name="flags">Specifies the drawing options. </param>
            <returns>If the function succeeds, it returns a nonzero value.
            If the function fails, it returns zero.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The PostMessage function places (posts) a message in the message 
            queue associated with the thread that created the specified 
            window and returns without waiting for the thread to process the message. 
            </summary>
            <param name="windowHandle">[in] Handle to the window whose window procedure 
            is to receive the message. The following values have special meanings.
            HWND_BROADCAST
            The message is posted to all top-level windows in the system,
            including disabled or invisible unowned windows, overlapped windows, 
            and pop-up windows. The message is not posted to child windows.
            NULL
            The function behaves like a call to PostThreadMessage with the 
            dwThreadId parameter set to the identifier of the current thread.</param>
            <param name="msg">[in] Specifies the message to be posted.</param>
            <param name="wParam">[in] Specifies additional message-specific information 1.</param>
            <param name="lParam">[in] Specifies additional message-specific information 2.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended 
            error information, call GetLastError.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Needed to forward keyboard messages to the child TextBox control.
            </summary>
            <param name="windowHandle">Handle of window to send the message to.</param>
            <param name="msg">Specifies the message to be sent.</param>
            <param name="wParam">Specifies additional message-dependent information. 1</param>
            <param name="lParam">Specifies additional message-dependent information. 2</param>
            <returns>The result of the message processing; its value depends on the message sent.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.InvalidateRect(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            The InvalidateRect function adds a rectangle to the 
            specified window's update region. The update region 
            represents the portion of the window's client area that must be redrawn. 
            </summary>
            <param name="windowHandle">[in] Handle to the window whose update region 
            has changed. If this parameter is NULL, the system invalidates 
            and redraws all windows, and sends the WM_ERASEBKGND and 
            WM_NCPAINT messages to the window procedure before the function returns.</param>
            <param name="rect">[in] Pointer to a RECT structure that 
            contains the client coordinates of the rectangle to be added 
            to the update region. If this parameter is NULL, the entire 
            client area is added to the update region. </param>
            <param name="erase">[in] Specifies whether the background within 
            the update region is to be erased when the update region 
            is processed. If this parameter is TRUE, the background 
            is erased when the BeginPaint function is called. If this 
            parameter is FALSE, the background remains unchanged. </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.InvalidateRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            The InvalidateRgn function invalidates the client area within 
            the specified region by adding it to the current update 
            region of a window. The invalidated region, along with all 
            other areas in the update region, is marked for painting when 
            the next WM_PAINT message occurs.
            </summary>
            <param name="windowHandle">[in] Handle to the window with an update region that is to be modified. </param>
            <param name="rgn">[in] Handle to the region to be added to the update 
            region. The region is assumed to have client coordinates. 
            If this parameter is NULL, the entire client area is added to the update region. </param>
            <param name="erase">[in] Specifies whether the background within
            the update region should be erased when the update region 
            is processed. If this parameter is TRUE, the background is erased 
            when the BeginPaint function is called. If the parameter is FALSE, 
            the background remains unchanged. </param>
            <returns>The return value is always nonzero. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.UpdateWindow(System.IntPtr)">
            <summary>
            The UpdateWindow function updates the client area of the specified 
            window by sending a WM_PAINT message to the window if the window's 
            update region is not empty. The function sends a WM_PAINT message 
            directly to the window procedure of the specified window, bypassing 
            the application queue. If the update region is empty, no message is sent.
            </summary>
            <param name="windowHandle">[in] Handle to the window to be updated. </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.GetDC(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a display device 
            context (DC) for the client area of a specified window or 
            for the entire screen. You can use the returned handle in 
            subsequent GDI functions to draw in the DC. 
            </summary>
            <param name="hwnd">[in] Handle to the window whose DC is to be retrieved. 
            If this value is NULL, GetDC retrieves the DC for the entire screen. </param>
            <returns>If the function succeeds, the return value is a handle 
            to the DC for the specified window's client area. 
            If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.User32.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The ReleaseDC function releases a device context (DC), 
            freeing it for use by other applications. The effect 
            of the ReleaseDC function depends on the type of DC. 
            It frees only common and window DCs. It has no effect 
            on class or private DCs. 
            </summary>
            <param name="windowHandle">[in] Handle to the window whose DC is to be released.</param>
            <param name="hDC">[in] Handle to the DC to be released.</param>
            <returns>The return value indicates whether the DC was released. 
            If the DC was released, the return value is 1. 
            If the DC was not released, the return value is zero.</returns>
        </member>
        <member name="T:VectorGraphics.Tools.Win32.User32.RECT">
            <summary>
            The RECT structure defines the coordinates of the 
            upper-left and lower-right corners of a rectangle. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.RECT.Left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.RECT.Top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.RECT.Right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.RECT.Bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle. 
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Win32.User32.CHARRANGE">
            <summary>
            The CHARRANGE structure specifies a range of characters 
            in a rich edit control. This structure is used with the 
            EM_EXGETSEL and EM_EXSETSEL messages. 
            If the cpMin and cpMax members are equal, the range is empty. 
            The range includes everything if cpMin is 0 and cpMax is —1.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.CHARRANGE.CharacterPositionMin">
            <summary>
            Character position index immediately preceding the first character in the range. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.CHARRANGE.CharacterPositionMax">
            <summary>
            Character position immediately following the last character in the range. 
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Win32.User32.FORMATRANGE">
            <summary>
            The FORMATRANGE structure contains information that a rich edit control 
            uses to format its output for a particular device. This structure is 
            used with the EM_FORMATRANGE message.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.FORMATRANGE.Hdc">
            <summary>
            Device to render to.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.FORMATRANGE.HdcTarget">
            <summary>
            Target device to format for. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.FORMATRANGE.Area">
            <summary>
            Area to render to. Units are measured in twips. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.FORMATRANGE.AreaPage">
            <summary>
            Entire area of rendering device. Units are measured in twips. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.User32.FORMATRANGE.Chrg">
            <summary>
            <see cref="T:VectorGraphics.Tools.Win32.User32.CHARRANGE"/> structure that specifies the range of text to format. 
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Win32.Gdi32">
            <summary>
            Helper class containing Gdi32.dll API functions
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.Gdi32.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, 
            font, bitmap, region, or palette, freeing all system 
            resources associated with the object. After the object 
            is deleted, the specified handle is no longer valid. 
            </summary>
            <param name="objectHandle">[in] Handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the specified handle is not valid or is currently selected into 
            a DC, the return value is zero.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.Gdi32.CreateDIBSection(System.IntPtr,VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO@,System.UInt32,System.IntPtr@,System.IntPtr,System.Int32)">
            <summary>
            The CreateDIBSection function creates a DIB that 
            applications can write to directly. The function gives 
            you a pointer to the location of the bitmap bit values. 
            You can supply a handle to a file-mapping object that 
            the function will use to create the bitmap, or you can 
            let the system allocate the memory for the bitmap.
            </summary>
            <param name="hdc">[in] Handle to a device context. If 
            the value of iUsage is DIB_PAL_COLORS, the function uses 
            this device context's logical palette to initialize the DIB colors.</param>
            <param name="bmi">[in] Pointer to a <see cref="T:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO"/> structure that specifies 
            various attributes of the DIB, including the bitmap dimensions and colors.</param>
            <param name="usage">[in] Specifies the type of data contained in the
            bmiColors array member of the BITMAPINFO structure pointed to 
            by pbmi (either logical palette indexes or literal RGB values). </param>
            <param name="bits">[out] Pointer to a variable that receives 
            a pointer to the location of the DIB bit values.</param>
            <param name="sectionHandle">[in] Handle to a file-mapping object that the 
            function will use to create the DIB. This parameter can be NULL.</param>
            <param name="offset">[in] Specifies the offset from the beginning
            of the file-mapping object referenced by hSection where storage 
            for the bitmap bit values is to begin. This value is ignored if 
            hSection is NULL. The bitmap bit values are aligned on doubleword
            boundaries, so dwOffset must be a multiple of the size of a DWORD.</param>
            <returns>If the function succeeds, the return value is a handle 
            to the newly created DIB, and *ppvBits points to the bitmap bit values.
            If the function fails, the return value is NULL, and *ppvBits is NULL.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.Gdi32.CreateCompatibleDC(System.IntPtr)">
            <summary>
            The CreateCompatibleDC function creates a memory 
            device context (DC) compatible with the specified device.
            </summary>
            <param name="hdc">[in] Handle to an existing DC. 
            If this handle is NULL, the function creates a memory DC 
            compatible with the application's current screen.</param>
            <returns>If the function succeeds, the return value is 
            the handle to a memory DC.
            If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.Gdi32.DeleteDC(System.IntPtr)">
            <summary>
            The DeleteDC function deletes the specified device context (DC).
            </summary>
            <param name="hdc">[in] Handle to the device context. </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.Gdi32.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            The SelectObject function selects an object into the 
            specified device context (DC). The new object replaces 
            the previous object of the same type. 
            </summary>
            <param name="hdc">[in] Handle to the DC.</param>
            <param name="hgdiobj">[in] Handle to the object to be selected.</param>
            <returns>If the selected object is not a region and the function succeeds, 
            the return value is a handle to the object being replaced. 
            If the selected object is a region and the function succeeds,
            the return value is one of the following values.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.Gdi32.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations)">
            <summary>
            The BitBlt function performs a bit-block transfer of the color data 
            corresponding to a rectangle of pixels from the specified 
            source device context into a destination device context. 
            </summary>
            <param name="objectHandle">[in] Handle to the destination device context.</param>
            <param name="destX">[in] Specifies the x-coordinate, in logical units,
            of the upper-left corner of the destination rectangle. </param>
            <param name="destY">[in] Specifies the y-coordinate, in logical units, 
            of the upper-left corner of the destination rectangle. </param>
            <param name="width">[in] Specifies the width, in logical units, of the 
            source and destination rectangles.</param>
            <param name="height">[in] Specifies the height, in logical units, of the 
            source and destination rectangles.</param>
            <param name="objectSourceHandle">[in] Handle to the source device context.</param>
            <param name="srcX">[in] Specifies the x-coordinate, in logical units, 
            of the upper-left corner of the source rectangle.</param>
            <param name="srcY">[in] Specifies the y-coordinate, in logical units, 
            of the upper-left corner of the source rectangle.</param>
            <param name="rop">[in] Specifies a raster-operation code. These codes define how 
            the color data for the source rectangle is to be combined with the 
            color data for the destination rectangle to achieve the final color. </param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. </returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.Gdi32.StretchBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations)">
            <summary>
            The StretchBlt function copies a bitmap from a source rectangle 
            into a destination rectangle, stretching or compressing the bitmap 
            to fit the dimensions of the destination rectangle, 
            if necessary. The system stretches or compresses the bitmap 
            according to the stretching mode currently set in the destination device context. 
            </summary>
            <param name="destHDC">[in] Handle to the destination device context.</param>
            <param name="originDestX">[in] Specifies the x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="originDestY">[in] Specifies the y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            <param name="widthDest">[in] Specifies the width, in logical units, of the destination rectangle.</param>
            <param name="heightDest">[in] Specifies the height, in logical units, of the destination rectangle.</param>
            <param name="srcHDC">[in] Handle to the source device context.</param>
            <param name="originSrcX">[in] Specifies the x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="originSrcY">[in] Specifies the y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            <param name="widthSrc">[in] Specifies the width, in logical units, of the source rectangle.</param>
            <param name="heightSrc">[in] Specifies the height, in logical units, of the source rectangle.</param>
            <param name="rop">[in] Specifies the raster operation to be performed. Raster operation codes 
            define how the system combines colors in output operations that involve 
            a brush, a source bitmap, and a destination bitmap.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.Gdi32.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The CreateCompatibleBitmap function creates a bitmap compatible 
            with the device that is associated with the specified device context. 
            </summary>
            <param name="hDC">[in] Handle to a device context. </param>
            <param name="width">[in] Specifies the bitmap width, in pixels. </param>
            <param name="height">[in] Specifies the bitmap height, in pixels. </param>
            <returns>If the function succeeds, the return value is a handle 
            to the compatible bitmap (DDB).
            If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Win32.Gdi32.GetDeviceCaps(System.IntPtr,VectorGraphics.Tools.Win32.Gdi32.DeviceCap)">
            <summary>
            The GetDeviceCaps function retrieves device-specific 
            information for the specified device. 
            </summary>
            <param name="hdc">[in] Handle to the DC.</param>
            <param name="index">[in] Specifies the item to return. 
            This parameter can be one of the following values. </param>
            <returns>The return value specifies the value of the desired item.</returns>
        </member>
        <member name="T:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations">
            <summary>
            Enumeration for the raster operations used in BitBlt.
            In C++ these are actually #define. But to use these
            constants with C#, a new enumeration type is defined.
            These codes define how the color data for the 
            source rectangle is to be combined with the color 
            data for the destination rectangle to achieve the final color.
            Copies the source rectangle directly to the destination rectangle.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.SRCCOPY">
            <summary>
            Copies the source rectangle directly to the destination rectangle. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.SRCPAINT">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean OR operator. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.SRCAND">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean AND operator. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.SRCINVERT">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean XOR operator. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.SRCERASE">
            <summary>
            Combines the inverted colors of the destination rectangle with the colors of the source rectangle by using the Boolean AND operator. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.NOTSRCCOPY">
            <summary>
            Copies the inverted source rectangle to the destination. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.NOTSRCERASE">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean OR operator and then inverts the resultant color. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.MERGECOPY">
            <summary>
            Merges the colors of the source rectangle with the brush currently selected in hdcDest, by using the Boolean AND operator. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.MERGEPAINT">
            <summary>
            Merges the colors of the inverted source rectangle with the colors of the destination rectangle by using the Boolean OR operator. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.PATCOPY">
            <summary>
            Copies the brush currently selected in hdcDest, into the destination bitmap. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.PATPAINT">
            <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the inverted source rectangle by using the Boolean OR operator. The result of this operation is combined with the colors of the destination rectangle by using the Boolean OR operator. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.PATINVERT">
            <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the destination rectangle by using the Boolean XOR operator. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.DSTINVERT">
            <summary>
            Inverts the destination rectangle. 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.BLACKNESS">
            <summary>
            Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the default physical palette.) 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.TernaryRasterOperations.WHITENESS">
            <summary>
            Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the default physical palette.) 
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Win32.Gdi32.DeviceCap">
            <summary>
            Device-specific information.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.DRIVERVERSION">
            <summary>
            Device driver version
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.TECHNOLOGY">
            <summary>
            Device classification
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.HORZSIZE">
            <summary>
            Horizontal size in millimeters
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.VERTSIZE">
            <summary>
            Vertical size in millimeters
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.HORZRES">
            <summary>
            Horizontal width in pixels
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.VERTRES">
            <summary>
            Vertical height in pixels
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.BITSPIXEL">
            <summary>
            Number of bits per pixel
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.PLANES">
            <summary>
            Number of planes
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.NUMBRUSHES">
            <summary>
            Number of brushes the device has
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.NUMPENS">
            <summary>
            Number of pens the device has
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.NUMMARKERS">
            <summary>
            Number of markers the device has
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.NUMFONTS">
            <summary>
            Number of fonts the device has
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.NUMCOLORS">
            <summary>
            Number of colors the device supports
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.PDEVICESIZE">
            <summary>
            Size required for device descriptor
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.CURVECAPS">
            <summary>
            Curve capabilities
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.LINECAPS">
            <summary>
            Line capabilities
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.POLYGONALCAPS">
            <summary>
            Polygonal capabilities
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.TEXTCAPS">
            <summary>
            Text capabilities
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.CLIPCAPS">
            <summary>
            Clipping capabilities
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.RASTERCAPS">
            <summary>
            Bitblt capabilities
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.ASPECTX">
            <summary>
            Length of the X leg
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.ASPECTY">
            <summary>
            Length of the Y leg
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.ASPECTXY">
            <summary>
            Length of the hypotenuse
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.SHADEBLENDCAPS">
            <summary>
            Shading and Blending caps
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.LOGPIXELSX">
            <summary>
            Logical pixels inch in X
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.LOGPIXELSY">
            <summary>
            Logical pixels inch in Y
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.SIZEPALETTE">
            <summary>
            Number of entries in physical palette
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.NUMRESERVED">
            <summary>
            Number of reserved entries in palette
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.COLORRES">
            <summary>
            Actual color resolution
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.PHYSICALWIDTH">
            <summary>
            Physical Width in device units
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.PHYSICALHEIGHT">
            <summary>
            Physical Height in device units
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.PHYSICALOFFSETX">
            <summary>
            Physical Printable Area x margin
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.PHYSICALOFFSETY">
            <summary>
            Physical Printable Area y margin
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.SCALINGFACTORX">
            <summary>
            Scaling factor x
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.SCALINGFACTORY">
            <summary>
            Scaling factor y
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.VREFRESH">
            <summary>
            Current vertical refresh rate of the display device (for displays only) in Hz
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.DESKTOPVERTRES">
            <summary>
            Horizontal width of entire desktop in pixels
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.DESKTOPHORZRES">
            <summary>
            Vertical height of entire desktop in pixels
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.DeviceCap.BLTALIGNMENT">
            <summary>
            Preferred blt alignment
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO">
            <summary>
            The BITMAPINFO structure defines the dimensions and color 
            information for a Windows device-independent bitmap (DIB). 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiSize">
            <summary>
            Specifies the number of bytes required by the structure.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiWidth">
            <summary>
            Specifies the width of the bitmap, in pixels.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiHeight">
            <summary>
            Specifies the height of the bitmap, in pixels. 
            If biHeight is positive, the bitmap is a bottom-up 
            DIB and its origin is the lower-left corner. 
            If biHeight is negative, the bitmap is a top-down 
            DIB and its origin is the upper-left corner. 
            If biHeight is negative, indicating a top-down DIB,
            biCompression must be either BI_RGB or BI_BITFIELDS. 
            Top-down DIBs cannot be compressed.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiPlanes">
            <summary>
            Specifies the number of planes for the target device. 
            This value must be set to 1.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiBitCount">
            <summary>
            Specifies the number of bits-per-pixel. 
            The biBitCount member of the 
            structure determines the number of bits that 
            define each pixel and the maximum number of colors 
            in the bitmap.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiCompression">
            <summary>
            Specifies the type of compression for a compressed 
            bottom-up bitmap (top-down DIBs cannot be compressed). 
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiSizeImage">
            <summary>
            Specifies the size, in bytes, of the image. 
            This may be set to zero for BI_RGB bitmaps.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiXPelsPerMeter">
            <summary>
            Specifies the horizontal resolution, in pixels-per-meter, 
            of the target device for the bitmap. An application 
            can use this value to select a bitmap from a resource 
            group that best matches the characteristics of the current device.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiYPelsPerMeter">
            <summary>
            Specifies the vertical resolution, 
            in pixels-per-meter, of the target device for the bitmap.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiClrUsed">
            <summary>
            Specifies the number of color indexes in the color 
            table that are actually used by the bitmap. If 
            this value is zero, the bitmap uses the maximum number 
            of colors corresponding to the value of the biBitCount
            member for the compression mode specified by biCompression. 
            If biClrUsed is nonzero and the biBitCount member is less
            than 16, the biClrUsed member specifies the actual number
            of colors the graphics engine or device driver accesses. 
            If biBitCount is 16 or greater, the biClrUsed member specifies 
            the size of the color table used to optimize performance of 
            the system color palettes. If biBitCount equals 16 or 32, 
            the optimal color palette starts immediately following the 
            three DWORD masks. 
            When the bitmap array immediately follows the <see cref="T:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO"/> 
            structure, it is a packed bitmap. Packed bitmaps are referenced 
            by a single pointer. Packed bitmaps require that the biClrUsed 
            member must be either zero or the actual size of the color table.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.BiClrImportant">
            <summary>
            Specifies the number of color indexes that are required for 
            displaying the bitmap. If this value is zero, all colors are required.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Win32.Gdi32.BITMAPINFO.Cols">
            <summary>
            Specifies an array of RGBQUAD or DWORD data types 
            that define the colors in the bitmap. 
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Trigger.ParallelPort">
            <summary>
            Class to access the Port API's from the inpout32.dll.
            </summary>
            <remarks>It uses the input32.dll from http://logix4u.net/.
            References:
            http://www.dotnettalk.net/Needed_help_on_printing_from_C_and_printer-6941579-1297-a.html
            http://www.dotnet247.com/247reference/msgs/16/84730.aspx
            http://www.groupsrv.com/dotnet/viewtopic.php?t=72572
            http://www.pinvoke.net/default.aspx/kernel32.CreateFile
            </remarks> 
        </member>
        <member name="M:VectorGraphics.Tools.Trigger.ParallelPort.Output(System.Int32,System.Int32)">
            <summary>
            This method will be used to send the data out to the parallel port.
            </summary>
            <param name="address">Address of the port to which the data needs to be sent.</param>
            <param name="value">Data that need to send out.</param>
            <remarks>Here the address 888 as int is actually 0x378 as Hex, which is the data 
            port of the parallel port. To reset the data that is sent on the data port, 
            you need to invoke the Output method with a value 0x00 i.e.0.
            <para></para>
            Register                            LPT1 LPT2
            Data Register (Base Address + 0)    0x378 0x278
            Status Register (Base Address + 1)  0x379 0x279
            Control Register (Base Address + 2) 0x37a 0x27a
            </remarks>
        </member>
        <member name="M:VectorGraphics.Tools.Trigger.ParallelPort.Input(System.Int32)">
            <summary>
            This method will be used to receive any data from the parallel port.
            </summary>
            <param name="address">Address of the port from which the data should be received.</param>
            <returns>Returns Integer read from the given port.</returns>
        </member>
        <member name="M:VectorGraphics.Tools.Trigger.ParallelPort.SendTriggerToLPT(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method sends a trigger with the given value with the length
            given by signalTime to the port at the given address wich works
            only for LPT Ports.
            </summary>
            <param name="address">The <see cref="T:System.Int32"/> converted HEX address of
            the LPT port to send the signal to</param>
            <param name="signalTime">The time in milliseconds that indicates how
            long the signal will be set before it is reset to zero.</param>
            <param name="value">An <see cref="T:System.Int32"/> with the value to be sent.
            Can be from 0-255.</param>
            <remarks> LPT adress by default is 0x378=888, another is D800 =55296 </remarks>
        </member>
        <member name="T:VectorGraphics.Tools.Trigger.Trigger">
            <summary>
            Class to save settings for triggers.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Trigger.Trigger.signaling">
            <summary>
            The trigger signaling time to be sent to the <see cref="T:VectorGraphics.Tools.Trigger.TriggerOutputDevices"/>
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Trigger.Trigger.outputDevice">
            <summary>
            The <see cref="T:VectorGraphics.Tools.Trigger.TriggerOutputDevices"/> to send the trigger to.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Trigger.Trigger.signalValue">
            <summary>
            The trigger value to be send.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Trigger.Trigger.signalingTime">
            <summary>
            The time the trigger signal is been send in milliseconds
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Trigger.Trigger.portAddress">
            <summary>
            The port address of the lpt device to send to
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.Trigger.Trigger.#ctor">
            <summary>
            Initializes a new instance of the Trigger class.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.Trigger.Trigger.#ctor(VectorGraphics.Tools.Trigger.TriggerSignaling,VectorGraphics.Tools.Trigger.TriggerOutputDevices,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Trigger class.
            </summary>
            <param name="newSignaling">The <see cref="T:VectorGraphics.Tools.Trigger.TriggerSignaling"/> enumeration</param>
            <param name="newTriggerOutputDevice">The <see cref="T:VectorGraphics.Tools.Trigger.TriggerOutputDevices"/> to send the trigger to.</param>
            <param name="newSignalingTime">An <see cref="T:System.Int32"/> with the time in milliseconds the trigger level should be set.</param>
            <param name="newValue">An 8-bit <see cref="T:System.Int32"/> (0-255) that indicates the value to be sent.</param>
            <param name="newPortAddress">An <see cref="T:System.Int32"/> with the port address to send the trigger to.</param>
        </member>
        <member name="M:VectorGraphics.Tools.Trigger.Trigger.Send">
            <summary>
            This method sends the trigger to
            the given <see cref="T:VectorGraphics.Tools.Trigger.TriggerOutputDevices"/>.
            </summary>
        </member>
        <member name="M:VectorGraphics.Tools.Trigger.Trigger.SendTriggerToLPT">
            <summary>
            This method uses the inpout32.dll to send the trigger to the lpt port 
            with the given address.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.Trigger.Trigger.Signaling">
            <summary>
            Gets or sets the trigger signaling time to be sent to the <see cref="T:VectorGraphics.Tools.Trigger.TriggerOutputDevices"/>
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.Trigger.Trigger.OutputDevice">
            <summary>
            Gets or sets the <see cref="T:VectorGraphics.Tools.Trigger.TriggerOutputDevices"/> to send the trigger to.
            </summary>
            <value>The <see cref="T:VectorGraphics.Tools.Trigger.TriggerOutputDevices"/> to send the trigger to.</value>
        </member>
        <member name="P:VectorGraphics.Tools.Trigger.Trigger.Value">
            <summary>
            Gets or sets the trigger value to be send.
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.Trigger.Trigger.SignalingTime">
            <summary>
            Gets or sets the time the trigger signal is been send in milliseconds
            </summary>
        </member>
        <member name="P:VectorGraphics.Tools.Trigger.Trigger.PortAddress">
            <summary>
            Gets or sets the port address of the lpt device to send to
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Trigger.TriggerOutputDevices">
            <summary>
            This is a list of possible output devices for trigger signals.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Trigger.TriggerOutputDevices.None">
            <summary>
            No output device defined.
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Trigger.TriggerOutputDevices.LPT">
            <summary>
            The parallel lpt1 port.
            </summary>
        </member>
        <member name="T:VectorGraphics.Tools.Trigger.TriggerSignaling">
            <summary>
            This is a list of possible trigger signaling states
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Trigger.TriggerSignaling.None">
            <summary>
            No trigger should be send
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Trigger.TriggerSignaling.Enabled">
            <summary>
            Trigger should be send at the start of the slide
            </summary>
        </member>
        <member name="F:VectorGraphics.Tools.Trigger.TriggerSignaling.Override">
            <summary>
            Trigger should be send at the start of the slide,
            all other triggers are disabled.
            </summary>
        </member>
    </members>
</doc>
