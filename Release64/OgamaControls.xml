<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OgamaControls</name>
    </assembly>
    <members>
        <member name="T:OgamaControls.ColorButton">
            <summary>
            Color button control, shows a <see cref="T:OgamaControls.ColorPanel"/> for <see cref="T:System.Drawing.Color"/> selection on click.
            </summary>
        </member>
        <member name="T:OgamaControls.IColorControl">
            <summary>
            Color controls interface to enable a shared <see cref="T:OgamaControls.ColorPanel"/> control.
            </summary>
        </member>
        <member name="M:OgamaControls.IColorControl.OnColorChanged(System.EventArgs)">
            <summary>
            On ColorChanged event handler. Should raise delegate.
            </summary>
            <param name="e">Empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="E:OgamaControls.IColorControl.ColorChanged">
            <summary>
            Event. Raised, when color has changed
            </summary>
        </member>
        <member name="P:OgamaControls.IColorControl.CurrentColor">
            <summary>
            Gets or sets <see cref="T:System.Drawing.Color"/> of button
            </summary>
        </member>
        <member name="F:OgamaControls.ColorButton._color">
            <summary>
            Buttons color member.
            </summary>
        </member>
        <member name="F:OgamaControls.ColorButton.autoButtonString">
            <summary>
            Description of <see cref="T:OgamaControls.ColorPanel"/>s automatic button.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorButton.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorButton.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="container">owning container</param>
        </member>
        <member name="M:OgamaControls.ColorButton.ColorButton_Click(System.Object,System.EventArgs)">
            <summary>
            OnClick event handler. Shows color selection panel of type <see cref="T:OgamaControls.ColorPanel"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.ColorButton.ColorButton_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaint event handler. Draws a filled rectangle with the buttons color
            inside the button area and a small triangle to show the 
            colorpanel dropdown property to the user
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.ColorButton.OnColorChanged(System.EventArgs)">
            <summary>
            Raised when buttons color has changed
            </summary>
            <param name="e">Empty <see cref="T:System.EventArgs"/></param>.
        </member>
        <member name="F:OgamaControls.ColorButton.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.ColorButton.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.ColorButton.ColorChanged">
            <summary>
            Event. Raised, when buttons color has changed
            </summary>
        </member>
        <member name="P:OgamaControls.ColorButton.CurrentColor">
            <summary>
            Gets or sets current buttons color
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value of the button.</value>
        </member>
        <member name="P:OgamaControls.ColorButton.AutoButtonString">
            <summary>
            Description of <see cref="T:OgamaControls.ColorPanel"/>s automatic button.
            </summary>
            <value>The <see cref="T:System.String"/> decription of the button.</value>
        </member>
        <member name="T:OgamaControls.ColorPanel">
            <summary>
            Color selection panel adopted from paint application.
            Offers a lot of predefined colors and additional a custom color selection
            via the <see cref="T:System.Windows.Forms.ColorDialog"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.ColorPanel.autoButton">
            <summary>
            <see cref="T:System.String"/> at top of panel to name the automatic color selection
            </summary>
        </member>
        <member name="F:OgamaControls.ColorPanel.moreButton">
            <summary>
            <see cref="T:System.String"/> at bottom of panel to name the possibility of choosing new colors.
            </summary>
        </member>
        <member name="F:OgamaControls.ColorPanel._colorControl">
            <summary>
            Parent color control (Button, Dropdown) that owns this panel
            </summary>
        </member>
        <member name="F:OgamaControls.ColorPanel._currentColor">
            <summary>
            Current active color
            </summary>
        </member>
        <member name="F:OgamaControls.ColorPanel.colorIndex">
            <summary>
            Color index of current color.
            </summary>
        </member>
        <member name="F:OgamaControls.ColorPanel.colorList">
            <summary>
            Some standard colors in the dropdown list.
            </summary>
        </member>
        <member name="F:OgamaControls.ColorPanel.keyboardIndex">
            <summary>
            Index of keyboard.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorPanel.#ctor(System.Drawing.Point,OgamaControls.IColorControl,System.Drawing.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="pt">Position of the new panel.</param>
            <param name="clrControl">owning control</param>
            <param name="currentColor">current color to use</param>
        </member>
        <member name="M:OgamaControls.ColorPanel.ColorPanel_Click(System.Object,System.EventArgs)">
            <summary>
            ColorPanel click event handler. 
            Selects color from predefined colors if a color is marked.
            Opens standard windows <see cref="T:System.Windows.Forms.ColorDialog"/>, if requested.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.ColorPanel.ColorPanel_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key Down event handler. Moves color index in response to 
            arrow keys.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">KeyEventArgs</param>
        </member>
        <member name="M:OgamaControls.ColorPanel.ColorPanel_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse down event handler. closes panel if cursor is out of client rectangle
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.ColorPanel.ColorPanel_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move event handler. Selects color according to mouse position.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.ColorPanel.ColorPanel_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event handler. Paints the panel with predefined color rectangles
            an automatic color button and a custom color button.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.ColorPanel.DrawButton(System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Draw color button.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="text">text</param>
            <param name="index">index of color</param>
            <param name="selected">True if button is selected</param>
        </member>
        <member name="M:OgamaControls.ColorPanel.MoveIndex(System.Int32)">
            <summary>
            Move color select cursor
            </summary>
            <param name="delta">steps</param>
        </member>
        <member name="M:OgamaControls.ColorPanel.SetColorIndex(System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
            <summary>
            Set current color.
            </summary>
            <param name="rc">Predefined color rectangle</param>
            <param name="pt">mouse point</param>
            <param name="index">index of color to select</param>
            <returns>true if pt lies in given rectangle</returns>
        </member>
        <member name="F:OgamaControls.ColorPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.ColorPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OgamaControls.ColorPanel.Automatic">
            <summary>
            Value of automatic string.
            </summary>
            <value>A <see cref="T:System.String"/> with the text in the automatic button section.</value>
        </member>
        <member name="P:OgamaControls.ColorPanel.MoreColors">
            <summary>
            string for more colors.
            </summary>
            <value>A <see cref="T:System.String"/> with the text for the more colors section.</value>
        </member>
        <member name="T:OgamaControls.ColorDropdown">
            <summary>
            Custom <see cref="T:System.Windows.Forms.ComboBox"/> for <see cref="T:System.Drawing.Color"/> selection.
            Shows a <see cref="T:OgamaControls.ColorPanel"/> on click.
            </summary>
        </member>
        <member name="F:OgamaControls.ColorDropdown._color">
            <summary>
            Dropdowns color member.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorDropdown.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorDropdown.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="container">owning container</param>
        </member>
        <member name="M:OgamaControls.ColorDropdown.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            On mouse down event handler. Shows color selection panel of type <see cref="T:OgamaControls.ColorPanel"/>.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.ColorDropdown.OnColorChanged(System.EventArgs)">
            <summary>
            On color changed event handler. Raises delegate.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="F:OgamaControls.ColorDropdown.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorDropdown.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.ColorDropdown.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.ColorDropdown.ColorChanged">
            <summary>
            Event. Raised when color has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.ColorDropdown.CurrentColor">
            <summary>
            Gets or sets the dropdowns current color
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value of the dropdown</value>
        </member>
        <member name="T:OgamaControls.BufferedGraphicsRenderPanel">
            <summary>
            Double buffered panel which renders the <see cref="T:System.Drawing.BufferedGraphics"/>
            given.
            </summary>
        </member>
        <member name="F:OgamaControls.BufferedGraphicsRenderPanel.drawingSurface">
            <summary>
            The <see cref="T:System.Drawing.BufferedGraphics"/> that makes up the 
            graphics buffer that should be drawn onto this
            <see cref="T:System.Windows.Forms.Panel"/>s surface.
            </summary>
        </member>
        <member name="M:OgamaControls.BufferedGraphicsRenderPanel.#ctor">
            <summary>
            Initializes a new instance of the BufferedGraphicsRenderPanel class.
            Setting the <see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint"/>,
            <see cref="F:System.Windows.Forms.ControlStyles.UserPaint"/> and <see cref="F:System.Windows.Forms.ControlStyles.DoubleBuffer"/> styles.
            </summary>
        </member>
        <member name="M:OgamaControls.BufferedGraphicsRenderPanel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Does nothing
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> with the event data.</param>
        </member>
        <member name="M:OgamaControls.BufferedGraphicsRenderPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. Renders the <see cref="T:System.Drawing.BufferedGraphics"/>
            into the <see cref="T:System.Drawing.Graphics"/> of this control if there is any
            otherwise clears the surface with the controls BackColor.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs"/> with the event data.</param>
        </member>
        <member name="F:OgamaControls.BufferedGraphicsRenderPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.BufferedGraphicsRenderPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.BufferedGraphicsRenderPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OgamaControls.BufferedGraphicsRenderPanel.DrawingSurface">
            <summary>
            Sets the <see cref="T:System.Drawing.BufferedGraphics"/> that makes up the 
            graphics buffer that should be drawn onto this
            <see cref="T:System.Windows.Forms.Panel"/>s surface.
            </summary>
        </member>
        <member name="T:OgamaControls.DoubleBufferListView">
            <summary>
            This is a customized <see cref="T:System.Windows.Forms.ListView"/> with protected property 
            <see cref="P:System.Windows.Forms.ListView.DoubleBuffered"/> set to true.
            </summary>
        </member>
        <member name="M:OgamaControls.DoubleBufferListView.#ctor">
            <summary>
            Constructor. Sets double buffering.
            </summary>
        </member>
        <member name="F:OgamaControls.DoubleBufferListView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.DoubleBufferListView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.DoubleBufferListView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OgamaControls.DoubleBufferPanel">
            <summary>
            Double buffered panel.
            </summary>
        </member>
        <member name="M:OgamaControls.DoubleBufferPanel.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.DoubleBufferPanel.GetThreadSafePointInClientCoordinates(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.DoubleBufferPanel.GetThreadSafePointInScreenCoordinates(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.DoubleBufferPanel.ThreadSafeFocus">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:OgamaControls.DoubleBufferPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.DoubleBufferPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.DoubleBufferPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OgamaControls.DoubleBufferPanel.GetThreadSafePointInClientCoordinatesDelegate">
            <summary>
            support for thread-safe version
            </summary>
            <returns></returns>
        </member>
        <member name="T:OgamaControls.DoubleBufferPanel.GetThreadSafePointInScreenCoordinatesDelegate">
            <summary>
            support for thread-safe version
            </summary>
            <returns></returns>
        </member>
        <member name="T:OgamaControls.DoubleBufferPanel.ThreadSafeFocusDelegate">
            <summary>
            support for thread-safe version
            </summary>
            <returns></returns>
        </member>
        <member name="T:OgamaControls.FontButton">
            <summary>
            The font button control is a specialized button for selecting fonts from the standard
            windows forms font dialog. Its specific is a triangle that imitates a dropdown
            possibility and a onclick opening of the font selection dialog.
            Its text "Sample..." is drawn with the currently selected font.
            </summary>
        </member>
        <member name="F:OgamaControls.FontButton.DEFAULTTEXTSIZE">
            <summary>
            Default text size of font button
            </summary>
        </member>
        <member name="F:OgamaControls.FontButton.DEFAULTCAPTION">
            <summary>
            Default caption of font button
            </summary>
        </member>
        <member name="F:OgamaControls.FontButton._panelVisible">
            <summary>
            Flag. True, if font selection panel is visible
            </summary>
        </member>
        <member name="M:OgamaControls.FontButton.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OgamaControls.FontButton.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Container Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.FontButton.FontButton_Click(System.Object,System.EventArgs)">
            <summary>
            On Click event handler. Opens <see cref="T:System.Windows.Forms.FontDialog"/> dialog and
            raises <see cref="E:System.Windows.Forms.Control.FontChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.FontButton.FontButton_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            On Paint event handler. Draws a button with the string "Sample ..."
            in the buttons font and a triangle to show the drop down possibility.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:OgamaControls.FontButton.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.FontButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.FontButton.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OgamaControls.FontButton.PanelVisible">
            <summary>
            Gets or sets font selection panels visibility.
            </summary>
            <value>A <see cref="T:System.Boolean"/> whether the font selection dialog is visible.</value>
        </member>
        <member name="T:OgamaControls.ObjectListView">
            <summary>
            An object list displays 'aspects' of a collection of objects in a listview control.
            </summary>
            <remarks>
            <para>
            The intelligence for this control is in the columns. OLVColumns are
            extended so they understand how to fetch an 'aspect' from each row
            object. They also understand how to sort by their aspect, and
            how to group them.
            </para>
            <para>
            Aspects are extracted by giving the name of a method to be called or a
            property to be fetched. These names can be simple names or they can be dotted
            to chain property access e.g. "Owner.Address.Postcode".
            Aspects can also be extracted by installing a delegate.
            </para>
            <para>
            Sorting by column clicking and grouping by column are handled automatically.
            </para>
            <para>
            Right clicking on the column header should present a popup menu that allows the user to
            choose which columns will be visible in the list. This behaviour can be disabled by
            setting SelectColumnsOnRightClick to false.
            </para>
            <para>
            This list puts sort indicators in the column headers to show the column sorting direction.
            On Windows XP and later, the system standard images are used.
            If you wish to replace the standard images with your own images, put entries in the small image list
            with the key values "sort-indicator-up" and "sort-indicator-down".
            </para>
            <para>
            For these classes to build correctly, the project must have references to these assemblies:
            <list>
            <item>System.Data</item>
            <item>System.Design</item>
            <item>System.Drawing</item>
            <item>System.Windows.Forms (obviously)</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.#ctor">
            <summary>
            Create an ObjectListView
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.SetObjects(System.Collections.IEnumerable)">
            <summary>
            Set the collection of objects that will be shown in this list view.
            </summary>
            <remark>This method can safely be called from background threads.</remark>
            <remarks>The list is updated immediately</remarks>
            <param name="collection">The objects to be displayed</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.AddObject(System.Object)">
            <summary>
            Add the given model object to this control.
            </summary>
            <param name="modelObject">The model object to be displayed</param>
            <remarks>See AddObjects() for more details</remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.AddObjects(System.Collections.ICollection)">
            <summary>
            Add the given collection of model objects to this control.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
            <remarks>
            <para>The added objects will appear in their correct sort position, if sorting
            is active. Otherwise, they will appear at the end of the list.</para>
            <para>No check is performed to see if any of the objects are already in the ListView.</para>
            <para>The method uses the ObjectsAsList property. See that property for a
            description of what is does.</para>
            <para>Null objects are silently ignored.</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.RemoveObject(System.Object)">
            <summary>
            Remove the given model object from the ListView
            </summary>
            <param name="modelObject">The model to be removed</param>
            <remarks>See RemoveObjects() for more details</remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.RemoveObjects(System.Collections.ICollection)">
            <summary>
            Remove all of the given objects from the control
            </summary>
            <param name="modelObjects">Collection of objects to be removed</param>
            <remarks>
            <para>Nulls and model objects that are not in the ListView are silently ignored.</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.IncrementalUpdate(System.Collections.IEnumerable)">
            <summary>
            Update the list to reflect the contents of the given collection, without affecting
            the scrolling position, selection or sort order.
            </summary>
            <param name="collection">The objects to be displayed</param>
            <remarks>
            <para>This method is about twice as slow as SetObjects().</para>
            <para>This method is experimental -- it may disappear in later versions of the code.</para>
            <para>There has to be a better way to do this! JPP 15/1/2008</para>
            <para>In most situations, if you need this functionality, use a FastObjectListView instead. JPP 2/2/2008</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.ClearObjects">
            <summary>
            Remove all items from this list
            </summary>
            <remark>This method can safely be called from background threads.</remark>
        </member>
        <member name="M:OgamaControls.ObjectListView.BuildList">
            <summary>
            Build/rebuild all the list view items in the list
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.BuildList(System.Boolean)">
            <summary>
            Build/rebuild all the list view items in the list
            </summary>
            <param name="shouldPreserveState">If this is true, the control will try to preserve the selection
            and the scroll position (see Remarks)
            </param>
            <remarks>
            <para>
            Use this method in situations were the contents of the list is basically the same
            as previously.
            </para>
            <para>
            Due to limitations in .NET's ListView, the scroll position is only preserved if
            the control is in Details view AND it is not showing groups.
            </para>
            </remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.Sort">
            <summary>
            Sort the items by the last sort column
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.BuildGroups">
            <summary>
            Organise the view items into groups, based on the last sort column or the first column
            if there is no last sort column
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.BuildGroups(OgamaControls.OLVColumn)">
            <summary>
            Organise the view items into groups, based on the given column
            </summary>
            <param name="column">The column whose values should be used for sorting.</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.PauseAnimations(System.Boolean)">
            <summary>
            Pause (or unpause) all animations in the list
            </summary>
            <param name="isPause">true to pause, false to unpause</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.CalculateReasonableTileSize">
            <summary>
            Give the listview a reasonable size of its tiles, based on the number of lines of
            information that each tile is going to display.
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.ChangeToFilteredColumns(System.Windows.Forms.View)">
            <summary>
            Rebuild this list for the given view
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.RebuildColumns">
            <summary>
            Rebuild the columns based upon its current view and column visibility settings
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.CopySelectionToClipboard">
            <summary>
            Copy a text and html representation of the selected rows onto the clipboard.
            </summary>
            <remarks>Be careful when using this with virtual lists. If the user has selected
            10,000,000 rows, this method will faithfully try to copy all of them to the clipboard.
            From the user's point of view, your program will appear to have hung.</remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.ConvertToHtmlFragment(System.String)">
            <summary>
            Convert the fragment of HTML into the Clipboards HTML format.
            </summary>
            <remarks>The HTML format is found here http://msdn2.microsoft.com/en-us/library/aa767917.aspx
            </remarks>
            <param name="fragment">The HTML to put onto the clipboard. It must be valid HTML!</param>
            <returns>A string that can be put onto the clipboard and will be recognized as HTML</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.SaveState">
            <summary>
            Return a byte array that represents the current state of the ObjectListView, such
            that the state can be restored by RestoreState()
            </summary>
            <remarks>
            <para>The state of an ObjectListView includes the attributes that the user can modify:
            <list>
            <item>current view (i.e. Details, Tile, Large Icon...)</item>
            <item>sort column and direction</item>
            <item>column order</item>
            <item>column widths</item>
            <item>column visibility</item>
            </list>
            </para>
            <para>
            It does not include selection or the scroll position.
            </para>
            </remarks>
            <returns>A byte array representing the state of the ObjectListView</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.RestoreState(System.Byte[])">
            <summary>
            Restore the state of the control from the given string, which must have been
            produced by SaveState()
            </summary>
            <param name="state">A byte array returned from SaveState()</param>
            <returns>Returns true if the state was restored</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.HandleColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            Event handler for the column click event
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.HandleItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Handle when a user checks/unchecks a row
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override the basic message pump for this control
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.HandlePrePaint">
            <summary>
            Perform any steps needed before painting the control
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.HandlePostPaint">
            <summary>
            Perform any steps needed after painting the control
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnCreateControl">
            <summary>
            When the control is created capture the messages for the header.
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.HandleContextMenu(System.Windows.Forms.Message@)">
            <summary>
            The user wants to see the context menu.
            </summary>
            <param name="m">The windows message</param>
            <returns>A bool indicating if this message has been handled</returns>
            <remarks>
            We want to ignore context menu requests that are triggered by right clicks on the header
            </remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.HandleNotify(System.Windows.Forms.Message@)">
            <summary>
            In the notification messages, we handle attempts to change the width of our columns
            </summary>
            <param name="m">The msg to be processed</param>
            <returns>bool to indicate if the msg has been handled</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.HandleHeaderRightClick(System.Int32)">
            <summary>
            The user has right clicked on the column headers. Do whatever is required
            </summary>
            <returns>Return true if this event has been handle</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.HandleHeaderRightClick">
            <summary>
            The user has right clicked on the column headers. Do whatever is required
            </summary>
            <returns>Return true if this event has been handle</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnColumnRightClick(System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            Tell the world when a cell is about to finish being edited.
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.ShowColumnSelectMenu(System.Drawing.Point)">
            <summary>
            Show a popup menu at the given point which will allow the user to choose which columns
            are visible on this listview
            </summary>
            <param name="pt">Where should the menu be placed</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)">
            <summary>
            Override the OnColumnReordered method to do what we want
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.ResizeFreeSpaceFillingColumns">
            <summary>
            Resize our space filling columns so they fill any unoccupied width in the control
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetColumn(System.Int32)">
            <summary>
            Return the column at the given index
            </summary>
            <param name="index">Index of the column to be returned</param>
            <returns>An OLVColumn</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetColumn(System.String)">
            <summary>
            Return the column at the given title.
            </summary>
            <param name="name">Name of the column to be returned</param>
            <returns>An OLVColumn</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetItemCount">
            <summary>
            Return the number of items in the list
            </summary>
            <returns>the number of items in the list</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetItem(System.Int32)">
            <summary>
            Return the item at the given index
            </summary>
            <param name="index">Index of the item to be returned</param>
            <returns>An OLVListItem</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetModelObject(System.Int32)">
            <summary>
            Return the model object at the given index
            </summary>
            <param name="index">Index of the model object to be returned</param>
            <returns>A model object</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetItemAt(System.Int32,System.Int32,OgamaControls.OLVColumn@)">
            <summary>
            Find the item and column that are under the given co-ords
            </summary>
            <param name="x">X co-ord</param>
            <param name="y">Y co-ord</param>
            <param name="selectedColumn">The column under the given point</param>
            <returns>The item under the given point. Can be null.</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.SelectAll">
            <summary>
            Select all rows in the listview
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.DeselectAll">
            <summary>
            Deselect all rows in the listview
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetSelectedObject">
            <summary>
            Return the model object of the row that is selected or null if there is no selection or more than one selection
            </summary>
            <returns>Model object or null</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetSelectedObjects">
            <summary>
            Return the model objects of the rows that are selected or an empty collection if there is no selection
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetCheckedObject">
            <summary>
            Return the model object of the row that is checked or null if no row is checked
            or more than one row is checked
            </summary>
            <returns>Model object or null</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetCheckedObjects">
            <summary>
            Return the model objects of the rows that are checked or an empty collection if no row is checked
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.SelectObject(System.Object)">
            <summary>
            Select the row that is displaying the given model object. All other rows are deselected.
            </summary>
            <param name="modelObject">The object to be selected or null to deselect all</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.SelectObjects(System.Collections.IList)">
            <summary>
            Select the rows that is displaying any of the given model object. All other rows are deselected.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.RefreshItem(OgamaControls.OLVListItem)">
            <summary>
            Update the ListViewItem with the data from its associated model.
            </summary>
            <remarks>This method does not resort or regroup the view. It simply updates
            the displayed data of the given item</remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.RefreshObject(System.Object)">
            <summary>
            Update the rows that are showing the given objects
            </summary>
            <remarks>This method does not resort or regroup the view.</remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.RefreshObjects(System.Collections.IList)">
            <summary>
            Update the rows that are showing the given objects
            </summary>
            <remarks>
            <para>This method does not resort or regroup the view.</para>
            <para>This method can safely be called from background threads.</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.RefreshSelectedObjects">
            <summary>
            Update the rows that are selected
            </summary>
            <remarks>This method does not resort or regroup the view.</remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.IndexOf(System.Object)">
            <summary>
            Find the given model object within the listview and return its index
            </summary>
            <remarks>Technically, this method will work with virtual lists, but it will
            probably be very slow.</remarks>
            <param name="modelObject">The model object to be found</param>
            <returns>The index of the object. -1 means the object was not present</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetNextItem(System.Windows.Forms.ListViewItem)">
            <summary>
            Return the ListViewItem that appears immediately after the given item.
            If the given item is null, the first item in the list will be returned.
            Return null if the given item is the last item.
            </summary>
            <param name="itemToFind">The item that is before the item that is returned, or null</param>
            <returns>A ListViewItem</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetPreviousItem(System.Windows.Forms.ListViewItem)">
            <summary>
            Return the ListViewItem that appears immediately before the given item.
            If the given item is null, the last item in the list will be returned.
            Return null if the given item is the first item.
            </summary>
            <param name="itemToFind">The item that is before the item that is returned</param>
            <returns>A ListViewItem</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.Freeze">
            <summary>
            Freeze the listview so that it no longer updates itself.
            </summary>
            <remarks>Freeze()/Unfreeze() calls nest correctly</remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.Unfreeze">
            <summary>
            Unfreeze the listview. If this call is the outermost Unfreeze(),
            the contents of the listview will be rebuilt.
            </summary>
            <remarks>Freeze()/Unfreeze() calls nest correctly</remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.DoUnfreeze">
            <summary>
            Do the actual work required when the listview is unfrozen
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.Sort(System.String)">
            <summary>
            Sort the items in the list view by the values in the given column.
            If ShowGroups is true, the rows will be grouped by the given column,
            otherwise, it will be a straight sort.
            </summary>
            <param name="columnToSortName">The name of the column whose values will be used for the sorting</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.Sort(System.Int32)">
            <summary>
            Sort the items in the list view by the values in the given column.
            If ShowGroups is true, the rows will be grouped by the given column,
            otherwise, it will be a straight sort.
            </summary>
            <param name="columnToSortIndex">The index of the column whose values will be used for the sorting</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.Sort(OgamaControls.OLVColumn)">
            <summary>
            Sort the items in the list view by the values in the given column.
            If ShowGroups is true, the rows will be grouped by the given column,
            otherwise, it will be a straight sort.
            </summary>
            <param name="columnToSort">The column whose values will be used for the sorting</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.ShowSortIndicator">
            <summary>
            Put a sort indicator next to the text of the sort column
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.ShowSortIndicator(OgamaControls.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Put a sort indicator next to the text of the given given column
            </summary>
            <param name="columnToSort">The column to be marked</param>
            <param name="sortOrder">The sort order in effect on that column</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.MakeSortIndicatorImages">
            <summary>
            If the sort indicator images don't already exist, this method will make and install them
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.SetIconSpacing(System.Drawing.Size)">
            <summary>
            Sets a new spacing for the listview items.
            </summary>
            <param name="size">A <see cref="T:System.Drawing.Size"/> with the x and y spacing.</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.FillInValues(OgamaControls.OLVListItem,System.Object)">
            <summary>
            Fill in the given OLVListItem with values of the given row
            </summary>
            <param name="lvi">the OLVListItem that is to be stuff with values</param>
            <param name="rowObject">the model object from which values will be taken</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.SetAllSubItemImages">
            <summary>
            Setup all subitem images on all rows
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.SetSubItemImages(System.Int32,OgamaControls.OLVListItem)">
            <summary>
            Tell the underlying list control which images to show against the subitems
            </summary>
            <param name="rowIndex">the index at which the item occurs</param>
            <param name="item">the item whose subitems are to be set</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.SetSubItemImages(System.Int32,OgamaControls.OLVListItem,System.Boolean)">
            <summary>
            Tell the underlying list control which images to show against the subitems
            </summary>
            <param name="rowIndex">the index at which the item occurs</param>
            <param name="item">the item whose subitems are to be set</param>
            <param name="shouldClearImages">will existing images be cleared if no new image is provided?</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.PrepareAlternateBackColors">
             <summary>
             Prepare the listview to show alternate row backcolors
             </summary>
             <remarks>We cannot rely on lvi.Index in this method.
             In a straight list, lvi.Index is the display index, and can be used to determine
             whether the row should be colored. But when organised by groups, lvi.Index is not
             useable because it still refers to the position in the overall list, not the display order.
            </remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.CorrectSubItemColors(System.Windows.Forms.ListViewItem)">
            <summary>
            For some reason, UseItemStyleForSubItems doesn't work for the colors
            when owner drawing the list, so we have to specifically give each subitem
            the desired colors
            </summary>
            <param name="olvi">The item whose subitems are to be corrected</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetActualImageIndex(System.Object)">
            <summary>
            Convert the given image selector to an index into our image list.
            Return -1 if that's not possible
            </summary>
            <param name="imageSelector"></param>
            <returns>Index of the image in the imageList, or -1</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.ForceSubItemImagesExStyle">
            <summary>
            Make sure the ListView has the extended style that says to display subitem images.
            </summary>
            <remarks>This method must be called after any .NET call that update the extended styles
            since they seem to erase this setting.</remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.SetSubItemImage(System.Int32,System.Int32,System.Int32)">
            <summary>
            For the given item and subitem, make it display the given image
            </summary>
            <param name="itemIndex">row number (0 based)</param>
            <param name="subItemIndex">subitem (0 is the item itself)</param>
            <param name="imageIndex">index into the image list</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.SetupExternalImageList">
            <summary>
            Update our externally visible image list so it holds the same images as our shadow list, but sized correctly
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.MakeResizedImageList(System.Int32,System.Windows.Forms.ImageList)">
            <summary>
            Return a copy of the given source image list, where each image has been resized to be height x height in size.
            If source is null, an empty image list of the given size is returned
            </summary>
            <param name="height">Height and width of the new images</param>
            <param name="source">Source of the images (can be null)</param>
            <returns>A new image list</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.MakeResizedImage(System.Int32,System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Return a bitmap of the given height x height, which shows the given image, centred.
            </summary>
            <param name="height">Height and width of new bitmap</param>
            <param name="image">Image to be centred</param>
            <param name="transparent">The background color</param>
            <returns>A new bitmap</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)">
            <summary>
            Owner draw the column header
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)">
            <summary>
            Owner draw the item
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)">
            <summary>
            Owner draw a single subitem
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            This method is called every time a row is selected or deselected. This can be
            a pain if the user shift-clicks 100 rows. We override this method so we can
            trigger one event for any number of select/deselects that come from one user action
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.Application_Idle(System.Object,System.EventArgs)">
            <summary>
            The application is idle. Trigger a SelectionChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnSelectionChanged(System.EventArgs)">
            <summary>
            Trigger the SelectionChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            We need the click count in the mouse up event, but that is always 1.
            So we have to remember the click count from the preceding mouse down event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Check to see if we need to start editing a cell
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.ShouldStartCellEdit(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Should we start editing the cell?
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Handle a key press on this control. We specifically look for F2 which edits the primary column,
            or a Tab character during an edit operation, which tries to start editing on the next (or previous) cell.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.EditSubItem(OgamaControls.OLVListItem,System.Int32)">
            <summary>
            Begin an edit operation on the given cell.
            </summary>
            <remarks>This performs various sanity checks and passes off the real work to StartCellEdit().</remarks>
            <param name="item">The row to be edited</param>
            <param name="subItemIndex">The index of the cell to be edited</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.StartCellEdit(OgamaControls.OLVListItem,System.Int32)">
            <summary>
            Really start an edit operation on a given cell. The parameters are assumed to be sane.
            </summary>
            <param name="item">The row to be edited</param>
            <param name="subItemIndex">The index of the cell to be edited</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.SetControlValue(System.Windows.Forms.Control,System.Object,System.String)">
            <summary>
            Try to give the given value to the provided control. Fall back to assigning a string
            if the value assignment fails.
            </summary>
            <param name="c">A control</param>
            <param name="value">The value to be given to the control</param>
            <param name="stringValue">The string to be given if the value doesn't work</param>
        </member>
        <member name="M:OgamaControls.ObjectListView.ConfigureControl">
            <summary>
            Setup the given control to be a cell editor
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetControlValue(System.Windows.Forms.Control)">
            <summary>
            Return the value that the given control is showing
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.CellEditor_Leave(System.Object,System.EventArgs)">
            <summary>
            Called when the cell editor loses focus. Time to commit the change
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.ObjectListView.CalculateCellBounds(OgamaControls.OLVListItem,System.Int32)">
            <summary>
            Return the bounds of the given cell
            </summary>
            <param name="item">The row to be edited</param>
            <param name="subItemIndex">The index of the cell to be edited</param>
            <returns>A Rectangle</returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetCellEditor(OgamaControls.OLVListItem,System.Int32)">
            <summary>
            Return a control that can be used to edit the value of the given cell.
            </summary>
            <param name="item">The row to be edited</param>
            <param name="subItemIndex">The index of the cell to be edited</param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.MakeDefaultCellEditor(OgamaControls.OLVColumn)">
            <summary>
            Return a TextBox that can be used as a default cell editor.
            </summary>
            <param name="column">What column does the cell belong to?</param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.ObjectListView.CancelCellEdit">
            <summary>
            Stop editing a cell and throw away any changes.
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.PossibleFinishCellEditing">
            <summary>
            If a cell edit is in progress, finish the edit
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.FinishCellEdit">
            <summary>
            Finish the cell edit operation, writing changed data back to the model object
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.CleanupCellEdit">
            <summary>
            Remove all trace of any existing cell edit operation
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnCellEditStarting(OgamaControls.ObjectListView.CellEditEventArgs)">
            <summary>
            Tell the world when a cell is about to be edited.
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.OnCellEditFinishing(OgamaControls.ObjectListView.CellEditEventArgs)">
            <summary>
            Tell the world when a cell is about to finish being edited.
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.GetFilteredColumns(System.Windows.Forms.View)">
            <summary>
            Return a collection of columns that are appropriate to the given view.
            Only Tile and Details have columns; all other views have 0 columns.
            </summary>
            <param name="view">Which view are the columns being calculate for?</param>
            <returns>A list of columns</returns>
        </member>
        <member name="F:OgamaControls.ObjectListView.lastSortColumn">
            <summary>
            Which column did we last sort by
            </summary>
        </member>
        <member name="F:OgamaControls.ObjectListView.lastSortOrder">
            <summary>
            Which direction did we last sort
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.AllColumns">
            <summary>
            Get or set all the columns that this control knows about.
            Only those columns where IsVisible is true will be seen by the user.
            </summary>
            <remarks>If you want to add new columns programmatically, add them to
            AllColumns and then call RebuildColumns(). Normally, you do not have to
            deal with this property directly. Just use the IDE.</remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.AlternateRowBackColor">
            <summary>
            If every second row has a background different to the control, what color should it be?
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.AlternateRowBackColorOrDefault">
            <summary>
            Return the alternate row background color that has been set, or the default color
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.BaseSmallImageList">
            <summary>
            Give access to the image list that is actually being used by the control
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.CellEditActivation">
            <summary>
            How does the user indicate that they want to edit a cell?
            None means that the listview cannot be edited.
            </summary>
            <remarks>Columns can also be marked as editable.</remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.ColumnsForTileView">
            <summary>
            Get/set the list of columns that should be used when the list switches to tile view.
            </summary>
            <remarks>If no list of columns has been installed, this value will default to the
            first column plus any column where IsTileViewColumn is true.</remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.ColumnsInDisplayOrder">
            <summary>
            Return the visible columns in the order they are displayed to the user
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.EmptyListMsg">
            <summary>
            If there are no items in this list view, what message should be drawn onto the control?
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.EmptyListMsgFont">
            <summary>
            What font should the 'list empty' message be drawn in?
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.EmptyListMsgFontOrDefault">
            <summary>
            Return the font for the 'list empty' message or a default
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.Frozen">
            <summary>
            Get or set whether or not the listview is frozen. When the listview is
            frozen, it will not update itself.
            </summary>
            <remarks><para>The Frozen property is similar to the methods Freeze()/Unfreeze()
            except that changes to the Frozen property do not nest.</para></remarks>
            <example>objectListView1.Frozen = false; // unfreeze the control regardless of the number of Freeze() calls
            </example>
        </member>
        <member name="P:OgamaControls.ObjectListView.GroupWithItemCountFormat">
            <summary>
            When a group title has an item count, how should the lable be formatted?
            </summary>
            <remarks>
            The given format string can/should have two placeholders:
            <list type="bullet">
            <item>{0} - the original group title</item>
            <item>{1} - the number of items in the group</item>
            </list>
            </remarks>
            <example>"{0} [{1} items]"</example>
        </member>
        <member name="P:OgamaControls.ObjectListView.GroupWithItemCountFormatOrDefault">
            <summary>
            Return this.GroupWithItemCountFormat or a reasonable default
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.GroupWithItemCountSingularFormat">
            <summary>
            When a group title has an item count, how should the lable be formatted if
            there is only one item in the group?
            </summary>
            <remarks>
            The given format string can/should have two placeholders:
            <list type="bullet">
            <item>{0} - the original group title</item>
            <item>{1} - the number of items in the group (always 1)</item>
            </list>
            </remarks>
            <example>"{0} [{1} item]"</example>
        </member>
        <member name="P:OgamaControls.ObjectListView.GroupWithItemCountSingularFormatOrDefault">
            <summary>
            Return this.GroupWithItemCountSingularFormat or a reasonable default
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.HasEmptyListMsg">
            <summary>
            Does this listview have a message that should be drawn when the list is empty?
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.IsCellEditing">
            <summary>
            Return true if a cell edit operation is currently happening
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.Objects">
            <summary>
            Get/set the collection of objects that this list will show
            </summary>
            <remarks>The contents of the control will be updated immediately after setting this property</remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.ObjectsAsList">
            <summary>
            Get our collection of model objects as an ArrayList.
            </summary>
            <remarks>
            If an ArrayList was passed to SetObjects(), this property will simply return that ArrayList.
            Otherwise, it will convert any existing collection into a new ArrayList. This effectively
            separates the 'objects' instance variable from its source.
            </remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.RowHeight">
            <summary>
            Specify the height of each row in the control in pixels.
            </summary>
            <remarks><para>The row height in a listview is normally determined by the font size and the small image list size.
            This setting allows that calculation to be overridden (within reason: you still cannot set the line height to be
            less than the line height of the font used in the control). </para>
            <para>Setting it to -1 means use the normal calculation method.</para>
            <para><bold>This feature is experiemental!</bold> Strange things may happen to your program,
            your spouse or your pet if you use it.</para>
            </remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.SecondarySortColumn">
            <summary>
            Get/set the column that will be used to resolve comparisons that are equal when sorting.
            </summary>
            <remarks>There is no user interface for this setting. It must be set programmatically.
            The default is the first column.</remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.SecondarySortOrder">
            <summary>
            When the SecondarySortColumn is used, in what order will it compare results?
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.SelectColumnsOnRightClick">
            <summary>
            When the user right clicks on the column headers, should a menu be presented which will allow
            them to choose which columns will be shown in the view?
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.SelectColumnsMenuStaysOpen">
            <summary>
            When the column select menu is open, should it stay open after an item is selected?
            Staying open allows the user to turn more than one column on or off at a time.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.SelectedIndex">
            <summary>
            Return the index of the row that is currently selected. If no row is selected,
            or more than one is selected, return -1.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.SelectedItem">
            <summary>
            Get the ListViewItem that is currently selected . If no row is selected, or more than one is selected, return null.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.SelectedObject">
            <summary>
            Get the model object from the currently selected row. If no row is selected, or more than one is selected, return null.
            Select the row that is displaying the given model object. All other rows are deselected.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.SelectedObjects">
            <summary>
            Get the model objects from the currently selected rows. If no row is selected, the returned List will be empty.
            When setting this value, select the rows that is displaying the given model objects. All other rows are deselected.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.ShowSortIndicators">
            <summary>
            Should the list view show a bitmap in the column header to show the sort direction?
            </summary>
            <remarks>
            The only reason for not wanting to have sort indicators is that, on pre-XP versions of
            Windows, having sort indicators required the ListView to have a small image list, and
            as soon as you give a ListView a SmallImageList, the text of column 0 is bumped 16
            pixels to the right, even if you never used an image.
            </remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.ShowImagesOnSubItems">
            <summary>
            Should the list view show images on subitems?
            </summary>
            <remarks>
            <para>Under Windows, this works by sending messages to the underlying
            Windows control. To make this work under Mono, we would have to owner drawing the items :-(</para></remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.ShowItemCountOnGroups">
            <summary>
            This property controls whether group labels will be suffixed with a count of items.
            </summary>
            <remarks>
            The format of the suffix is controlled by GroupWithItemCountFormat/GroupWithItemCountSingularFormat properties
            </remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.SmallImageList">
            <summary>
            Override the SmallImageList property so we can correctly shadow its operations.
            </summary>
            <remarks><para>If you use the RowHeight property to specify the row height, the SmallImageList
            must be fully initialised before setting/changing the RowHeight. If you add new images to the image
            list after setting the RowHeight, you must assign the imagelist to the control again. Something as simple
            as this will work:
            <code>listView1.SmallImageList = listView1.SmallImageList;</code></para>
            </remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.SortGroupItemsByPrimaryColumn">
            <summary>
            When the listview is grouped, should the items be sorted by the primary column?
            If this is false, the items will be sorted by the same column as they are grouped.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.UpdateSpaceFillingColumnsWhenDraggingColumnDivider">
            <summary>
            When resizing a column by dragging its divider, should any space filling columns be
            resized at each mouse move? If this is false, the filling columns will be
            updated when the mouse is released.
            </summary>
            <remarks>
            I think that this looks very ugly, but it does give more immediate feedback.
            It looks ugly because every
            column to the right of the divider being dragged gets updated twice: once when
            the column be resized changes size (this moves
            all the columns slightly to the right); then again when the filling columns are updated, but they will be shrunk
            so that the combined width is not more than the control, so everything jumps slightly back to the left again.
            </remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.UseAlternatingBackColors">
            <summary>
            Should the list give a different background color to every second row?
            </summary>
            <remarks><para>The color of the alternate rows is given by AlternateRowBackColor.</para>
            <para>There is a "feature" in .NET for listviews in non-full-row-select mode, where
            selected rows are not drawn with their correct background color.</para></remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.View">
            <summary>
            Get/set the style of view that this listview is using
            </summary>
            <remarks>Switching to tile or details view installs the columns appropriate to that view.
            Confusingly, in tile view, every column is shown as a row of information.</remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.CustomSorter">
            <summary>
            This delegate can be used to sort the table in a custom fasion.
            </summary>
            <remarks>
            <para>
            What the delegate has to do depends on the type of <code>ObjectListView</code> it is sorting:
            </para>
            <list>
            <item>
            If it is sorting a normal ObjectListView, the delegate must install a ListViewItemSorter on the ObjectListView. This install ItemSorter will actually do the work of sorting the ListViewItems. See ColumnComparer in the code for an example of what an ItemSorter has to do.
            </item>
            <item>
            If the delegate is sorting a VirtualObjectListView or a FastObjectListView, the delegate must sort the model objects that are sourcing the list (remember, in a virtual list, the application holds the model objects and the list just askes for them as it needs them).
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.RowFormatter">
            <summary>
            This delegate can be used to format a OLVListItem before it is added to the control.
            </summary>
            <remarks>
            <para>The model object for the row can be found through the RowObject property of the OLVListItem object.</para>
            <para>All subitems normally have the same style as list item, so setting the forecolor on one
            subitem changes the forecolor of all subitems.
            To allow subitems to have different attributes, do this:<code>myListViewItem.UseItemStyleForSubItems = false;</code>.
            </para>
            <para>If UseAlternatingBackColors is true, the backcolor of the listitem will be calculated
            by the control and cannot be controlled by the RowFormatter delegate. In general, trying to use a RowFormatter
            when UseAlternatingBackColors is true does not work well.</para></remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.CheckStateGetter">
            <summary>
            This delegate will be called whenever the ObjectListView needs to know the check state
            of the row associated with a given model object
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.CheckStatePutter">
            <summary>
            This delegate will be called whenever the user tries to change the check state
            of a row. The delegate should return the value that the listview should actuall
            use, which may be different to the one given to the delegate.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.TopItemIndex">
            <summary>
            Get or set the index of the top item of this listview
            </summary>
            <remarks>
            <para>
            This property only works when the listview is in Details view and not showing groups.
            </para>
            <para>
            The reason that it does not work when showing groups is that, when groups are enabled,
            the Windows message LVM_GETTOPINDEX always returns 0, regardless of the
            scroll position.
            </para>
            </remarks>
        </member>
        <member name="E:OgamaControls.ObjectListView.ColumnRightClick">
            <summary>
            Triggered when a column header is right clicked.
            </summary>
        </member>
        <member name="E:OgamaControls.ObjectListView.SelectionChanged">
            <summary>
            This event is triggered once per user action that changes the selection state
            of one or more rows.
            </summary>
        </member>
        <member name="E:OgamaControls.ObjectListView.CellEditStarting">
            <summary>
            Triggered when a cell is about to be edited.
            </summary>
            <remarks>Set Cancel to true to prevent the cell being edited.
            You can change the the Control to be something completely different.</remarks>
        </member>
        <member name="E:OgamaControls.ObjectListView.CellEditFinishing">
            <summary>
            Triggered when a cell is about to finish being edited.
            </summary>
            <remarks>If Cancel is already true, the user is cancelling the edit operation.
            Set Cancel to true to prevent the value from the cell being written into the model.
            You cannot prevent the editing from finishing.</remarks>
        </member>
        <member name="P:OgamaControls.ObjectListView.Columns">
            <summary>
            Return Columns for this list. We hide the original so we can associate
            a specialised editor with it.
            </summary>
        </member>
        <member name="T:OgamaControls.ObjectListView.CellEditActivateMode">
            <summary>
            How does a user indicate that they want to edit cells?
            </summary>
        </member>
        <member name="F:OgamaControls.ObjectListView.CellEditActivateMode.None">
            <summary>
            This list cannot be edited. F2 does nothing.
            </summary>
        </member>
        <member name="F:OgamaControls.ObjectListView.CellEditActivateMode.SingleClick">
            <summary>
            A single click on  a <strong>subitem</strong> will edit the value. Single clicking the primary column,
            selects the row just like normal. The user must press F2 to edit the primary column.
            </summary>
        </member>
        <member name="F:OgamaControls.ObjectListView.CellEditActivateMode.DoubleClick">
            <summary>
            Double clicking a subitem or the primary column will edit that cell.
            F2 will edit the primary column.
            </summary>
        </member>
        <member name="F:OgamaControls.ObjectListView.CellEditActivateMode.F2Only">
            <summary>
            Pressing F2 is the only way to edit the cells. Once the primary column is being edited,
            the other cells in the row can be edited by pressing Tab.
            </summary>
        </member>
        <member name="T:OgamaControls.ObjectListView.ObjectListViewState">
            <summary>
            Instances of this class are used to store the state of an ObjectListView.
            </summary>
        </member>
        <member name="T:OgamaControls.ObjectListView.HeaderControl">
            <summary>
            Class used to capture window messages for the header of the list view
            control.
            </summary>
            <remarks>We only need this class in order to not change the cursor
            when the cursor is over the divider of a fixed width column. It
            really is a little too perfectionist even for me.</remarks>
        </member>
        <member name="M:OgamaControls.ObjectListView.HeaderControl.GetColumnIndexUnderCursor">
            <summary>
            Return the index of the column under the current cursor position,
            or -1 if the cursor is not over a column
            </summary>
            <returns>Index of the column under the cursor, or -1</returns>
        </member>
        <member name="T:OgamaControls.ObjectListView.ColumnRightClickEventHandler">
            <summary>
            The callbacks for RightColumnClick events
            </summary>
        </member>
        <member name="T:OgamaControls.ObjectListView.CellEditEventHandler">
            <summary>
            The callbacks for CellEditing events
            </summary>
        </member>
        <member name="T:OgamaControls.ObjectListView.CellEditEventArgs">
            <summary>
            Let the world know that a cell edit operation is beginning or ending
            </summary>
        </member>
        <member name="M:OgamaControls.ObjectListView.CellEditEventArgs.#ctor(OgamaControls.OLVColumn,System.Windows.Forms.Control,System.Drawing.Rectangle,OgamaControls.OLVListItem,System.Int32)">
            <summary>
            Create an event args
            </summary>
            <param name="column"></param>
            <param name="c"></param>
            <param name="r"></param>
            <param name="item"></param>
            <param name="subItemIndex"></param>
        </member>
        <member name="F:OgamaControls.ObjectListView.CellEditEventArgs.Cancel">
            <summary>
            Change this to true to cancel the cell editing operation.
            </summary>
            <remarks>
            <para>During the CellEditStarting event, setting this to true will prevent the cell from being edited.</para>
            <para>During the CellEditFinishing event, if this value is already true, this indicates that the user has
            cancelled the edit operation and that the handler should perform cleanup only. Setting this to true,
            will prevent the ObjectListView from trying to write the new value into the model object.</para>
            </remarks>
        </member>
        <member name="F:OgamaControls.ObjectListView.CellEditEventArgs.Control">
            <summary>
            During the CellEditStarting event, this can be modified to be the control that you want
            to edit the value. You must fully configure the control before returning from the event,
            including its bounds and the value it is showing.
            During the CellEditFinishing event, you can use this to get the value that the user
            entered and commit that value to the model. Changing the control during the finishing
            event has no effect.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.CellEditEventArgs.Column">
            <summary>
            The column of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.CellEditEventArgs.RowObject">
            <summary>
            The model object of the row of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.CellEditEventArgs.ListViewItem">
            <summary>
            The listview item of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.CellEditEventArgs.SubItemIndex">
            <summary>
            The index of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.CellEditEventArgs.Value">
            <summary>
            The data value of the cell before the edit operation began.
            </summary>
        </member>
        <member name="P:OgamaControls.ObjectListView.CellEditEventArgs.CellBounds">
            <summary>
            The bounds of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="T:OgamaControls.ObjectListView.IntUpDown">
            <summary>
            This editor simply shows and edits integer values.
            </summary>
        </member>
        <member name="T:OgamaControls.ObjectListView.UintUpDown">
            <summary>
            This editor simply shows and edits unsigned integer values.
            </summary>
        </member>
        <member name="T:OgamaControls.ObjectListView.BooleanCellEditor">
            <summary>
            This editor simply shows and edits boolean values.
            </summary>
            <remarks>You can intercept the CellEditStarting event if you want
            to change the characteristics of the editor. For example, by changing
            the labels to "No" and "Yes". The false value must come first.</remarks>
        </member>
        <member name="T:OgamaControls.ObjectListView.FloatCellEditor">
            <summary>
            This editor simply shows and edits floating point values.
            </summary>
            <remarks>You can intercept the CellEditStarting event if you want
            to change the characteristics of the editor. For example, by increasing
            the number of decimal places.</remarks>
        </member>
        <member name="T:OgamaControls.ObjectListView.AutoCompleteCellEditor">
            <summary>
            This editor shows and auto completes values from the given listview column.
            </summary>
        </member>
        <member name="T:OgamaControls.ObjectListView.OLVColumnCollectionEditor">
            <summary>
            This class works in conjunction with the OLVColumns property to allow OLVColumns
            to be added to the ObjectListView.
            </summary>
        </member>
        <member name="T:OgamaControls.NativeMethods">
            <summary>
            Wrapper for all native method calls on ListView controls
            </summary>
        </member>
        <member name="M:OgamaControls.NativeMethods.ForceSubItemImagesExStyle(System.Windows.Forms.ListView)">
            <summary>
            Make sure the ListView has the extended style that says to display subitem images.
            </summary>
            <remarks>This method must be called after any .NET call that update the extended styles
            since they seem to erase this setting.</remarks>
            <param name="list">The listview to send a message to</param>
        </member>
        <member name="M:OgamaControls.NativeMethods.SetIconSpacing(System.Drawing.Size,System.Windows.Forms.ListView)">
            <summary>
            This method uses the LVM_SETICONSPACING constant to send the
            new spacing to the list view.
            </summary>
            <param name="size">A <see cref="T:System.Drawing.Size"/> with the new spacing for the icons.</param>
            <param name="list">The <see cref="T:System.Windows.Forms.ListView"/> to set the spacing for.</param>
        </member>
        <member name="M:OgamaControls.NativeMethods.SetSubItemImage(System.Windows.Forms.ListView,System.Int32,System.Int32,System.Int32)">
            <summary>
            For the given item and subitem, make it display the given image
            </summary>
            <param name="list">The listview to send a message to</param>
            <param name="itemIndex">row number (0 based)</param>
            <param name="subItemIndex">subitem (0 is the item itself)</param>
            <param name="imageIndex">index into the image list</param>
        </member>
        <member name="M:OgamaControls.NativeMethods.SetColumnImage(System.Windows.Forms.ListView,System.Int32,System.Windows.Forms.SortOrder,System.Int32)">
            <summary>
            Setup the given column of the listview to show the given image to the right of the text.
            If the image index is -1, any previous image is cleared
            </summary>
            <param name="list">The listview to send a message to</param>
            <param name="columnIndex">Index of the column to modifiy</param>
            <param name="order"></param>
            <param name="imageIndex">Index into the small image list</param>
        </member>
        <member name="M:OgamaControls.NativeMethods.HasBuiltinSortIndicators">
            <summary>
            Does this version of the operating system have builtin sort indicators?
            </summary>
            <returns>Are there builtin sort indicators</returns>
            <remarks>XP and later have these</remarks>
        </member>
        <member name="M:OgamaControls.NativeMethods.GetUpdateRect(System.Windows.Forms.Control)">
            <summary>
            Return the bounds of the update region on the given control.
            </summary>
            <remarks>The BeginPaint() system call validates the update region, effectively wiping out this information.
            So this call has to be made before the BeginPaint() call.</remarks>
            <param name="cntl">The control whose update region is be calculated</param>
            <returns>A rectangle</returns>
        </member>
        <member name="M:OgamaControls.NativeMethods.ValidateRect(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Validate an area of the given control. A validated area will not be repainted at the next redraw.
            </summary>
            <param name="cntl">The control to be validated</param>
            <param name="r">The area of the control to be validated</param>
        </member>
        <member name="M:OgamaControls.NativeMethods.SelectAllItems(System.Windows.Forms.ListView)">
            <summary>
            Select all rows on the given listview
            </summary>
            <param name="list">The listview whose items are to be selected</param>
        </member>
        <member name="M:OgamaControls.NativeMethods.DeselectAllItems(System.Windows.Forms.ListView)">
            <summary>
            Deselect all rows on the given listview
            </summary>
            <param name="list">The listview whose items are to be deselected</param>
        </member>
        <member name="M:OgamaControls.NativeMethods.SetItemState(System.Windows.Forms.ListView,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the item state on the given item
            </summary>
            <param name="list">The listview whose item's state is to be changed</param>
            <param name="itemIndex">The index of the item to be changed</param>
            <param name="mask">Which bits of the value are to be set?</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:OgamaControls.NativeMethods.GetHeaderControl(System.Windows.Forms.ListView)">
            <summary>
            Return the handle to the header control on the given list
            </summary>
            <param name="list">The listview whose header control is to be returned</param>
            <returns>The handle to the header control</returns>
        </member>
        <member name="M:OgamaControls.NativeMethods.GetDividerUnderPoint(System.IntPtr,System.Drawing.Point)">
            <summary>
            Return the index of the divider under the given point. Return -1 if no divider is under the pt
            </summary>
            <param name="handle">The list we are interested in</param>
            <param name="pt">The client co-ords</param>
            <returns>The index of the divider under the point, or -1 if no divider is under that point</returns>
        </member>
        <member name="M:OgamaControls.NativeMethods.GetColumnUnderPoint(System.IntPtr,System.Drawing.Point)">
            <summary>
            Return the index of the column of the header that is under the given point.
            Return -1 if no column is under the pt
            </summary>
            <param name="handle">The list we are interested in</param>
            <param name="pt">The client co-ords</param>
            <returns>The index of the column under the point, or -1 if no column header is under that point</returns>
        </member>
        <member name="M:OgamaControls.NativeMethods.GetScrollPosition(System.IntPtr,System.Boolean)">
            <summary>
            Get the scroll position of the given scroll bar
            </summary>
            <param name="handle"></param>
            <param name="horizontalBar"></param>
            <returns></returns>
        </member>
        <member name="T:OgamaControls.NativeMethods.NMHDR">
            <summary>
            Notify message header structure.
            </summary>
        </member>
        <member name="T:OgamaControls.VirtualObjectListView">
            <summary>
            A virtual object list view operates in virtual mode, that is, it only gets model objects for
            a row when it is needed. This gives it the ability to handle very large numbers of rows with
            minimal resources.
            </summary>
            <remarks><para>A listview is not a great user interface for a large number of items. But if you've
            ever wanted to have a list with 10 million items, go ahead, knock yourself out.</para>
            <para>Virtual lists can never iterate their contents. That would defeat the whole purpose.</para>
            <para>Given the above, grouping and sorting are not possible on virtual lists. But if the backing data store has
            a sorting mechanism, a CustomSorter can be installed which will be called when the sorting is required.</para>
            <para>For the same reason, animate GIFs should not be used in virtual lists. Animated GIFs require some state
            information to be stored for each animation, but virtual lists specifically do not keep any state information.
            You really do not want to keep state information for 10 million animations!</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.#ctor">
            <summary>
            Create a VirtualObjectListView
            </summary>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.GetItemCount">
            <summary>
            Return the number of items in the list
            </summary>
            <returns>the number of items in the list</returns>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.GetItem(System.Int32)">
            <summary>
            Return the item at the given index
            </summary>
            <param name="index">Index of the item to be returned</param>
            <returns>An OLVListItem</returns>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.GetModelObject(System.Int32)">
            <summary>
            Return the model object at the given index
            </summary>
            <param name="index">Index of the model object to be returned</param>
            <returns>A model object</returns>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.ClearObjects">
            <summary>
            Remove all items from this list
            </summary>
            <remark>This method can safely be called from background threads.</remark>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.SelectObject(System.Object)">
            <summary>
            Select the row that is displaying the given model object.
            This does nothing in virtual lists.
            </summary>
            <remarks>This is a no-op for virtual lists, since there is no way to map the model
            object back to the ListViewItem that represents it.</remarks>
            <param name="modelObject">The object that gave data</param>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.SelectObjects(System.Collections.IList)">
            <summary>
            Select the rows that is displaying any of the given model object.
            This does nothing in virtual lists.
            </summary>
            <remarks>This is a no-op for virtual lists, since there is no way to map the model
            objects back to the ListViewItem that represents them.</remarks>
            <param name="modelObjects">A collection of model objects</param>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.RefreshObjects(System.Collections.IList)">
            <summary>
            Update the rows that are showing the given objects
            </summary>
            <remarks>This is a no-op for virtual lists, since there is no way to map the model
            objects back to the ListViewItem that represents them.</remarks>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.AddObjects(System.Collections.ICollection)">
            <summary>
            Add the given collection of model objects to this control.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
            <remarks>This is a no-op for virtual lists, since the control
            does not have a list of model objects to which it can add this new one.
            All model object management is done by the application.</remarks>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.RemoveObjects(System.Collections.ICollection)">
            <summary>
            Remove all of the given objects from the control
            </summary>
            <param name="modelObjects">Collection of objects to be removed</param>
            <remarks>This is a no-op for virtual lists, since the control
            does not have a list of model objects from which it can remove these ones.
            All model object management is done by the application.</remarks>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.BuildList(System.Boolean)">
            <summary>
            Invalidate any cached information when we rebuild the list.
            </summary>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.PrepareAlternateBackColors">
            <summary>
            Prepare the listview to show alternate row backcolors
            </summary>
            <remarks>Alternate colored backrows can't be handle in the same way as our base class.
            With virtual lists, they are handled at RetrieveVirtualItem time.</remarks>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.HandleRetrieveVirtualItem(System.Object,System.Windows.Forms.RetrieveVirtualItemEventArgs)">
            <summary>
            Handle a RetrieveVirtualItem
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.MakeListViewItem(System.Int32)">
            <summary>
            Create a OLVListItem for given row index
            </summary>
            <param name="itemIndex">The index of the row that is needed</param>
            <returns>An OLVListItem</returns>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.GetRowObjectAt(System.Int32)">
            <summary>
            Return the row object for the given row index
            </summary>
            <param name="index">index of the row whose object is to be fetched</param>
            <returns>A model object or null if no delegate is installed</returns>
        </member>
        <member name="M:OgamaControls.VirtualObjectListView.ClearCachedInfo">
            <summary>
            Clear any cached info this list may have been using
            </summary>
        </member>
        <member name="P:OgamaControls.VirtualObjectListView.RowGetter">
            <summary>
            This delegate is used to fetch a rowObject, given it's index within the list
            </summary>
        </member>
        <member name="T:OgamaControls.FastObjectListView">
            <summary>
            A FastObjectListView trades function for speed.
            </summary>
            <remarks>
            <para>On my mid-range laptop, this view builds a list of 10,000 objects in 0.1 seconds,
            as opposed to a normal ObjectListView which takes 10-15 seconds. Lists of up to 50,000 items should be
            able to be handled with sub-second response times even on low end machines.</para>
            <para>
            A FastObjectListView is implemented as a virtual list with some of the virtual modes limits (e.g. no sorting)
            fixed through coding. There are some functions that simply cannot be provided. Specifically, a FastObjectListView cannot:
            <list>
            <item>shows groups</item>
            <item>use Tile view</item>
            <item>display images on subitems</item>
            </list>
            </para>
            <para>You can circumvent the limit on subitem images by making the list owner drawn, and giving the column
            a Renderer of BaseRenderer, e.g. <code>myColumnWithImage.Renderer = new BaseRenderer();</code> </para>
            </remarks>
        </member>
        <member name="M:OgamaControls.FastObjectListView.#ctor">
            <summary>
            Make a FastObjectListView
            </summary>
        </member>
        <member name="M:OgamaControls.FastObjectListView.SetObjects(System.Collections.IEnumerable)">
            <summary>
            Set the collection of objects that this control will show.
            </summary>
            <param name="collection"></param>
            <remark>This method can safely be called from background threads.</remark>
        </member>
        <member name="M:OgamaControls.FastObjectListView.AddObjects(System.Collections.ICollection)">
            <summary>
            Add the given collection of model objects to this control.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
            <remarks>
            <para>The added objects will appear in their correct sort position, if sorting
            is active. Otherwise, they will appear at the end of the list.</para>
            <para>No check is performed to see if any of the objects are already in the ListView.</para>
            <para>Null objects are silently ignored.</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.FastObjectListView.RemoveObjects(System.Collections.ICollection)">
            <summary>
            Remove all of the given objects from the control
            </summary>
            <param name="modelObjects">Collection of objects to be removed</param>
            <remarks>
            <para>Nulls and model objects that are not in the ListView are silently ignored.</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.FastObjectListView.HandleColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            Event handler for the column click event
            </summary>
            <remarks>
            This differs from its base version by trying to preserve selection. The base class,
            being a pure virtual list, cannot maintain selection since it cannot map a
            model objects to the row that is responsible for displaying it. This class can do that.
            </remarks>
        </member>
        <member name="M:OgamaControls.FastObjectListView.SelectObject(System.Object)">
            <summary>
            Select the row that is displaying the given model object.
            </summary>
            <param name="modelObject">The object that gave data</param>
        </member>
        <member name="M:OgamaControls.FastObjectListView.SelectObjects(System.Collections.IList)">
            <summary>
            Select the rows that is displaying any of the given model object.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
        </member>
        <member name="M:OgamaControls.FastObjectListView.RefreshObjects(System.Collections.IList)">
            <summary>
            Update the rows that are showing the given objects
            </summary>
        </member>
        <member name="M:OgamaControls.FastObjectListView.RebuildIndexMap">
            <summary>
            Rebuild the map that remembers which model object is displayed at which line
            </summary>
        </member>
        <member name="M:OgamaControls.FastObjectListView.GetRowObjectAt(System.Int32)">
            <summary>
            Return the row object for the given row index
            </summary>
            <param name="index">index of the row whose object is to be fetched</param>
            <returns>A model object or null if no delegate is installed</returns>
        </member>
        <member name="P:OgamaControls.FastObjectListView.Objects">
            <summary>
            Get/set the list of objects that are shown by the control.
            </summary>
            <remarks>
            <para>This method preserves selection, if possible. Use SetObjects() if
            you do not want to preserve the selection. Preserving selection is the slowest part of this
            code and performance is O(n) where n is the number of selected rows.</para>
            <para>This method is not thread safe.</para>
            </remarks>
        </member>
        <member name="P:OgamaControls.FastObjectListView.IsSearchOnSortColumn">
            <summary>
            When the user types into a list, should the values in the current sort column be searched to find a match?
            If this is false, the primary column will always be used regardless of the sort column.
            </summary>
            <remarks>When this is true, the behavior is like that of ITunes.</remarks>
        </member>
        <member name="T:OgamaControls.DataListView">
            <summary>
            A DataListView is a ListView that can be bound to a datasource (which would normally be a DataTable or DataView).
            </summary>
            <remarks>
            <para>This listview keeps itself in sync with its source datatable by listening for change events.</para>
            <para>If the listview has no columns when given a data source, it will automatically create columns to show all of the datatables columns.
            This will be only the simplest view of the world, and would look more interesting with a few delegates installed.</para>
            <para>This listview will also automatically generate missing aspect getters to fetch the values from the data view.</para>
            <para>Changing data sources is possible, but error prone. Before changing data sources, the programmer is responsible for modifying/resetting
            the column collection to be valid for the new data source.</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.DataListView.#ctor">
            <summary>
            Make a DataListView
            </summary>
        </member>
        <member name="M:OgamaControls.DataListView.RebindDataSource">
            <summary>
            Our data source has changed. Figure out how to handle the new source
            </summary>
        </member>
        <member name="M:OgamaControls.DataListView.RebindDataSource(System.Boolean)">
            <summary>
            Our data source has changed. Figure out how to handle the new source
            </summary>
        </member>
        <member name="M:OgamaControls.DataListView.InitializeDataSource">
            <summary>
            The data source for this control has changed. Reconfigure the control for the new source
            </summary>
        </member>
        <member name="M:OgamaControls.DataListView.CreateColumnsFromSource">
            <summary>
            Create columns for the listview based on what properties are available in the data source
            </summary>
            <remarks>
            <para>This method will not replace existing columns.</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.DataListView.CreateMissingAspectGettersAndPutters">
            <summary>
            Generate aspect getters and putters for any columns that are missing them (and for which we have
            enough information to actually generate a getter)
            </summary>
        </member>
        <member name="M:OgamaControls.DataListView.AddObjects(System.Collections.ICollection)">
            <summary>
            Add the given collection of model objects to this control.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
            <remarks>This is a no-op for data lists, since the data
            is controlled by the DataSource. Manipulate the data source
            rather than this view of the data source.</remarks>
        </member>
        <member name="M:OgamaControls.DataListView.RemoveObjects(System.Collections.ICollection)">
            <summary>
            Remove the given collection of model objects from this control.
            </summary>
            <remarks>This is a no-op for data lists, since the data
            is controlled by the DataSource. Manipulate the data source
            rather than this view of the data source.</remarks>
        </member>
        <member name="M:OgamaControls.DataListView.DoUnfreeze">
            <summary>
            What should we do when the list is unfrozen
            </summary>
        </member>
        <member name="M:OgamaControls.DataListView.OnBindingContextChanged(System.EventArgs)">
            <summary>
            Handles binding context changes
            </summary>
            <param name="e">The EventArgs that will be passed to any handlers
            of the BindingContextChanged event.</param>
        </member>
        <member name="M:OgamaControls.DataListView.OnParentBindingContextChanged(System.EventArgs)">
            <summary>
            Handles parent binding context changes
            </summary>
            <param name="e">Unused EventArgs.</param>
        </member>
        <member name="M:OgamaControls.DataListView.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Handle a SelectedIndexChanged event
            </summary>
            <param name="e">The event</param>
            <remarks>
            Called by Windows Forms when the currently selected index of the
            control changes. This usually happens because the user clicked on
            the control. In this case we want to notify the CurrencyManager so
            that any other bound controls will remain in sync. This method will
            also be called when we changed our index as a result of a
            notification that originated from the CurrencyManager, and in that
            case we avoid notifying the CurrencyManager back!
            </remarks>
        </member>
        <member name="P:OgamaControls.DataListView.DataSource">
            <summary>
            Get or set the DataSource that will be displayed in this list view.
            </summary>
            <remarks>The DataSource should implement either <see cref="T:System.Collections.IList"/>, <see cref="T:System.ComponentModel.IBindingList"/>,
            or <see cref="T:System.ComponentModel.IListSource"/>. Some common examples are the following types of objects:
            <list type="unordered">
            <item><see cref="T:System.Data.DataView"/></item>
            <item><see cref="T:System.Data.DataTable"/></item>
            <item><see cref="T:System.Data.DataSet"/></item>
            <item><see cref="T:System.Data.DataViewManager"/></item>
            <item><see cref="T:System.Windows.Forms.BindingSource"/></item>
            </list>
            <para>When binding to a list container (i.e. one that implements the
            <see cref="T:System.ComponentModel.IListSource"/> interface, such as <see cref="T:System.Data.DataSet"/>)
            you must also set the <see cref="P:OgamaControls.DataListView.DataMember"/> property in order
            to identify which particular list you would like to display. You
            may also set the <see cref="P:OgamaControls.DataListView.DataMember"/> property even when
            DataSource refers to a list, since <see cref="P:OgamaControls.DataListView.DataMember"/> can
            also be used to navigate relations between lists.</para>
            </remarks>
        </member>
        <member name="P:OgamaControls.DataListView.DataMember">
            <summary>
            Gets or sets the name of the list or table in the data source for which the DataListView is displaying data.
            </summary>
            <remarks>If the data source is not a DataSet or DataViewManager, this property has no effect</remarks>
        </member>
        <member name="T:OgamaControls.AspectGetterDelegate">
            <summary>
            These delegates are used to extract an aspect from a row object
            </summary>
        </member>
        <member name="T:OgamaControls.AspectPutterDelegate">
            <summary>
            These delegates are used to put a changed value back into a model object
            </summary>
        </member>
        <member name="T:OgamaControls.AspectToStringConverterDelegate">
            <summary>
            These delegates can be used to convert an aspect value to a display string,
            instead of using the default ToString()
            </summary>
        </member>
        <member name="T:OgamaControls.CheckStateGetterDelegate">
            <summary>
            These delegates are used to the state of the checkbox for a row object.
            </summary>
            <remarks>For reasons known only to someone in Microsoft, we can only set
            a boolean on the ListViewItem to indicate it's "checked-ness", but when
            we receive update events, we have to use a tristate CheckState. So we can
            be told about an indeterminate state, but we can't set it ourselves.</remarks>
        </member>
        <member name="T:OgamaControls.CheckStatePutterDelegate">
            <summary>
            These delegates are used to put a changed check state back into a model object
            </summary>
        </member>
        <member name="T:OgamaControls.GroupKeyGetterDelegate">
            <summary>
            These delegates are used to retrieve the object that is the key of the group to which the given row belongs.
            </summary>
        </member>
        <member name="T:OgamaControls.GroupKeyToTitleConverterDelegate">
            <summary>
            These delegates are used to convert a group key into a title for the group
            </summary>
        </member>
        <member name="T:OgamaControls.ImageGetterDelegate">
            <summary>
            These delegates are used to fetch the image selector that should be used
            to choose an image for this column.
            </summary>
        </member>
        <member name="T:OgamaControls.ToolTipGetterDelegate">
            <summary>
            These delegates are used to fetch the tooltip selector that should be used
            to choose an string for the items tooltip.
            </summary>
        </member>
        <member name="T:OgamaControls.RenderDelegate">
            <summary>
            These delegates are used to draw a cell
            </summary>
        </member>
        <member name="T:OgamaControls.RowGetterDelegate">
            <summary>
            These delegates are used to fetch a row object for virtual lists
            </summary>
        </member>
        <member name="T:OgamaControls.RowFormatterDelegate">
            <summary>
            These delegates are used to format a listviewitem before it is added to the control.
            </summary>
        </member>
        <member name="T:OgamaControls.SortDelegate">
            <summary>
            These delegates are used to sort the listview in some custom fashion
            </summary>
        </member>
        <member name="T:OgamaControls.OLVColumn">
            <summary>
            An OLVColumn knows which aspect of an object it should present.
            </summary>
            <remarks>
            The column knows how to:
            <list type="bullet">
            <item>extract its aspect from the row object</item>
            <item>convert an aspect to a string</item>
            <item>calculate the image for the row object</item>
            <item>extract a group "key" from the row object</item>
            <item>convert a group "key" into a title for the group</item>
            </list>
            <para>For sorting to work correctly, aspects from the same column
            must be of the same type, that is, the same aspect cannot sometimes
            return strings and other times integers.</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.OLVColumn.#ctor">
            <summary>
            Create an OLVColumn
            </summary>
        </member>
        <member name="M:OgamaControls.OLVColumn.#ctor(System.String,System.String)">
            <summary>
            Initialize a column to have the given title, and show the given aspect
            </summary>
            <param name="title">The title of the column</param>
            <param name="aspect">The aspect to be shown in the column</param>
        </member>
        <member name="F:OgamaControls.OLVColumn.LastDisplayIndex">
            <summary>
            Where was this column last positioned within the Detail view columns
            </summary>
            <remarks>DisplayIndex is volatile. Once a column is removed from the control,
            there is no way to discover where it was in the display order. This property
            guards that information even when the column is not in the listview's active columns.</remarks>
        </member>
        <member name="M:OgamaControls.OLVColumn.GetValue(System.Object)">
            <summary>
            For a given row object, return the object that is to be displayed in this column.
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <returns>An object, which is the aspect to be displayed</returns>
        </member>
        <member name="M:OgamaControls.OLVColumn.GetAspectByName(System.Object)">
            <summary>
            For a given row object, extract the value indicated by the AspectName property of this column.
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <returns>An object, which is the aspect named by AspectName</returns>
        </member>
        <member name="M:OgamaControls.OLVColumn.PutValue(System.Object,System.Object)">
            <summary>
            Update the given model object with the given value
            </summary>
            <param name="rowObject">The model object to be updated</param>
            <param name="newValue">The value to be put into the model</param>
        </member>
        <member name="M:OgamaControls.OLVColumn.PutAspectByName(System.Object,System.Object)">
            <summary>
            Update the given model object with the given value using the column's
            AspectName.
            </summary>
            <param name="rowObject">The model object to be updated</param>
            <param name="newValue">The value to be put into the model</param>
        </member>
        <member name="M:OgamaControls.OLVColumn.GetStringValue(System.Object)">
            <summary>
            For a given row object, return the string representation of the value shown in this column.
            </summary>
            <remarks>
            For aspects that are string (e.g. aPerson.Name), the aspect and its string representation are the same.
            For non-strings (e.g. aPerson.DateOfBirth), the string representation is very different.
            </remarks>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.OLVColumn.ValueToString(System.Object)">
            <summary>
            Convert the aspect object to its string representation.
            </summary>
            <remarks>
            If the column has been given a ToStringDelegate, that will be used to do
            the conversion, otherwise just use ToString(). Nulls are always converted
            to empty strings.
            </remarks>
            <param name="value">The value of the aspect that should be displayed</param>
            <returns>A string representation of the aspect</returns>
        </member>
        <member name="M:OgamaControls.OLVColumn.GetImage(System.Object)">
            <summary>
            For a given row object, return the image selector of the image that should displayed in this column.
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <returns>int or string or Image. int or string will be used as index into image list. null or -1 means no image</returns>
        </member>
        <member name="M:OgamaControls.OLVColumn.GetToolTipText(System.Object)">
            <summary>
            For a given row object, return the tooltip selector that should displayed in this column.
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <returns>A string with the tooltip text.</returns>
        </member>
        <member name="M:OgamaControls.OLVColumn.GetGroupKey(System.Object)">
            <summary>
            For a given row object, return the object that is the key of the group that this row belongs to.
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <returns>Group key object</returns>
        </member>
        <member name="M:OgamaControls.OLVColumn.ConvertGroupKeyToTitle(System.Object)">
            <summary>
            For a given group value, return the string that should be used as the groups title.
            </summary>
            <param name="value">The group key that is being converted to a title</param>
            <returns>string</returns>
        </member>
        <member name="M:OgamaControls.OLVColumn.MakeGroupies``1(``0[],System.String[])">
            <summary>
            Install delegates that will group the columns aspects into progressive partitions.
            If an aspect is less than value[n], it will be grouped with description[n].
            If an aspect has a value greater than the last element in "values", it will be grouped
            with the last element in "descriptions".
            </summary>
            <param name="values">Array of values. Values must be able to be
            compared to the aspect (using IComparable)</param>
            <param name="descriptions">The description for the matching value. The last element is the default description.
            If there are n values, there must be n+1 descriptions.</param>
            <example>
            this.salaryColumn.MakeGroupies(
                new UInt32[] { 20000, 100000 },
                new string[] { "Lowly worker",  "Middle management", "Rarified elevation"});
            </example>
        </member>
        <member name="P:OgamaControls.OLVColumn.AspectName">
            <summary>
            The name of the property or method that should be called to get the value to display in this column.
            This is only used if a ValueGetterDelegate has not been given.
            </summary>
            <remarks>This name can be dotted to chain references to properties or methods.</remarks>
            <example>"DateOfBirth"</example>
            <example>"Owner.HomeAddress.Postcode"</example>
        </member>
        <member name="P:OgamaControls.OLVColumn.AspectToStringFormat">
            <summary>
            This format string will be used to convert an aspect to its string representation.
            </summary>
            <remarks>
            This string is passed as the first parameter to the string.Format() method.
            This is only used if ToStringDelegate has not been set.</remarks>
            <example>"{0:C}" to convert a number to currency</example>
        </member>
        <member name="P:OgamaControls.OLVColumn.UseInitialLetterForGroup">
            <summary>
            Group objects by the initial letter of the aspect of the column
            </summary>
            <remarks>
            One common pattern is to group column by the initial letter of the value for that group.
            The aspect must be a string (obviously).
            </remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.IsTileViewColumn">
            <summary>
            Get/set whether this column should be used when the view is switched to tile view.
            </summary>
            <remarks>Column 0 is always included in tileview regardless of this setting.
            Tile views do not work well with many "columns" of information, 2 or 3 works best.</remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.AspectGetter">
            <summary>
            This delegate will be used to extract a value to be displayed in this column.
            </summary>
            <remarks>
            If this is set, AspectName is ignored.
            </remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.AspectToStringConverter">
            <summary>
            The delegate that will be used to translate the aspect to display in this column into a string.
            </summary>
            <remarks>If this value is set, ValueToStringFormat will be ignored.</remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.ImageGetter">
            <summary>
            This delegate is called to get the image selector of the image that should be shown in this column.
            It can return an int, string, Image or null.
            </summary>
            <remarks><para>This delegate can use these return value to identify the image:</para>
            <list>
            <item>null or -1 -- indicates no image</item>
            <item>an int -- the int value will be used as an index into the image list</item>
            <item>a string -- the string value will be used as a key into the image list</item>
            <item>an Image -- the Image will be drawn directly (only in OwnerDrawn mode)</item>
            </list>
            </remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.ToolTipGetter">
            <summary>
            This delegate is called to get the tooltip selector of the column.
            It should return a string.
            </summary>
        </member>
        <member name="P:OgamaControls.OLVColumn.GroupKeyGetter">
            <summary>
            This delegate is called to get the object that is the key for the group
            to which the given row belongs.
            </summary>
        </member>
        <member name="P:OgamaControls.OLVColumn.GroupKeyToTitleConverter">
            <summary>
            This delegate is called to convert a group key into a title for that group.
            </summary>
        </member>
        <member name="P:OgamaControls.OLVColumn.RendererDelegate">
            <summary>
            This delegate is called when a cell needs to be drawn in OwnerDrawn mode.
            </summary>
        </member>
        <member name="P:OgamaControls.OLVColumn.Renderer">
            <summary>
            Get/set the renderer that will be invoked when a cell needs to be redrawn
            </summary>
        </member>
        <member name="P:OgamaControls.OLVColumn.AspectGetterAutoGenerated">
            <summary>
            Remember if this aspect getter for this column was generated internally, and can therefore
            be regenerated at will
            </summary>
        </member>
        <member name="P:OgamaControls.OLVColumn.GroupWithItemCountFormat">
            <summary>
            When the listview is grouped by this column and group title has an item count,
            how should the lable be formatted?
            </summary>
            <remarks>
            The given format string can/should have two placeholders:
            <list type="bullet">
            <item>{0} - the original group title</item>
            <item>{1} - the number of items in the group</item>
            </list>
            <para>If this value is not set, the values from the list view will be used</para>
            </remarks>
            <example>"{0} [{1} items]"</example>
        </member>
        <member name="P:OgamaControls.OLVColumn.GroupWithItemCountFormatOrDefault">
            <summary>
            Return this.GroupWithItemCountFormat or a reasonable default
            </summary>
        </member>
        <member name="P:OgamaControls.OLVColumn.GroupWithItemCountSingularFormat">
            <summary>
            When the listview is grouped by this column and a group title has an item count,
            how should the lable be formatted if there is only one item in the group?
            </summary>
            <remarks>
            The given format string can/should have two placeholders:
            <list type="bullet">
            <item>{0} - the original group title</item>
            <item>{1} - the number of items in the group (always 1)</item>
            </list>
            <para>If this value is not set, the values from the list view will be used</para>
            </remarks>
            <example>"{0} [{1} item]"</example>
        </member>
        <member name="P:OgamaControls.OLVColumn.GroupWithItemCountSingularFormatOrDefault">
            <summary>
            Return this.GroupWithItemCountSingularFormat or a reasonable default
            </summary>
        </member>
        <member name="P:OgamaControls.OLVColumn.MinimumWidth">
            <summary>
            What is the minimum width that the user can give to this column?
            </summary>
            <remarks>-1 means there is no minimum width. Give this the same value as MaximumWidth to make a fixed width column.</remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.MaximumWidth">
            <summary>
            What is the maximum width that the user can give to this column?
            </summary>
            <remarks>-1 means there is no maximum width. Give this the same value as MinimumWidth to make a fixed width column.</remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.IsFixedWidth">
            <summary>
            Is this column a fixed width column?
            </summary>
        </member>
        <member name="P:OgamaControls.OLVColumn.FreeSpaceProportion">
            <summary>
            What proportion of the unoccupied horizontal space in the control should be given to this column?
            </summary>
            <remarks>
            <para>
            There are situations where it would be nice if a column (normally the rightmost one) would expand as
            the list view expands, so that as much of the column was visible as possible without having to scroll
            horizontally (you should never, ever make your users have to scroll anything horizontally!).
            </para>
            <para>
            A space filling column is resized to occupy a proportion of the unoccupied width of the listview (the
            unoccupied width is the width left over once all the the non-filling columns have been given their space).
            This property indicates the relative proportion of that unoccupied space that will be given to this column.
            The actual value of this property is not important -- only its value relative to the value in other columns.
            For example:
            <list type="bullet">
            <item>
            If there is only one space filling column, it will be given all the free space, regardless of the value in FreeSpaceProportion.
            </item>
            <item>
            If there are two or more space filling columns and they all have the same value for FreeSpaceProportion,
            they will share the free space equally.
            </item>
            <item>
            If there are three space filling columns with values of 3, 2, and 1
            for FreeSpaceProportion, then the first column with occupy half the free space, the second will
            occupy one-third of the free space, and the third column one-sixth of the free space.
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.FillsFreeSpace">
            <summary>
            Should this column resize to fill the free space in the listview?
            </summary>
            <remarks>
            <para>
            If you want two (or more) columns to equally share the available free space, set this property to True.
            If you want this column to have a larger or smaller share of the free space, you must
            set the FreeSpaceProportion property explicitly.
            </para>
            <para>
            Space filling columns are still governed by the MinimumWidth and MaximumWidth properties.
            </para>
            /// </remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.AspectPutter">
            <summary>
            This delegate will be used to put an edited value back into the model object.
            </summary>
            <remarks>
            This does nothing if IsEditable == false.
            </remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.IsEditable">
            <summary>
            Can the values shown in this column be edited?
            </summary>
            <remarks>This defaults to true, since the primary means to control the editability of a listview
            is on the listview itself. Once a listview is editable, all the columns are too, unless the
            programmer explicitly marks them as not editable</remarks>
        </member>
        <member name="P:OgamaControls.OLVColumn.CellEditor">
            <summary>
            Return the control that should be used to edit cells in this column
            </summary>
        </member>
        <member name="P:OgamaControls.OLVColumn.IsVisible">
            <summary>
            Can this column be seen by the user?
            </summary>
            <remarks>After changing this value, you must call RebuildColumns() before the changes will be effected.</remarks>
        </member>
        <member name="T:OgamaControls.OLVListItem">
            <summary>
            OLVListItems are specialized ListViewItems that know which row object they came from,
            and the row index at which they are displayed, even when in group view mode. They
            also know the image they should draw against themselves
            </summary>
        </member>
        <member name="M:OgamaControls.OLVListItem.#ctor(System.Object)">
            <summary>
            Create a OLVListItem for the given row object
            </summary>
        </member>
        <member name="M:OgamaControls.OLVListItem.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Create a OLVListItem for the given row object, represented by the given string and image
            </summary>
        </member>
        <member name="P:OgamaControls.OLVListItem.RowObject">
            <summary>
            RowObject is the model object that is source of the data for this list item.
            </summary>
        </member>
        <member name="P:OgamaControls.OLVListItem.DisplayIndex">
            <summary>
            DisplayIndex is the index of the row where this item is displayed. For flat lists,
            this is the same as ListViewItem.Index, but for grouped views, it is different.
            </summary>
        </member>
        <member name="P:OgamaControls.OLVListItem.ImageSelector">
            <summary>
            Get or set the image that should be shown against this item
            </summary>
            <remarks><para>This can be an Image, a string or an int. A string or an int will
            be used as an index into the small image list.</para></remarks>
        </member>
        <member name="T:OgamaControls.OLVListSubItem">
            <summary>
            A ListViewSubItem that knows which image should be drawn against it.
            </summary>
        </member>
        <member name="M:OgamaControls.OLVListSubItem.#ctor">
            <summary>
            Create a OLVListSubItem
            </summary>
        </member>
        <member name="M:OgamaControls.OLVListSubItem.#ctor(System.String,System.Object)">
            <summary>
            Create a OLVListSubItem that shows the given string and image
            </summary>
        </member>
        <member name="P:OgamaControls.OLVListSubItem.ImageSelector">
            <summary>
            Get or set the image that should be shown against this item
            </summary>
            <remarks><para>This can be an Image, a string or an int. A string or an int will
            be used as an index into the small image list.</para></remarks>
        </member>
        <member name="P:OgamaControls.OLVListSubItem.AnimationState">
            <summary>
            Return the state of the animatation of the image on this subitem.
            Null means there is either no image, or it is not an animation
            </summary>
        </member>
        <member name="T:OgamaControls.ListViewGroupComparer">
            <summary>
            This comparer sort list view groups.
            It does this on the basis of the values in the Tags, if we can figure out how to compare
            objects of that type. Failing that, it uses a case insensitive compare on the group header.
            </summary>
        </member>
        <member name="T:OgamaControls.ColumnComparer">
            <summary>
            ColumnComparer is the workhorse for all comparison between two values of a particular column.
            If the column has a specific comparer, use that to compare the values. Otherwise, do
            a case insensitive string compare of the string representations of the values.
            </summary>
            <remarks><para>This class inherits from both IComparer and its generic counterpart
            so that it can be used on untyped and typed collections.</para></remarks>
        </member>
        <member name="T:OgamaControls.BaseRenderer">
            <summary>
            Renderers are responsible for drawing a single cell within an owner drawn ObjectListView.
            </summary>
            <remarks>
            <para>Methods on this class are called during the DrawItem or DrawSubItemEvent.
            Subclasses can tell which type of event they are handling by examining DrawItemEvent: if this
            is not null, it is a DrawItem event.</para>
            <para>Subclasses will normally override the RenderWithDefault or Render method, and use the other
            methods as helper functions.</para>
            <para>If a renderer is installed on the primary column (column 0), it will be given a chance
            to draw the whole item in all views (Details, Tile, etc.). If the renderer returns true,
            default processing will continue. If it returns false, no other rendering will happen.</para>
            <para>This means that when an ObjectListView is in Details view, the renderer on column 0
            will be called twice: once to handle the DrawItem event, and then again to draw only the
            first cell. Subclasses must distinguish between these two very different events (using
            the "this.DrawItemEvent == null" test).</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.BaseRenderer.#ctor">
            <summary>
            Make a simple renderer
            </summary>
        </member>
        <member name="M:OgamaControls.BaseRenderer.GetText">
            <summary>
            Return the string that should be drawn within this
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.BaseRenderer.GetImage">
            <summary>
            Return the image that should be drawn against this subitem
            </summary>
            <returns>An Image or null if no image should be drawn.</returns>
        </member>
        <member name="M:OgamaControls.BaseRenderer.GetImage(System.Object)">
            <summary>
            Return the actual image that should be drawn when keyed by the given image selector.
            An image selector can be: <list>
            <item>an int, giving the index into the image list</item>
            <item>a string, giving the image key into the image list</item>
            <item>an Image, being the image itself</item>
            </list>
            </summary>
            <param name="imageSelector">The value that indicates the image to be used</param>
            <returns>An Image or null</returns>
        </member>
        <member name="M:OgamaControls.BaseRenderer.GetBackgroundColor">
            <summary>
            Return the Color that is the background color for this item's cell
            </summary>
            <returns>The background color of the subitem</returns>
        </member>
        <member name="M:OgamaControls.BaseRenderer.GetTextBackgroundColor">
            <summary>
            Return the Color that is the background color for this item's text
            </summary>
            <returns>The background color of the subitem's text</returns>
        </member>
        <member name="M:OgamaControls.BaseRenderer.GetForegroundColor">
            <summary>
            Return the color to be used for text in this cell
            </summary>
            <returns>The text color of the subitem</returns>
        </member>
        <member name="M:OgamaControls.BaseRenderer.AlignRectangle(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Align the second rectangle with the first rectangle,
            according to the alignment of the column
            </summary>
            <param name="outer">The cell's bounds</param>
            <param name="inner">The rectangle to be aligned within the bounds</param>
            <returns>An aligned rectangle</returns>
        </member>
        <member name="M:OgamaControls.BaseRenderer.DrawAlignedImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image)">
            <summary>
            Draw the given image aligned horizontally within the column.
            </summary>
            <remarks>
            Over tall images are scaled to fit. Over-wide images are
            truncated. This is by design!
            </remarks>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
            <param name="image">The image to be drawn</param>
        </member>
        <member name="M:OgamaControls.BaseRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Fill in the background of this cell
            </summary>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
        </member>
        <member name="M:OgamaControls.BaseRenderer.HandleRendering(System.EventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            The delegate that is called from the list view. This is the main entry point, but
            subclasses should override Render instead of this method.
            </summary>
            <param name="e">The event that caused this redraw</param>
            <param name="g">The context that our drawing should be done using</param>
            <param name="r">The bounds of the cell within which the renderer can draw</param>
            <param name="rowObject">The model object for this row</param>
            <returns>A boolean indicating whether the default process should occur</returns>
        </member>
        <member name="M:OgamaControls.BaseRenderer.OptionalRender(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our data into the given rectangle using the given graphics context.
            </summary>
            <remarks>
            <para>Subclasses should override this method.</para></remarks>
            <param name="g">The graphics context that should be used for drawing</param>
            <param name="r">The bounds of the subitem cell</param>
            <returns>Returns whether the renderering has already taken place.
            If this returns false, the default processing will take over.
            </returns>
        </member>
        <member name="M:OgamaControls.BaseRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our data into the given rectangle using the given graphics context.
            </summary>
            <remarks>
            <para>Subclasses should override this method if they never want
            to fall back on the default processing</para></remarks>
            <param name="g">The graphics context that should be used for drawing</param>
            <param name="r">The bounds of the subitem cell</param>
        </member>
        <member name="M:OgamaControls.BaseRenderer.DrawImageAndText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our subitems image and text
            </summary>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
        </member>
        <member name="M:OgamaControls.BaseRenderer.DrawImageAndText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
            <summary>
            Draw the given text and optional image in the "normal" fashion
            </summary>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
            <param name="txt">The string to be drawn</param>
            <param name="image">The optional image to be drawn</param>
        </member>
        <member name="P:OgamaControls.BaseRenderer.Event">
            <summary>
            Get/set the event that caused this renderer to be called
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.DrawItemEvent">
            <summary>
            Get/set the event that caused this renderer to be called
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.ListView">
            <summary>
            Get/set the listview for which the drawing is to be done
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.Column">
            <summary>
            Get or set the OLVColumn that this renderer will draw
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.RowObject">
            <summary>
            Get or set the model object that this renderer should draw
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.Aspect">
            <summary>
            Get or set the aspect of the model object that this renderer should draw
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.ListItem">
            <summary>
            Get or set the listitem that this renderer will be drawing
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.SubItem">
            <summary>
            Get or set the list subitem that this renderer will be drawing
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.OLVSubItem">
            <summary>
            Get the specialized OLVSubItem that this renderer is drawing
            </summary>
            <remarks>This returns null for column 0.</remarks>
        </member>
        <member name="P:OgamaControls.BaseRenderer.IsItemSelected">
            <summary>
            Cache whether or not our item is selected
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.Font">
            <summary>
            Return the font to be used for text in this cell
            </summary>
            <returns>The font of the subitem</returns>
        </member>
        <member name="P:OgamaControls.BaseRenderer.TextBrush">
            <summary>
            The brush that will be used to paint the text
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.IsDrawBackground">
            <summary>
            Should this renderer fill in the background before drawing?
            </summary>
        </member>
        <member name="P:OgamaControls.BaseRenderer.CanWrap">
            <summary>
            Can the renderer wrap lines that do not fit completely within the cell?
            </summary>
            <remarks>This value is currently only used when printing a list view using ListViewPrinter.</remarks>
        </member>
        <member name="P:OgamaControls.BaseRenderer.Spacing">
            <summary>
            When rendering multiple images, how many pixels should be between each image?
            </summary>
        </member>
        <member name="T:OgamaControls.MappedImageRenderer">
            <summary>
            This class maps a data value to an image that should be drawn for that value.
            </summary>
            <remarks><para>It is useful for drawing data that is represented as an enum or boolean.</para></remarks>
        </member>
        <member name="M:OgamaControls.MappedImageRenderer.Boolean(System.Object,System.Object)">
            <summary>
            Return a renderer that draw boolean values using the given images
            </summary>
            <param name="trueImage">Draw this when our data value is true</param>
            <param name="falseImage">Draw this when our data value is false</param>
            <returns>A Renderer</returns>
        </member>
        <member name="M:OgamaControls.MappedImageRenderer.TriState(System.Object,System.Object,System.Object)">
            <summary>
            Return a renderer that draw tristate boolean values using the given images
            </summary>
            <param name="trueImage">Draw this when our data value is true</param>
            <param name="falseImage">Draw this when our data value is false</param>
            <param name="nullImage">Draw this when our data value is null</param>
            <returns>A Renderer</returns>
        </member>
        <member name="M:OgamaControls.MappedImageRenderer.#ctor">
            <summary>
            Make a new empty renderer
            </summary>
        </member>
        <member name="M:OgamaControls.MappedImageRenderer.#ctor(System.Object,System.Object)">
            <summary>
            Make a new renderer that will show the given image when the given key is the aspect value
            </summary>
            <param name="key">The data value to be matched</param>
            <param name="image">The image to be shown when the key is matched</param>
        </member>
        <member name="M:OgamaControls.MappedImageRenderer.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Make a new renderer that will show the given images when it receives the given keys
            </summary>
            <param name="key1"></param>
            <param name="image1"></param>
            <param name="key2"></param>
            <param name="image2"></param>
        </member>
        <member name="M:OgamaControls.MappedImageRenderer.#ctor(System.Object[])">
            <summary>
            Build a renderer from the given array of keys and their matching images
            </summary>
            <param name="keysAndImages">An array of key/image pairs</param>
        </member>
        <member name="M:OgamaControls.MappedImageRenderer.Add(System.Object,System.Object)">
            <summary>
            Register the image that should be drawn when our Aspect has the data value.
            </summary>
            <param name="value">Value that the Aspect must match</param>
            <param name="image">An ImageSelector -- an int, string or image</param>
        </member>
        <member name="M:OgamaControls.MappedImageRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Render our value
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="T:OgamaControls.ImageRenderer">
            <summary>
            Render an image that comes from our data source.
            </summary>
            <remarks>The image can be sourced from:
            <list>
            <item>a byte-array (normally when the image to be shown is
            stored as a value in a database)</item>
            <item>an int, which is treated as an index into the image list</item>
            <item>a string, which is treated first as a file name, and failing that as an index into the image list</item>
            </list>
            <para>If an image is an animated GIF, it's state is stored in the SubItem object.</para>
            <para>By default, the image renderer does not render animations (it begins life with animations paused).
            To enable animations, you must call Unpause().</para>
            </remarks>
        </member>
        <member name="M:OgamaControls.ImageRenderer.#ctor">
            <summary>
            Make an empty image renderer
            </summary>
        </member>
        <member name="M:OgamaControls.ImageRenderer.#ctor(System.Boolean)">
            <summary>
            Make an empty image renderer that begins life ready for animations
            </summary>
        </member>
        <member name="M:OgamaControls.ImageRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our image
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:OgamaControls.ImageRenderer.GetImageFromAspect">
             <summary>
             Translate our Aspect into an image.
             </summary>
             <remarks>The strategy is:<list type="unordered">
             <item>If its a byte array, we treat it as an in-memory image</item>
             <item>If it's an int, we use that as an index into our image list</item>
             <item>If it's a string, we try to load a file by that name. If we can't, we use the string as an index into our image list.</item>
            </list></remarks>
             <returns>An image</returns>
        </member>
        <member name="M:OgamaControls.ImageRenderer.Pause">
            <summary>
            Pause any animations
            </summary>
        </member>
        <member name="M:OgamaControls.ImageRenderer.Unpause">
            <summary>
            Unpause any animations
            </summary>
        </member>
        <member name="M:OgamaControls.ImageRenderer.OnTimer(System.Object)">
            <summary>
            This is the method that is invoked by the timer. It basically switches control to the listview thread.
            </summary>
            <param name="state">not used</param>
        </member>
        <member name="M:OgamaControls.ImageRenderer.OnTimerInThread">
            <summary>
            This is the OnTimer callback, but invoked in the same thread as the creator of the ListView.
            This method can use all of ListViews methods without creating a CrossThread exception.
            </summary>
        </member>
        <member name="P:OgamaControls.ImageRenderer.Paused">
            <summary>
            Should the animations in this renderer be paused?
            </summary>
        </member>
        <member name="T:OgamaControls.ImageRenderer.AnimationState">
            <summary>
            Instances of this class kept track of the animation state of a single image.
            </summary>
        </member>
        <member name="M:OgamaControls.ImageRenderer.AnimationState.IsAnimation(System.Drawing.Image)">
            <summary>
            Is the given image an animation
            </summary>
            <param name="image">The image to be tested</param>
            <returns>Is the image an animation?</returns>
        </member>
        <member name="M:OgamaControls.ImageRenderer.AnimationState.#ctor">
            <summary>
            Create an AnimationState in a quiet state
            </summary>
        </member>
        <member name="M:OgamaControls.ImageRenderer.AnimationState.#ctor(System.Drawing.Image)">
            <summary>
            Create an animation state for the given image, which may or may not
            be an animation
            </summary>
            <param name="image">The image to be rendered</param>
        </member>
        <member name="M:OgamaControls.ImageRenderer.AnimationState.AdvanceFrame(System.Int64)">
            <summary>
            Advance our images current frame and calculate when it will expire
            </summary>
        </member>
        <member name="P:OgamaControls.ImageRenderer.AnimationState.IsValid">
            <summary>
            Does this state represent a valid animation
            </summary>
        </member>
        <member name="T:OgamaControls.BarRenderer">
            <summary>
            Render our Aspect as a progress bar
            </summary>
        </member>
        <member name="M:OgamaControls.BarRenderer.#ctor">
            <summary>
            Make a BarRenderer
            </summary>
        </member>
        <member name="M:OgamaControls.BarRenderer.#ctor(System.Int32,System.Int32)">
            <summary>
            Make a BarRenderer for the given range of data values
            </summary>
        </member>
        <member name="M:OgamaControls.BarRenderer.#ctor(System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Make a BarRenderer using a custom bar scheme
            </summary>
        </member>
        <member name="M:OgamaControls.BarRenderer.#ctor(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Make a BarRenderer using a custom bar scheme
            </summary>
        </member>
        <member name="M:OgamaControls.BarRenderer.#ctor(System.Drawing.Pen,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Make a BarRenderer that uses a horizontal gradient
            </summary>
        </member>
        <member name="M:OgamaControls.BarRenderer.#ctor(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Make a BarRenderer that uses a horizontal gradient
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.UseStandardBar">
            <summary>
            Should this bar be drawn in the system style
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.Padding">
            <summary>
            How many pixels in from our cell border will this bar be drawn
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.Pen">
            <summary>
            The Pen that will draw the frame surrounding this bar
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.Brush">
            <summary>
            The brush that will be used to fill the bar
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.BackgroundBrush">
            <summary>
            The brush that will be used to fill the background of the bar
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.StartColor">
            <summary>
            The first color when a gradient is used to fill the bar
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.EndColor">
            <summary>
            The end color when a gradient is used to fill the bar
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.MaximumWidth">
            <summary>
            Regardless of how wide the column become the progress bar will never be wider than this
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.MaximumHeight">
            <summary>
            Regardless of how high the cell is  the progress bar will never be taller than this
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.MinimumValue">
            <summary>
            The minimum data value expected. Values less than this will given an empty bar
            </summary>
        </member>
        <member name="F:OgamaControls.BarRenderer.MaximumValue">
            <summary>
            The maximum value for the range. Values greater than this will give a full bar
            </summary>
        </member>
        <member name="M:OgamaControls.BarRenderer.SetGradient(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draw this progress bar using a gradient
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:OgamaControls.BarRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our aspect
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="T:OgamaControls.ImagesRenderer">
            <summary>
            An ImagesRenderer draws zero or more images depending on the data returned by its Aspect.
            </summary>
            <remarks><para>This renderer's Aspect must return a ICollection of ints, strings or Images,
            each of which will be drawn horizontally one after the other.</para></remarks>
        </member>
        <member name="M:OgamaControls.ImagesRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our data value
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="T:OgamaControls.MultiImageRenderer">
            <summary>
            A MultiImageRenderer draws the same image a number of times based on our data value
            </summary>
            <remarks><para>The stars in the Rating column of iTunes is a good example of this type of renderer.</para></remarks>
        </member>
        <member name="M:OgamaControls.MultiImageRenderer.#ctor">
            <summary>
            Make a quiet rendererer
            </summary>
        </member>
        <member name="M:OgamaControls.MultiImageRenderer.#ctor(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Make an image renderer that will draw the indicated image, at most maxImages times.
            </summary>
            <param name="imageSelector"></param>
            <param name="maxImages"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
        </member>
        <member name="F:OgamaControls.MultiImageRenderer.ImageSelector">
            <summary>
            The image selector that will give the image to be drawn
            </summary>
        </member>
        <member name="F:OgamaControls.MultiImageRenderer.MaxNumberImages">
            <summary>
            What is the maximum number of images that this renderer should draw?
            </summary>
        </member>
        <member name="F:OgamaControls.MultiImageRenderer.MinimumValue">
            <summary>
            Values less than or equal to this will have 0 images drawn
            </summary>
        </member>
        <member name="F:OgamaControls.MultiImageRenderer.MaximumValue">
            <summary>
            Values greater than or equal to this will have MaxNumberImages images drawn
            </summary>
        </member>
        <member name="M:OgamaControls.MultiImageRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our data value
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="T:OgamaControls.FlagRenderer`1">
            <summary>
            A class to render a value that contains a bitwise-OR'ed collection of values.
            </summary>
            <typeparam name="T">The type of value that holds the bit-OR'ed flag</typeparam>
        </member>
        <member name="M:OgamaControls.FlagRenderer`1.Add(`0,System.Object)">
            <summary>
            Register the given image to the given value
            </summary>
            <param name="key">When this flag is present...</param>
            <param name="imageSelector">...draw this image</param>
        </member>
        <member name="M:OgamaControls.FlagRenderer`1.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the flags
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="T:OgamaControls.PeakMeterStyle">
            <summary>
            The orientation of the peak meter.
            </summary>
        </member>
        <member name="F:OgamaControls.PeakMeterStyle.PMS_Horizontal">
            <summary>
            Peak meter is show horizontal.
            </summary>
        </member>
        <member name="F:OgamaControls.PeakMeterStyle.PMS_Vertical">
            <summary>
            Peak meter is show vertical.
            </summary>
        </member>
        <member name="T:OgamaControls.PeakMeterCtrl">
            <summary>
            A control for displaying a peak meter.
            </summary>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.Start(System.Int32)">
            <summary>
            Start animation
            </summary>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.Stop">
            <summary>
            Stop Animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.SetMeterBands(System.Int32,System.Int32)">
            <summary>
            Set number of LED bands
            </summary>
            <param name="BandsCount">Number of bands</param>
            <param name="LEDCount">Number of LED per bands</param>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.SetRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set range info
            </summary>
            <param name="minRangeVal">Min Range</param>
            <param name="medRangeVal">Medium Range</param>
            <param name="maxRangeVal">High Range</param>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.SetData(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Set meter band value
            </summary>
            <param name="arrayValue">Array value for the bands</param>
            <param name="offset">Starting offset position</param>
            <param name="size">Number of values to set</param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.DarkenColor(System.Drawing.Color,System.Byte)">
            <summary>
            Make a color darker
            </summary>
            <param name="color">Color to darken</param>
            <param name="darkenBy">Value to decrease by</param>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.LightenColor(System.Drawing.Color,System.Byte)">
            <summary>
            Make a color lighter
            </summary>
            <param name="color"></param>
            <param name="lightenBy"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Detects wheter a value is in the given range.
            </summary>
            <param name="value"></param>
            <param name="rangeMin"></param>
            <param name="rangeMax"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.ResetControl">
            <summary>
            Resets the peak meter control.
            </summary>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.StartAnimation(System.Int32)">
            <summary>
            Starts the animation with the given period.
            </summary>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.StopAnimation">
            <summary>
            Stop the animation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Overridden <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.OnBackColorChanged(System.EventArgs)">
            <summary>
            Overridden <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.TimerCallback(System.Object)">
            <summary>
            Timer callback function
            </summary>
            <param name="thisObject"></param>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.DrawHorzBand(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            This method draws the horziontal band.
            </summary>
            <param name="g"></param>
            <param name="rect"></param>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.DrawVertBand(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            This method draws the vertical band.
            </summary>
            <param name="g"></param>
            <param name="rect"></param>
        </member>
        <member name="F:OgamaControls.PeakMeterCtrl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.PeakMeterCtrl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.MeterStyle">
            <summary>
            Gets or sets the <see cref="T:OgamaControls.PeakMeterStyle"/> of the control.
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.ShowGrid">
            <summary>
            Gets or sets the visibility of the grid
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.ColoredGrid">
            <summary>
            Gets or sets the visibility of the colorization of the grid
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.GridColor">
            <summary>
            Gets or sets the grid color
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.ColorNormal">
            <summary>
            Gets or sets the normal color
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.ColorMedium">
            <summary>
            Gets or sets the medium color
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.ColorHigh">
            <summary>
            Gets or sets the high color.
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.ColorNormalBack">
            <summary>
            Gets or sets the normal back color
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.ColorMediumBack">
            <summary>
            Gets or sets the medium back color
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.ColorHighBack">
            <summary>
            Gets or sets the high back color
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.BandsCount">
            <summary>
            Gets or sets the frequency bands count
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.LEDCount">
            <summary>
            Gets or sets the led count
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.FalloffSpeed">
            <summary>
            Gets or sets the falloff speed
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.FalloffEffect">
            <summary>
            Gets or sets the visibility of the falloff effect
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.FalloffColor">
            <summary>
            Gets or sets the falloff color
            </summary>
        </member>
        <member name="P:OgamaControls.PeakMeterCtrl.IsActive">
            <summary>
            Gets the status of the animation timer
            </summary>
        </member>
        <member name="T:OgamaControls.TimeLineMarkerCollection">
            <summary>
            Collection of TimeLineMarkers.
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLineMarkerCollection.Sort">
            <summary>
            Sorts the TimeLineMarker in the collection by their TimeLineMarker.Time value
            </summary>
        </member>
        <member name="T:OgamaControls.TimeLineMarkerComparer">
            <summary>
            Class. Implements the manual sorting of TimeLineMarker by index.
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLineMarkerComparer.Compare(OgamaControls.TimeLineMarker,OgamaControls.TimeLineMarker)">
            <summary>
            Compares two objects and returns a value indicating 
            whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first <see cref="T:System.Object"/> to compare. </param>
            <param name="y">The second <see cref="T:System.Object"/> to compare. </param>
            <returns>"Less than zero" if x is less than y. 
            "Zero" if x equals y. and "Greater than zero", if
            x is greater than y.</returns>
        </member>
        <member name="T:OgamaControls.TimeLineMarker">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLineMarker.MARKERWIDTH">
            <summary>
            The width of the time line markers
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLineMarker.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLineMarker.#ctor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="newEventID"></param>
            <param name="newTime"></param>
            <param name="newMarkerColor"></param>
        </member>
        <member name="M:OgamaControls.TimeLineMarker.Draw(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="xPosition"></param>
            <param name="timeLineHeight"></param>
        </member>
        <member name="P:OgamaControls.TimeLineMarker.State">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLineMarker.EventID">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLineMarker.Time">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLineMarker.MarkerColor">
            <summary>
            
            </summary>
        </member>
        <member name="T:OgamaControls.TimeLinePosition">
            <summary>
            Indicates the position of the time line event relative to its center
            line.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLinePosition.None">
            <summary>
            No position specified
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLinePosition.Above">
            <summary>
            Event marker should be shown above the middle of the time line.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLinePosition.Center">
            <summary>
            Event marker should be shown at the middle of the time line.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLinePosition.Below">
            <summary>
            Event marker should be shown below the middle of the time line.
            </summary>
        </member>
        <member name="T:OgamaControls.TimeLineRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLineRange.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLineRange.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="newStartTime"></param>
            <param name="newEndTime"></param>
        </member>
        <member name="P:OgamaControls.TimeLineRange.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLineRange.EndTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLineRange.IsSet">
            <summary>
            
            </summary>
        </member>
        <member name="T:OgamaControls.TimeLineEventCollection">
            <summary>
            Collection of selected nodes.
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLineEventCollection.Sort">
            <summary>
            Sorts the TimeLineEvent in the collection by their TimeLineEvent.Time value
            </summary>
        </member>
        <member name="T:OgamaControls.TimeLine">
            <summary>
            A range slider control with a caret.
            Inherits <see cref="T:System.Windows.Forms.ToolStripItem"/>.
            Uses the <see cref="T:System.Windows.Forms.TrackBarRenderer"/> to draw the items.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.TimeFont">
            <summary>
            A static <see cref="T:System.Drawing.Font"/> for the time values.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.TimeFontBrush">
            <summary>
            A static <see cref="T:System.Drawing.Brush"/> for the font for the time values.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._trackBounds">
            <summary>
            A <see cref="T:System.Drawing.Rectangle"/> with the bounds for the sliders track line.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._leftThumbBounds">
            <summary>
            A <see cref="T:System.Drawing.Rectangle"/> with the bounds for the start time thumb.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._caretThumbBounds">
            <summary>
            A <see cref="T:System.Drawing.Rectangle"/> with the bounds for the caret thumb.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._rightThumbBounds">
            <summary>
            A <see cref="T:System.Drawing.Rectangle"/> with the bounds for the end time thumb.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._leftThumbPosition">
            <summary>
            A <see cref="T:System.Double"/> with the position of the start time in percent of the sliders
            <see cref="P:OgamaControls.TimeLine.Duration"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._caretThumbPosition">
            <summary>
            A <see cref="T:System.Double"/> with the position of the caret time in percent of the sliders
            <see cref="P:OgamaControls.TimeLine.Duration"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._rightThumbPosition">
            <summary>
            A <see cref="T:System.Double"/> with the position of the ending time in percent of the sliders
            <see cref="P:OgamaControls.TimeLine.Duration"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._leftThumbClicked">
            <summary>
            A <see cref="T:System.Boolean"/> value, whether the start time thumb is clicked or not.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._caretThumbClicked">
            <summary>
            A <see cref="T:System.Boolean"/> value, whether the start time thumb is clicked or not.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._rightThumbClicked">
            <summary>
            A <see cref="T:System.Boolean"/> value, whether the start time thumb is clicked or not.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._leftThumbState">
            <summary>
            A <see cref="T:System.Windows.Forms.VisualStyles.TrackBarThumbState"/> with the current start time thumbs state.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._caretThumbState">
            <summary>
            A <see cref="T:System.Windows.Forms.VisualStyles.TrackBarThumbState"/> with the current caret time thumbs state.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._rightThumbState">
            <summary>
            A <see cref="T:System.Windows.Forms.VisualStyles.TrackBarThumbState"/> with the current ending time thumbs state.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._halfThumbWidth">
            <summary>
            A <see cref="T:System.Int32"/> which stores an half of the thumbs width.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._timeTextSize">
            <summary>
            A <see cref="T:System.Drawing.SizeF"/> with the measured text size of "00:00:000".
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._duration">
            <summary>
            A <see cref="T:System.Int32"/> with the duration of this slider.
            That is its maximum value and the reference for the thumbs.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._toolTipStartTime">
            <summary>
            A <see cref="T:System.Windows.Forms.ToolTip"/> to show the start time.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._toolTipEndTime">
            <summary>
            A <see cref="T:System.Windows.Forms.ToolTip"/> to show the ending time.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._showCaret">
            <summary>
            A flag whether to show or hide a caret at the <see cref="P:OgamaControls.TimeLine.CurrentTime"/>
            position.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine._showTimes">
            <summary>
            A flag indicating whether to show or hide the time values.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.eventImages">
            <summary>
            Saves the images that visualize the referring events on the timeline.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.caretIsMoving">
            <summary>
            Indicates a moving caret.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.highlightedTimeRange">
            <summary>
            Saves a time span that should be highlighted.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.timeLineEvents">
            <summary>
            Holds a list of events on the current timeline.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.timeLineMarkers">
            <summary>
            Contains the collection of markers on the current timeline.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.movingMarkerEventID">
            <summary>
            Saves the old time of the marker beeing moved.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.eventFilterList">
            <summary>
            The list of image keys indicating which events should not be drawn.
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLine.#ctor">
            <summary>
            Constructor. Initializes tooltips and slider.
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLine.SetupTrackBar">
            <summary>
            Calculate the sizes of the bar and thumbs rectangles.
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLine.OnCaretValueChanged(OgamaControls.TimeLine.PositionValueChangedEventArguments)">
            <summary>
            The protected OnCaretValueChanged method raises the 
            <see cref="E:OgamaControls.TimeLine.CaretValueChanged"/>event by invoking the delegates
            </summary>
            <param name="e">A <see cref="T:OgamaControls.TimeLine.PositionValueChangedEventArguments"/> with the new time.</param>
        </member>
        <member name="M:OgamaControls.TimeLine.OnCaretMovingStarted(System.EventArgs)">
            <summary>
            The protected OnCaretMovingStarted method raises the 
            <see cref="E:OgamaControls.TimeLine.CaretMovingStarted"/>event by invoking the delegates
            </summary>
            <param name="e">An empty<see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.TimeLine.OnCaretMovingFinished(System.EventArgs)">
            <summary>
            The protected OnCaretMovingFinished method raises the 
            <see cref="E:OgamaControls.TimeLine.CaretMovingFinished"/>event by invoking the delegates
            </summary>
            <param name="e">An empty<see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.TimeLine.OnSectionStartValueChanged(OgamaControls.TimeLine.PositionValueChangedEventArguments)">
            <summary>
            The protected OnSectionStartValueChanged method raises the 
            <see cref="E:OgamaControls.TimeLine.SectionStartValueChanged"/>event by invoking the delegates
            </summary>
            <param name="e">A <see cref="T:OgamaControls.TimeLine.PositionValueChangedEventArguments"/> with the new time
            of the sections start.</param>
        </member>
        <member name="M:OgamaControls.TimeLine.OnSectionEndValueChanged(OgamaControls.TimeLine.PositionValueChangedEventArguments)">
            <summary>
            The protected OnSectionEndValueChanged method raises the 
            <see cref="E:OgamaControls.TimeLine.SectionEndValueChanged"/>event by invoking the delegates
            </summary>
            <param name="e">A <see cref="T:OgamaControls.TimeLine.PositionValueChangedEventArguments"/> with the new time
            of the sections end.</param>
        </member>
        <member name="M:OgamaControls.TimeLine.OnMarkerPositionChanged(OgamaControls.TimeLine.MarkerPositionChangedEventArguments)">
            <summary>
            The protected OnMarkerPositionChanged method raises the 
            <see cref="E:OgamaControls.TimeLine.MarkerPositionChanged"/>event by invoking the delegates
            </summary>
            <param name="e">A <see cref="T:OgamaControls.TimeLine.MarkerPositionChangedEventArguments"/> with the old and new 
            marker times.</param>
        </member>
        <member name="M:OgamaControls.TimeLine.OnMarkerDeleted(OgamaControls.TimeLine.MarkerPositionChangedEventArguments)">
            <summary>
            The protected OnMarkerDeleted method raises the 
            <see cref="E:OgamaControls.TimeLine.MarkerDeleted"/> event by invoking the delegates
            </summary>
            <param name="e">A <see cref="T:OgamaControls.TimeLine.MarkerPositionChangedEventArguments"/> with the old 
            marker time.</param>
        </member>
        <member name="M:OgamaControls.TimeLine.GetPreferredSize(System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="constrainingSize"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.TimeLine.OnBoundsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLine.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Occurs when the control is redrawn. 
            Draws the whole track bar and its thumbs, along with the timing.
            If section start and end thumbs are hot or pressed, show tooltip
            with timing information.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:OgamaControls.TimeLine.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raised when mouse down occured.
            Determine whether the user has clicked a track bar thumb.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:OgamaControls.TimeLine.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raised when mouse up occured.
            Redraw the track bar thumb if the user has moved it.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:OgamaControls.TimeLine.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raised when mouse move occured.
            Track cursor movements.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:OgamaControls.TimeLine.OnMouseLeave(System.EventArgs)">
            <summary>
            Overriden. Raised when mouse pointer leaves the control. 
            Reset clicked states.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.TimeLine.MoveToNextMarker(System.Boolean)">
            <summary>
            This method moves the caret slider to the next time line event position,
            if there is any in the direction given by the parameter
            </summary>
            <param name="forward"><strong>True</strong> if the next event in forward direction,
            should be choosen, otherwise <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.TimeLine.ConvertToSeconds(System.Int32)">
            <summary>
            Converts milliseconds value into a string format "00:00:000"
            </summary>
            <param name="value">An <see cref="T:System.Int32"/> with the time in milliseconds.</param>
            <returns>A <see cref="T:System.String"/> representation of the time in the format "00:00:000".</returns>
        </member>
        <member name="M:OgamaControls.TimeLine.ResetTimeLine">
            <summary>
            Sets trackbar position to zero.
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLine.MoveToNextTimeLineEvent(System.Boolean)">
            <summary>
            This method moves the caret slider to the next time line event position,
            if there is any in the direction given by the parameter
            </summary>
            <param name="forward"><strong>True</strong> if the next event in forward direction,
            should be choosen, otherwise <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.TimeLine.GetXCoordinateForPosition(System.Double)">
            <summary>
            Returns the current left thumbs X coordinate.
            </summary>
            <returns>A <see cref="T:System.Int32"/> with the left thumbs X coordinate in pixels relative to the tracks bounds.</returns>
        </member>
        <member name="E:OgamaControls.TimeLine.CaretValueChanged">
            <summary>
            An event that is raised when the carets position has changed.
            </summary>
        </member>
        <member name="E:OgamaControls.TimeLine.SectionStartValueChanged">
            <summary>
            An event that is raised when the sections start position has changed.
            </summary>
        </member>
        <member name="E:OgamaControls.TimeLine.SectionEndValueChanged">
            <summary>
            An event that is raised when the sections end position has changed.
            </summary>
        </member>
        <member name="E:OgamaControls.TimeLine.CaretMovingStarted">
            <summary>
            
            </summary>
        </member>
        <member name="E:OgamaControls.TimeLine.CaretMovingFinished">
            <summary>
            
            </summary>
        </member>
        <member name="E:OgamaControls.TimeLine.MarkerPositionChanged">
            <summary>
            An event that is raised when the markers position has changed.
            </summary>
        </member>
        <member name="E:OgamaControls.TimeLine.MarkerDeleted">
            <summary>
            An event that is raised when a marker is deleted by dragging it away from the controls bounds.
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLine.HighlightedTimeLineRange">
            <summary>
            Gets or sets an highlighted TimeRange
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLine.TimeLineEvents">
            <summary>
            Gets or sets events on the timeline.
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLine.TimeLineMarkers">
            <summary>
            Gets or sets markers on the timeline.
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLine.EventFilterList">
            <summary>
            Gets or sets the image key filter on the timeline.
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLine.EventImages">
            <summary>
            Gets or sets the event visualization images.
            </summary>
            <value>An <see cref="T:System.Windows.Forms.ImageList"/> with the images to be used
            in the time line event visualization.</value>
        </member>
        <member name="P:OgamaControls.TimeLine.Duration">
            <summary>
            Gets or sets the sliders maximum value.
            Should be given in milliseconds.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the duration of this slider.
            That is its maximum value and the reference for the thumbs.</value>
        </member>
        <member name="P:OgamaControls.TimeLine.ShowCaret">
            <summary>
            Gets or sets a flag whether to show or hide the caret with the
            track bars current position.
            </summary>
            <value><strong>True</strong>, if track bar should show a caret at the
            <see cref="P:OgamaControls.TimeLine.CurrentTime"/> position.</value>
        </member>
        <member name="P:OgamaControls.TimeLine.ShowTimes">
            <summary>
            Gets or sets a flag indicating whether to show or hide the time values.
            </summary>
            <value><strong>True</strong>, if track bar should show timing values.</value>
        </member>
        <member name="P:OgamaControls.TimeLine.CurrentTime">
            <summary>
            Gets or sets the position of the caret.
            Should be given in milliseconds.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the milliseconds of the current time position.</value>
            <exception cref="T:System.ArgumentException">Thrown, when CurrentTime is not in the range of the valid section.</exception>
        </member>
        <member name="P:OgamaControls.TimeLine.SectionStartTime">
            <summary>
            Gets or sets the start time of the section to play in milliseconds.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the milliseconds of the start time of the section.</value>
        </member>
        <member name="P:OgamaControls.TimeLine.SectionEndTime">
            <summary>
            Gets or sets the ending time of the section to play in milliseconds.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the milliseconds of the ending time of the section.</value>
        </member>
        <member name="P:OgamaControls.TimeLine.DefaultSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:OgamaControls.TimeLine.PositionValueChangedEventHandler">
            <summary>
            Delegate declaration of PositionValueChanged event
            </summary>
            <param name="sender">sender of PositionValueChanged event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:OgamaControls.TimeLine.MarkerPositionChangedEventHandler">
            <summary>
            Delegate declaration of MarkerPositionChanged event
            </summary>
            <param name="sender">sender of MarkerPositionChanged event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:OgamaControls.TimeLine.PositionValueChangedEventArguments">
            <summary>
            Class that contains the data for the slider value changed event. Derives from System.EventArgs.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.PositionValueChangedEventArguments._currentMillisecond">
            <summary>
            string containing current timing position in ms.
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLine.PositionValueChangedEventArguments.#ctor(System.Int32)">
            <summary>
            Constructor. Initializes fields.
            </summary>
            <param name="currentMillisecond">Integer containing current timing position in ms.</param>
        </member>
        <member name="P:OgamaControls.TimeLine.PositionValueChangedEventArguments.Millisecond">
            <summary>
            Gets  a string containing current timing position in ms
            </summary>
        </member>
        <member name="T:OgamaControls.TimeLine.MarkerPositionChangedEventArguments">
            <summary>
            Class that contains the data for the marker position changed event. Derives from System.EventArgs.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.MarkerPositionChangedEventArguments.markerEventID">
            <summary>
            An <see cref="T:System.Int32"/> containing the markers event ID.
            </summary>
        </member>
        <member name="F:OgamaControls.TimeLine.MarkerPositionChangedEventArguments.newTime">
            <summary>
            An <see cref="T:System.Int32"/> containing the new marker time in ms.
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLine.MarkerPositionChangedEventArguments.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor. Initializes fields.
            </summary>
            <param name="newMarkerEventID">An <see cref="T:System.Int32"/> containing the markers event ID.</param>
            <param name="newMillisecond">An <see cref="T:System.Int32"/> containing new marker timing position in ms.</param>
        </member>
        <member name="P:OgamaControls.TimeLine.MarkerPositionChangedEventArguments.MarkerEventID">
            <summary>
            Gets the <see cref="T:System.Int32"/> containing the markers event ID.
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLine.MarkerPositionChangedEventArguments.NewTime">
            <summary>
            Gets the <see cref="T:System.Int32"/> containing new timing position in ms of the marker.
            </summary>
        </member>
        <member name="T:OgamaControls.TimeLineEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLineEvent.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLineEvent.#ctor(System.Int32,System.String,System.Single,System.Drawing.Color,OgamaControls.TimeLinePosition)">
            <summary>
            
            </summary>
            <param name="newTime"></param>
            <param name="newImageKey"></param>
            <param name="newStrokeWidth"></param>
            <param name="newStrokeColor"></param>
            <param name="newPosition"></param>
        </member>
        <member name="P:OgamaControls.TimeLineEvent.Time">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLineEvent.StrokeColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLineEvent.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLineEvent.ImageKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.TimeLineEvent.StrokeWidth">
            <summary>
            
            </summary>
        </member>
        <member name="T:OgamaControls.TimeLineEventComparer">
            <summary>
            Class. Implements the manual sorting of treenodes by index.
            </summary>
        </member>
        <member name="M:OgamaControls.TimeLineEventComparer.Compare(OgamaControls.TimeLineEvent,OgamaControls.TimeLineEvent)">
            <summary>
            Compares two objects and returns a value indicating 
            whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first <see cref="T:System.Object"/> to compare. </param>
            <param name="y">The second <see cref="T:System.Object"/> to compare. </param>
            <returns>"Less than zero" if x is less than y. 
            "Zero" if x equals y. and "Greater than zero", if
            x is greater than y.</returns>
        </member>
        <member name="T:OgamaControls.PrintableRichTextBox">
            <summary>
            This class is an extended <see cref="T:System.Windows.Forms.RichTextBox"/> used in <see cref="T:OgamaControls.RTBTextControl"/>
            that could be printed or rendered via <see cref="M:OgamaControls.PrintableRichTextBox.FormatRange(System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Size,System.Boolean,System.Drawing.Graphics)"/> 
            to a device.
            </summary>
            <remarks>Some references
            Original MSDN kb:
            Sites
            http://home.att.net/~robertdunn/Papers/REPnP2.html
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/commctls/richedit/richeditcontrols/richeditcontrolreference/richeditmessages/em_formatrange.asp
            http://support.microsoft.com/default.aspx?scid=kb;en-us;812425
            </remarks>
        </member>
        <member name="F:OgamaControls.PrintableRichTextBox.anInch">
            <summary>
            Constant used to convert an Inch into TWIPS.
            </summary>
            <remarks>Convert the unit used by the .NET framework (1/100 inch) 
            and the unit used by Win32 API calls (twips 1/1440 inch)
            </remarks>
        </member>
        <member name="F:OgamaControls.PrintableRichTextBox.anPixel">
            <summary>
            Constant used to convert an Pixel into TWIPS.
            </summary>
            <remarks>Convert the unit used by the used by the Screen (Pixel) 
            and the unit used by Win32 API calls (twips 1/1440 inch)
            </remarks>
        </member>
        <member name="F:OgamaControls.PrintableRichTextBox.rtbTemp">
            <summary>
            Saves a temporarily <see cref="T:VectorGraphics.Controls.RichEdit50Transparent"/> that is
            used.
            </summary>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.cmu_ItemClicked(System.Object,System.Windows.Forms.ToolStripItemClickedEventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.ToolStrip.ItemClicked"/> event handler 
            for the <see cref="T:System.Windows.Forms.ContextMenu"/> <see cref="F:OgamaControls.PrintableRichTextBox.cmu"/>
            Triggers the commands of the menu to the underlying control.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.ToolStripItemClickedEventArgs"/> with the event data.</param>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.cbbGreek_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event handler 
            for the <see cref="T:System.Windows.Forms.ToolStripComboBox"/> <see cref="F:OgamaControls.PrintableRichTextBox.cbbGreek"/>
            Copy the special character to the clipboard and the pastes it
            into the rich text box.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.PrintableRichTextBox_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.KeyDown"/> event handler 
            for the <see cref="T:OgamaControls.PrintableRichTextBox"/>.
            Triggers the keyboard commands to the underlying control.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> with the event data.</param>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.Print(System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Size,System.Boolean,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Render the contents of the RichTextBox for printing into a page given in the
            <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/>.
            </summary>
            <param name="charFrom">Character position index immediately preceding the first character in the range. </param>
            <param name="charTo">Character position immediately following the last character in the range. </param>
            <param name="position">A <see cref="T:System.Drawing.Point"/> with the location on the printing pahe</param>
            <param name="size">A <see cref="T:System.Drawing.Size"/> with the bounds for the rendering.</param>
            <param name="measure">A flag, indicating, if this method is used to render (false) or to measure (true).</param>
            <param name="e">The <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> to render to.</param>
            <returns> Return the last character printed + 1 (printing start from this point for next page)</returns>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.FormatRange(System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Size,System.Boolean,System.Drawing.Graphics)">
            <summary>
            Formats a range of text in a rich edit control for a specific device.
            </summary>
            <param name="charFrom">Character position index immediately preceding the first character in the range. </param>
            <param name="charTo">Character position immediately following the last character in the range. </param>
            <param name="position">A <see cref="T:System.Drawing.Point"/> with the location on the printing pahe</param>
            <param name="size">A <see cref="T:System.Drawing.Size"/> with the bounds for the rendering.</param>
            <param name="measure">A flag, indicating, if this method is used to render (false) or to measure (true).</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to render to.</param>
            <returns> Return the last character printed + 1 (printing start from this point for next page)</returns>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.drawToBitmap(System.Drawing.Bitmap)">
            <summary>
            This method renders the content of this
            <see cref="T:System.Windows.Forms.RichTextBox"/> into the given bitmap.
            </summary>
            <param name="drawBitmap">A <see cref="T:System.Drawing.Bitmap"/> with the size
            that the rich text box should be rendered to.</param>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.ChangeFont(System.String)">
            <summary>
            Change the richtextbox font for the current selection
            </summary>
            <param name="fontFamily">A <see cref="T:System.String"/> with the font family name.</param>
            <remarks>This method should handle cases that occur when multiple fonts/styles are selected
            Parameters:-
            
            fontFamily - the font to be applied, eg "Courier New"
            Reason: The reason this method and the others exist is because
            setting these items via the selection font doen't work because
            a null selection font is returned for a selection with more 
            than one font!</remarks>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.ChangeFontStyle(System.Drawing.FontStyle,System.Boolean)">
            <summary>
            Change the richtextbox style for the current selection
             This method should handle cases that occur when multiple fonts/styles are selected
            </summary>
            <param name="style">The new <see cref="T:System.Drawing.FontStyle"/>, e.g. <see cref="F:System.Drawing.FontStyle.Bold"/></param>
            <param name="add">IF <strong>true</strong> then add else remove</param>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.ChangeFontSize(System.Single)">
            <summary>
            Change the richtextbox font size for the current selection.
            This method should handle cases that occur when multiple fonts/styles are selected.
            </summary>
            <param name="fontSize">A <see cref="T:System.Single"/> with the fontsize to be applied, eg 33.5</param>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.ChangeFontColor(System.Drawing.Color)">
            <summary>
            Change the richtextbox font color for the current selection,
            This method should handle cases that occur when multiple fonts/styles are selected.
            </summary>
            <param name="newColor">The new <see cref="T:System.Drawing.Color"/> to set.</param>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.ChangeBackgroundColor(System.Drawing.Color)">
            <summary>
            Change the richtextbox background color for the current selection,
            This method should handle cases that occur when multiple fonts/styles are selected.
            </summary>
            <param name="newColor">The new <see cref="T:System.Drawing.Color"/> to set.</param>
        </member>
        <member name="F:OgamaControls.PrintableRichTextBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.PrintableRichTextBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OgamaControls.RTBTextControl">
            <summary>
            This <strong>RTBTextControl</strong> is derived from <see cref="T:System.Windows.Forms.UserControl"/>.
            It hosts an extended <see cref="P:OgamaControls.RTBTextControl.RichTextBox"/> an exposes an user interface
            with a menu to it to handle the standard layout and formatting actions
            used in a <see cref="P:OgamaControls.RTBTextControl.RichTextBox"/>.
            You can subscribe to the <see cref="E:OgamaControls.RTBTextControl.SelChanged"/> event which is raised,
            when the selection of the underlying <see cref="P:OgamaControls.RTBTextControl.RichTextBox"/> has changed
            and the <see cref="E:OgamaControls.RTBTextControl.RtfChanged"/> event which is raised, whenever
            the <see cref="P:OgamaControls.RTBTextControl.RichTextBox"/>s formatted text changed.
            </summary>
        </member>
        <member name="F:OgamaControls.RTBTextControl.rtbTemp">
            <summary>
            Saves a temporarily PrintableRichTextBox which is used
            in <see cref="M:OgamaControls.RTBTextControl.GetFontDetails"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.RTBTextControl._showToolBarText">
            <summary>
            Saves whether the menu should show the toolbars label.
            </summary>
        </member>
        <member name="M:OgamaControls.RTBTextControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.RTBTextControl.RTBTextControl_Load(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Form.Load"/> event handler, Initializes UI.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.RTBTextControl_Leave(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Leave"/> event handler 
            for the <see cref="T:System.Windows.Forms.Form"/> <see cref="T:OgamaControls.RTBTextControl"/>
            Raises the <see cref="E:OgamaControls.RTBTextControl.RtfChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnSave_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnSave"/>
            Saves the current RichTextBox content into a file.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnOpen_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnOpen"/>
            Opens a textual content into the RichTextBox.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnBold_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnBold"/>
            Changes the <see cref="F:System.Drawing.FontStyle.Bold"/> style 
            of the selected Text in the RichTextBox, referring to the buttons state.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnItalic_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnItalic"/>
            Changes the <see cref="F:System.Drawing.FontStyle.Italic"/> style 
            of the selected Text in the RichTextBox, referring to the buttons state.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnUnderline_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnUnderline"/>
            Changes the <see cref="F:System.Drawing.FontStyle.Underline"/> style 
            of the selected Text in the RichTextBox, referring to the buttons state.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnStrikeout_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnStrikeout"/>
            Changes the <see cref="F:System.Drawing.FontStyle.Strikeout"/> style 
            of the selected Text in the RichTextBox, referring to the buttons state.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnLeftAlign_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnLeftAlign"/>
            Changes the <see cref="T:System.Windows.Forms.HorizontalAlignment"/> style 
            of the selected Text paragraph in the RichTextBox
            to <see cref="F:System.Windows.Forms.HorizontalAlignment.Left"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnCenter_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnLeftAlign"/>
            Changes the <see cref="T:System.Windows.Forms.HorizontalAlignment"/> style 
            of the selected Text paragraph in the RichTextBox
            to <see cref="F:System.Windows.Forms.HorizontalAlignment.Center"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnRightAlign_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnLeftAlign"/>
            Changes the <see cref="T:System.Windows.Forms.HorizontalAlignment"/> style 
            of the selected Text paragraph in the RichTextBox
            to <see cref="F:System.Windows.Forms.HorizontalAlignment.Right"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnUndo_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnUndo"/>
            Performs an Undo for the RichTextBox.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnRedo_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnRedo"/>
            Performs an Redo for the RichTextBox.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnCut_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnCut"/>
            Performs an edit-&gt;cut operation on the
            rich text box control.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnCopy_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnCopy"/>
            Performs an edit-&gt;copy operation on the
            rich text box control.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.btnPaste_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.RTBTextControl.btnPaste"/>
            Performs an edit-&gt;paste operation on the
            rich text box control.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.cbbColor_ColorChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:OgamaControls.ToolStripColorDropdown.ColorChanged"/> event handler 
            for the <see cref="T:OgamaControls.ToolStripColorDropdown"/> <see cref="F:OgamaControls.RTBTextControl.cbbColor"/>
            set the richtextbox color based on the name of the menu item
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.cbbFontFamilies_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.ToolStripComboBox.SelectedIndexChanged"/> event handler 
            for the <see cref="T:System.Windows.Forms.ToolStripComboBox"/> <see cref="F:OgamaControls.RTBTextControl.cbbFontFamilies"/>
            Set the font for the entire selection.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.cbbFontSize_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.ToolStripComboBox.SelectedIndexChanged"/> event handler 
            for the <see cref="T:System.Windows.Forms.ToolStripComboBox"/> <see cref="F:OgamaControls.RTBTextControl.cbbFontSize"/>
            Change the richtextbox font size.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.cbbFontSize_TextChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.ToolStripItem.TextChanged"/> event handler 
            for the <see cref="T:System.Windows.Forms.ToolStripComboBox"/> <see cref="F:OgamaControls.RTBTextControl.cbbFontSize"/>
            Change the richtextbox font size.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.rtb1_TextChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.ToolStripItem.TextChanged"/> event handler 
            for the <see cref="P:OgamaControls.RTBTextControl.RichTextBox"/> <see cref="F:OgamaControls.RTBTextControl.rtb1"/>
            Raises the <see cref="E:OgamaControls.RTBTextControl.RtfChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.rtb1_LinkClicked(System.Object,System.Windows.Forms.LinkClickedEventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.RichTextBox.LinkClicked"/> event handler 
            for the <see cref="P:OgamaControls.RTBTextControl.RichTextBox"/> <see cref="F:OgamaControls.RTBTextControl.rtb1"/>.
            Starts the default browser if a link is clicked
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.LinkClickedEventArgs"/> with the event data.</param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.rtb1_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.KeyDown"/> event handler 
            for the <see cref="P:OgamaControls.RTBTextControl.RichTextBox"/> <see cref="F:OgamaControls.RTBTextControl.rtb1"/>
            Checks for style shortcuts like Control-B for bold.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> with the event data.</param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.rtb1_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.KeyPress"/> event handler 
            for the <see cref="P:OgamaControls.RTBTextControl.RichTextBox"/> <see cref="F:OgamaControls.RTBTextControl.rtb1"/>
            Stops Ctrl+I from inserting a tab (char HT) into the richtextbox
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> with the event data.</param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.rtb1_SelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Change the toolbar buttons when new text is selected
            and raise event SelChanged
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.UpdateToolbar">
            <summary>
            Update the toolbar button statuses
            </summary>
        </member>
        <member name="M:OgamaControls.RTBTextControl.UpdateToolbarSeperators">
            <summary>
            Updates the separators of the menu items
            according to visibility of buttons.
            </summary>
        </member>
        <member name="M:OgamaControls.RTBTextControl.UpdateContextMenuSeperators">
            <summary>
            Updates the separators of the context menu items
            according to visibility of buttons.
            </summary>
        </member>
        <member name="M:OgamaControls.RTBTextControl.Paste">
            <summary>
            Pastes the content of the clipboard into the rich text box control.
            </summary>
        </member>
        <member name="M:OgamaControls.RTBTextControl.Copy">
            <summary>
            Copys the selected content of the rich text box
            into the clipboard.
            </summary>
        </member>
        <member name="M:OgamaControls.RTBTextControl.Cut">
            <summary>
            Cuts the selected content of the rich text box
            into the clipboard.
            </summary>
        </member>
        <member name="M:OgamaControls.RTBTextControl.GetFontDetails">
            <summary>
            Returns a Font with:
              1) The font applying to the entire selection, if none is the default font. 
              2) The font size applying to the entire selection, if none is the size of the default font.
              3) A style containing the attributes that are common to the entire selection, default regular.
            </summary>		
            <returns>The <see cref="T:System.Drawing.Font"/> that is currently selected.</returns>
        </member>
        <member name="M:OgamaControls.RTBTextControl.ParseFontSize(System.Object)">
            <summary>
            This method parses the drop down value
            for the fontsize and updates the selection accordingly.
            </summary>
            <param name="sender">The sender of the new size, could 
            be the context menu or the menu.</param>
        </member>
        <member name="F:OgamaControls.RTBTextControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.RTBTextControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.RTBTextControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.RTBTextControl.SelChanged">
            <summary>
            Raised in rtb1_SelectionChanged event so that user can do useful things
            </summary>
        </member>
        <member name="E:OgamaControls.RTBTextControl.RtfChanged">
            <summary>
            Raised, when the rich text box controls content has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ToolbarRenderMode">
            <summary>
            Gets or sets the style of the menu toolbar.
            </summary>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ToolbarVisible">
            <summary>
            Gets or sets the visibility of the menu.
            </summary>
        </member>
        <member name="P:OgamaControls.RTBTextControl.DefaultFontSize">
            <summary>
            Gets or sets the Default RichTextBoxs font size.
            </summary>
            <value>A <see cref="T:System.Single"/> with the default em font size.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.RichTextBox">
            <summary>
            Gets the RichTextBox that is 
            contained with-in the RichTextBoxExtended control
            </summary>
            <value>A <see cref="T:OgamaControls.PrintableRichTextBox"/> that contains the formatted text.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowSave">
            <summary>
            Gets or sets the visibility of the save button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button save should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowOpen">
            <summary>
            Gets or sets the visibility of the open button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the open save should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowColors">
            <summary>
            Gets or sets the visibility of the color dropdown.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the color dropdown should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowUndo">
            <summary>
            Gets or sets the visibility of the undo button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button undo should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowRedo">
            <summary>
            Gets or sets the visibility of the redo button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button redo should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowBold">
            <summary>
            Gets or sets the visibility of the bold button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button bold should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowItalic">
            <summary>
            Gets or sets the visibility of the italic button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button italic should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowUnderline">
            <summary>
            Gets or sets the visibility of the underline button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button underline should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowStrikeout">
            <summary>
            Gets or sets the visibility of the strikeout button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button strikeout should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowLeftJustify">
            <summary>
            Gets or sets the visibility of the align left button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button align left should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowRightJustify">
            <summary>
            Gets or sets the visibility of the align right button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button align right should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowCenterJustify">
            <summary>
            Gets or sets the visibility of the align center button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button align center should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowFont">
            <summary>
            Gets or sets the visibility of the font families drop down.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the font families drop down should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowFontSize">
            <summary>
            Gets or sets the visibility of the font size drop down.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the font size drop down should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowCut">
            <summary>
            Gets or sets the visibility of the cut button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button cut should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowCopy">
            <summary>
            Gets or sets the visibility of the copy button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button copy should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowPaste">
            <summary>
            Gets or sets the visibility of the paste button.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the button paste should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowLabel">
            <summary>
            Gets or sets the visibility of the label.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the label should be shown, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.DetectURLs">
            <summary>
            Gets or sets whether the rich text box will detect URLS.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the rich text box detects URLS, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.AcceptsTab">
            <summary>
            Gets or sets if the TAB key moves to the next control or enters a TAB character in the richtextbox.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the if the TAB key enters a TAB character in the richtextbox, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.AutoWordSelection">
            <summary>
            Gets or sets the auto word selection value.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the auto word selection is enabled, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.Label">
            <summary>
            Gets or sets the label of the rich text box.
            </summary>
            <value>A <see cref="T:System.String"/> with the controls label.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ReadOnly">
            <summary>
            Gets or sets if this control can be edited
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the control can be edited, otherwise <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.RTBTextControl.ShowToolBarText">
            <summary>
            Determines if the buttons on the toolbar will show there text or not
            </summary>
            <value>A <see cref="T:System.Boolean"/> that is <strong>true</strong>,
            if the toolbar buttons will show there text, otherwise <strong>false</strong>.</value>
        </member>
        <member name="T:OgamaControls.BrushSelectControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.BrushSelectControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.BrushSelectControl.OnBrushStyleChanged(VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs)">
            <summary>
            Raises the <see cref="E:OgamaControls.BrushSelectControl.BrushStyleChanged"/> event by invoking the delegates.
            </summary>
            <param name="e"><see cref="T:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs"/> event arguments</param>.
        </member>
        <member name="F:OgamaControls.BrushSelectControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.BrushSelectControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.BrushSelectControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.BrushSelectControl.BrushStyleChanged">
            <summary>
            The event that is raised when the brush style has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.BrushSelectControl.Brush">
            <summary>
            Sets current brush of the control and updates property fields.
            </summary>
        </member>
        <member name="T:OgamaControls.BrushStyleArea">
            <summary>
            Area to show pen style.
            </summary>
        </member>
        <member name="M:OgamaControls.BrushStyleArea.#ctor">
            <summary>
            Constructor. Initializes members.
            </summary>
        </member>
        <member name="M:OgamaControls.BrushStyleArea.BrushStyleArea_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event handler. Redraws area with current Pen.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.BrushStyleArea.OnBrushStyleChanged(VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs)">
            <summary>
            The protected OnPenStyleChanged method raises the progress event by invoking 
            the delegates
            </summary>
            <param name="e">A <see cref="T:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs"/> with the event arguments</param>
        </member>
        <member name="F:OgamaControls.BrushStyleArea.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.BrushStyleArea.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.BrushStyleArea.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.BrushStyleArea.BrushStyleChanged">
            <summary>
            Event handler. Raised, when dialogs parameters has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.BrushStyleArea.Brush">
            <summary>
            Gets or sets the controls brush.
            </summary>
        </member>
        <member name="T:OgamaControls.ColorSelectControl">
            <summary>
            ColorSelectControl - A control that lets the user rapidly select a color by picking
            a specific hue, then adjusting luminance/brightness and saturation to tweak it. The 
            user may also left click on the selected color area to get the more precise but 
            clumsier color pick dialog provided by Windows.
            </summary>
            <remarks>Created on 02/19/2005 by Kevin Menningen
            This code is released to the public domain for any use, private or commercial.
            You may modify this code and include it in any project. Please leave this comment
            section in the code.
            Added transpareny option - Adrian Voßkühler 03.08.08</remarks>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.HUE_SELECT_ARROW_HEIGHT">
            <summary>
            The height of the hue arrow.
            </summary>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.m_Hue">
            <summary>
            The hue value. Varies 0.0f - 360.0f (degrees)
            </summary>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.m_Luminance">
            <summary>
            The Luminance Value, varies 0.0f - 1.0f
            </summary>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.m_Saturation">
            <summary>
            The Saturation value,varies 0.0f - 1.0f;
            </summary>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.m_Transparency">
            <summary>
            The Transparency value,varies 0.0f - 1.0f;
            </summary>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.m_LumMax">
            <summary>
            maximum scroll bar value
            </summary>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.m_SatMax">
            <summary>
            maximum scroll bar value
            </summary>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.m_TransMax">
            <summary>
            maximum scroll bar value
            </summary>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.m_HuePixelStep">
            <summary>
            amount of hue per pixel
            </summary>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.m_Button">
            <summary>
            Saves which button engaged the timer
            </summary>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.#ctor">
            <summary>
            Constructor. Initializes control with default values.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.ColorSelectControl_Load(System.Object,System.EventArgs)">
            <summary>
            The control is being initialized for the first time
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event parameters</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.panelHue_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Paint"/> event handler for
            the <see cref="T:System.Windows.Forms.Panel"/> panelHue.
            Redraws the hue panel.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Paint arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.ColorSelectControl_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw the control event
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Paint arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.panelSelectedColor_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the preview panel with the current selected color.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.wndScrollBrightness_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            User is moving the the scroll control for brightness/luminance
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.wndScrollSaturation_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            User is moving the scroll control for saturation
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.wndScrollTranspareny_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            User is moving the scroll control for transparency
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.btnLeft_Click(System.Object,System.EventArgs)">
            <summary>
            User is clicking (once) the button to move the hue to the left. This is also called
            when the user presses the left arrow when this control has keyboard focus.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.btnRight_Click(System.Object,System.EventArgs)">
            <summary>
            User is clicking (once) the button to move the hue to the right. This is also called
            when the user presses the right arrow when this control has keyboard focus.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.btnLeft_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            User is holding down the arrow left button to scroll left. This is different from a 
            single click, so we start a timer to perform multiple "clicks" while the timer
            is running, which allows the user to move the hue continuously left.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.btnRight_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            User is holding down the arrow left button to scroll right. This is different from a 
            single click, so we start a timer to perform multiple "clicks" while the timer
            is running, which allows the user to move the hue continuously right.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.OnMouseButtonUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            User has let go of the left mouse button after holding down either the arrow
            left or the arrow right button. Stop the timer.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.Timer_Tick(System.Object,System.EventArgs)">
            <summary>
            Timer has fired while the user is holding down the left mouse button over either the
            arrow left or the arrow right buttons.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.panelHue_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Updates the color during moving the dragged mouse on the hue panel.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.panelHue_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Updates the color during dragging mouse on the hue panel.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.panelSelectedColor_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes a <see cref="T:System.Windows.Forms.ColorDialog"/> when user
            clicked on the preview Panel.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.OnColorChanged(OgamaControls.ColorChangedEventArgs)">
            <summary>
            The OnColorChanged method raises the 
            <see cref="E:OgamaControls.ColorSelectControl.ColorChanged"/> event by invoking the delegates.
            </summary>
            <param name="e">The <see cref="T:OgamaControls.ColorChangedEventArgs"/> with the event data.</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            User is pressing a dialog key while the control has keyboard focus. Check for arrow keys and
            allow hue select if the arrow keys are used.
            </summary>
            <param name="keyData">Key data with key pressed enumeration</param>
            <returns>always true</returns>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.NotifyColorChange">
            <summary>
            The color has been modified, notify the callback host if any
            </summary>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.RGBToHSL(System.Drawing.Color,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Convert RGB color to Hue, Saturation, Luminance. Adapted from C++ code for CColor
            obtained from CColor - RGB and HLS combined in one class By Christian Rodemeyer 
            at http://codeproject.com/bitmap/ccolor.asp
            </summary>
            <param name="inColor">Color in</param>
            <param name="Hue">Hue 0-360</param>
            <param name="Saturation">Saturation (0.0 - 1.0)</param>
            <param name="Luminance">Luminance (0.0 - 1.0)</param>
            <param name="Transparency">Transparency (0.0 - 1.0)</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.ToRGB1(System.Single,System.Single,System.Single)">
            <summary>
            Helper method to do some math to convert HSL/HLS to RGB. Adapted from C++ code for CColor
            obtained from CColor - RGB and HLS combined in one class By Christian Rodemeyer 
            at http://codeproject.com/bitmap/ccolor.asp
            </summary>
            <param name="rm1">Root mean 1</param>
            <param name="rm2">Root mean 2</param>
            <param name="rh">Right hand side</param>
            <returns>Byte containing part of a RGB value</returns>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.HSLToRGB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Convert HSL to RGB (.NET Color class). Adapted from C++ code for CColor
            obtained from CColor - RGB and HLS combined in one class By Christian Rodemeyer 
            at http://codeproject.com/bitmap/ccolor.asp
            </summary>
            <param name="Hue">Hue in degrees 0.0f - 360.0f</param>
            <param name="Saturation">Saturation from 0.0f - 1.0f</param>
            <param name="Luminance">Luminance/Brightness from 0.0f - 1.0f</param>
            <param name="Transparency">Transparency from 0.0f - 1.0f</param>
            <returns>Color class initialized to the selected color.</returns>
        </member>
        <member name="F:OgamaControls.ColorSelectControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.ColorSelectControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.ColorSelectControl.ColorChanged">
            <summary>
            Event handler. Raised, when controls parameters has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.ColorSelectControl.SelectedColor">
            <summary>
            Gets or sets the selected color. You might set it prior to showing the control
            so that the control is initialized using a default or previously stored color.
            </summary>
        </member>
        <member name="T:OgamaControls.CheckboxTreeView">
            <summary>
            This is a bugfixed version of the <see cref="T:System.Windows.Forms.TreeView"/>
            which correct handles checkboxes activation on double clicks.
            </summary>
            <remarks>Have a look at https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=374516</remarks>
        </member>
        <member name="M:OgamaControls.CheckboxTreeView.#ctor">
            <summary>
            Initializes a new instance of the CheckboxTreeView class.
            </summary>
        </member>
        <member name="M:OgamaControls.CheckboxTreeView.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the CheckboxTreeView class.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:OgamaControls.CheckboxTreeView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="F:OgamaControls.CheckboxTreeView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.CheckboxTreeView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.CheckboxTreeView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OgamaControls.TreeViewSelectionMode">
            <summary>
            Selection mode for the treeview.	
            </summary>
            <remarks>
            The Selection mode determines how treeview nodes can be selected.
            </remarks>
        </member>
        <member name="F:OgamaControls.TreeViewSelectionMode.SingleSelect">
            <summary>
            Only one node can be selected at a time.
            </summary>
        </member>
        <member name="F:OgamaControls.TreeViewSelectionMode.MultiSelect">
            <summary>
            Multiple nodes can be selected at the same time without restriction.
            </summary>
        </member>
        <member name="F:OgamaControls.TreeViewSelectionMode.MultiSelectSameRootBranch">
            <summary>
            Multiple nodes that belong to the same root branch can be selected at the same time.
            </summary>
        </member>
        <member name="F:OgamaControls.TreeViewSelectionMode.MultiSelectSameLevel">
            <summary>
            Multiple nodes that belong to the same level can be selected at the same time.
            </summary>
        </member>
        <member name="F:OgamaControls.TreeViewSelectionMode.MultiSelectSameLevelAndRootBranch">
            <summary>
            Multiple nodes that belong to the same level and same root branch can be selected at the same time.
            </summary>
        </member>
        <member name="F:OgamaControls.TreeViewSelectionMode.MultiSelectSameParent">
            <summary>
            Only nodes that belong to the same direct parent can be selected at the same time.
            </summary>
        </member>
        <member name="T:OgamaControls.TreeNodeEventHandler">
            <summary>
            Delegate used for tree node events.
            </summary>
        </member>
        <member name="T:OgamaControls.MultiselectTreeView">
            <summary>
            The TreeView control is a regular treeview with multi-selection capability.
            </summary>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.OnAfterDeselect(System.Windows.Forms.TreeNode)">
            <summary>
            
            </summary>
            <param name="tn"></param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.OnBeforeDeselect(System.Windows.Forms.TreeNode)">
            <summary>
            
            </summary>
            <param name="tn"></param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.OnSelectionsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.blnInternalCall">
            <summary>
            Used to make sure that SelectedNode can only be used from within this class.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.htblSelectedNodes">
            <summary>
            Hashtable that contains all selected nodes.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.blnSelectionChanged">
            <summary>
            Track whether the total SelectedNodes changed across multiple operations
            for SelectionsChanged event
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.htblSelectedNodesOrigColors">
            <summary>
            Hashtable to preserve Node's original colors (colors can be set on the TreeView, or individual nodes)
            (GKM)
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.tnNodeToStartEditOn">
            <summary>
            Keeps track of node that has to be pu in edit mode.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.blnWasDoubleClick">
            <summary>
            Remembers whether mouse click on a node was single or double click.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.tnMostRecentSelectedNode">
            <summary>
            Keeps track of most recent selected node.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.tnSelectionMirrorPoint">
            <summary>
            Keeps track of the selection mirror point; this is the last selected node without SHIFT key pressed.
            It is used as the mirror node during SHIFT selection.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.intMouseClicks">
            <summary>
            Keeps track of the number of mouse clicks.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.selectionMode">
            <summary>
            Selection mode.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.selectionBackColor">
            <summary>
            Backcolor for selected nodes.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.blnNodeProcessedOnMouseDown">
            <summary>
            Keeps track whether a node click has been handled by the mouse down event. This is almost always the
            case, except when a selected node has been clicked again. Then, it will not be handled in the mouse
            down event because we might want to drag the node and if that's the case, node should not go in edit 
            mode.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.tnToFlash">
            <summary>
            Holds node that needs to be flashed.
            </summary>
        </member>
        <member name="F:OgamaControls.MultiselectTreeView.tnKeysStartNode">
            <summary>
            Keeps track of the first selected node when selection has begun with the keyboard.
            </summary>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.SelectedNodes_TreeNodeAdded(System.Windows.Forms.TreeNode)">
            <summary>
            Occurs when a tree node is added to the SelectedNodes collection.
            </summary>
            <param name="tn">Tree node that was added.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.SelectedNodes_TreeNodeInserted(System.Windows.Forms.TreeNode)">
            <summary>
            Occurs when a tree node is inserted to the SelectedNodes collection.
            </summary>
            <param name="tn">tree node that was inserted.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.SelectedNodes_TreeNodeRemoved(System.Windows.Forms.TreeNode)">
            <summary>
            Occurs when a tree node is removed from the SelectedNodes collection.
            </summary>
            <param name="tn">Tree node that was removed.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.SelectedNodes_SelectedNodesCleared(System.Object,System.EventArgs)">
            <summary>
            Occurs when the SelectedNodes collection was cleared.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.UnselectAllNodes(System.Windows.Forms.TreeViewAction)">
            <summary>
            Unselects all selected nodes.
            </summary>
            <param name="tva">Specifies the action that caused the selection change.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.UnselectAllNodesNotBelongingToLevel(System.Int32,System.Windows.Forms.TreeViewAction)">
            <summary>
            Unselects all selected nodes that don't belong to the specified level.
            </summary>
            <param name="level">Node level.</param>
            <param name="tva">Specifies the action that caused the selection change.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.UnselectAllNodesNotBelongingDirectlyToParent(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeViewAction)">
            <summary>
            Unselects all selected nodes that don't belong directly to the specified parent.
            </summary>
            <param name="parent">Parent node.</param>
            <param name="tva">Specifies the action that caused the selection change.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.UnselectAllNodesNotBelongingToParent(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeViewAction)">
            <summary>
            Unselects all selected nodes that don't belong directly or indirectly to the specified parent.
            </summary>
            <param name="parent">Parent node.</param>
            <param name="tva">Specifies the action that caused the selection change.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.UnselectAllNodesExceptNode(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeViewAction)">
            <summary>
            Unselects all selected nodes, except for the specified node which should not be touched.
            </summary>
            <param name="nodeKeepSelected">Node not to touch.</param>
            <param name="tva">Specifies the action that caused the selection change.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            occurs when a node is about to be selected.
            </summary>
            <param name="e">TreeViewCancelEventArgs.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.IsNodeSelected(System.Windows.Forms.TreeNode)">
            <summary>
            Determines whether the specified node is selected or not.
            </summary>
            <param name="tn">Node to check.</param>
            <returns>True if specified node is selected, false if not.</returns>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.SelectNode(System.Windows.Forms.TreeNode,System.Boolean,System.Windows.Forms.TreeViewAction)">
            <summary>
            (Un)selects the specified node.
            </summary>
            <param name="tn">Node to (un)select.</param>
            <param name="select">True to select node, false to unselect node.</param>
            <param name="tva">Specifies the action that caused the selection change.</param>
            <returns>True if node was selected, false if not.</returns>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.SelectNodesInsideRange(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode,System.Windows.Forms.TreeViewAction)">
            <summary>
            Selects nodes within the specified range.
            </summary>
            <param name="startNode">Start node.</param>
            <param name="endNode">End Node.</param>
            <param name="tva">Specifies the action that caused the selection change.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.UnselectNodesOutsideRange(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode,System.Windows.Forms.TreeViewAction)">
            <summary>
            Unselects nodes outside the specified range.
            </summary>
            <param name="startNode">Start node.</param>
            <param name="endNode">End node.</param>
            <param name="tva">Specifies the action that caused the selection change.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.UnselectNodesRecursively(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeViewAction)">
            <summary>
            Recursively unselect node.
            </summary>
            <param name="tn">Node to recursively unselect.</param>
            <param name="tva">Specifies the action that caused the selection change.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.IsClickOnNode(System.Windows.Forms.TreeNode,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Determines whether a mouse click was inside the node bounds or outside the node bounds..
            </summary>
            <param name="tn">TreeNode to check.</param>
            <param name="e">MouseEventArgs.</param>
            <returns>True is mouse was clicked inside the node bounds, false if it was clicked ouside the node bounds.</returns>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.GetNodeLevel(System.Windows.Forms.TreeNode)">
            <summary>
            Gets level of specified node.
            </summary>
            <param name="node">Node.</param>
            <returns>Level of node.</returns>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.IsChildOf(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            Determines whether the specified node is a child (indirect or direct) of the specified parent.
            </summary>
            <param name="child">Node to check.</param>
            <param name="parent">Parent node.</param>
            <returns>True if specified node is a direct or indirect child of parent node, false if not.</returns>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.GetRootParent(System.Windows.Forms.TreeNode)">
            <summary>
            Gets root parent of specified node.
            </summary>
            <param name="child">Node.</param>
            <returns>Root parent of specified node.</returns>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.GetNumberOfVisibleNodes">
            <summary>
            Gets number of visible nodes.
            </summary>
            <returns>Number of visible nodes.</returns>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.GetLastVisibleNode">
            <summary>
            Gets last visible node.
            </summary>
            <returns>Last visible node.</returns>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.GetNextTreeNode(System.Windows.Forms.TreeNode,System.Boolean,System.Int32)">
            <summary>
            Gets next tree node(s), starting from the specified node and direction.
            </summary>
            <param name="start">Node to start from.</param>
            <param name="down">True to go down, false to go up.</param>
            <param name="intNumber">Number of nodes to go down or up.</param>
            <returns>Next node.</returns>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.SetFocusToNode(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            makes focus rectangle visible or hides it.
            </summary>
            <param name="tn">Node to make focus rectangle (in)visible for.</param>
            <param name="visible">True to make focus rectangle visible, false to hide it.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when mouse button is up after a click.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when mouse is down.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.FlashNode">
            <summary>
            Flashes node.
            </summary>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.StartEdit">
            <summary>
            Starts edit on a node.
            </summary>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.ProcessNodeRange(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode,System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Keys,System.Windows.Forms.TreeViewAction,System.Boolean)">
            <summary>
            Processes a node range.
            </summary>
            <param name="startNode">Start node of range.</param>
            <param name="endNode">End node of range.</param>
            <param name="e">MouseEventArgs.</param>
            <param name="keys">Keys.</param>
            <param name="tva">TreeViewAction.</param>
            <param name="allowStartEdit">True if node can go to edit mode, false if not.</param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)">
            <summary>
            Occurs before node goes into edit mode.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            occurs when a key is down.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Occurs after a node is collapsed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.MultiselectTreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            Occurs when an item is being dragged.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:OgamaControls.MultiselectTreeView.AfterDeselect">
            <summary>
            
            </summary>
        </member>
        <member name="E:OgamaControls.MultiselectTreeView.BeforeDeselect">
            <summary>
            
            </summary>
        </member>
        <member name="E:OgamaControls.MultiselectTreeView.SelectionsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.MultiselectTreeView.SelectedNode">
            <summary>
            This property is for internal use only. Use SelectedNodes instead.
            </summary>
        </member>
        <member name="P:OgamaControls.MultiselectTreeView.SelectionMode">
            <summary>
            Gets/sets selection mode.
            </summary>
        </member>
        <member name="P:OgamaControls.MultiselectTreeView.SelectionBackColor">
            <summary>
            Gets/sets backcolor for selected nodes.
            </summary>
        </member>
        <member name="P:OgamaControls.MultiselectTreeView.SelectedNodes">
            <summary>
            Gets selected nodes.
            </summary>
        </member>
        <member name="T:OgamaControls.NodesCollection">
            <summary>
            Collection of selected nodes.
            </summary>
        </member>
        <member name="M:OgamaControls.NodesCollection.Add(System.Windows.Forms.TreeNode)">
            <summary>
            Adds a tree node to the collection.
            </summary>
            <param name="treeNode">Tree node to add.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:OgamaControls.NodesCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)">
            <summary>
            Inserts a tree node at specified index.
            </summary>
            <param name="index">The position into which the new element has to be inserted.</param>
            <param name="treeNode">Tree node to insert.</param>
        </member>
        <member name="M:OgamaControls.NodesCollection.Remove(System.Windows.Forms.TreeNode)">
            <summary>
            Removed a tree node from the collection.
            </summary>
            <param name="treeNode">Tree node to remove.</param>
        </member>
        <member name="M:OgamaControls.NodesCollection.Clear">
            <summary>
            Occurs when collection is being cleared.
            </summary>
        </member>
        <member name="M:OgamaControls.NodesCollection.Sort">
            <summary>
            Sorts the TreeNodes in the collection by their TreeNode.Index
            </summary>
        </member>
        <member name="E:OgamaControls.NodesCollection.TreeNodeAdded">
            <summary>
            Event fired when a tree node has been added to the collection.
            </summary>
        </member>
        <member name="E:OgamaControls.NodesCollection.TreeNodeRemoved">
            <summary>
            Event fired when a tree node has been removed to the collection.
            </summary>
        </member>
        <member name="E:OgamaControls.NodesCollection.TreeNodeInserted">
            <summary>
            Event fired when a tree node has been inserted to the collection.
            </summary>
        </member>
        <member name="E:OgamaControls.NodesCollection.SelectedNodesCleared">
            <summary>
            Event fired the collection has been cleared.
            </summary>
        </member>
        <member name="T:OgamaControls.TreeNodeComparer">
            <summary>
            Class. Implements the manual sorting of treenodes by index.
            </summary>
        </member>
        <member name="M:OgamaControls.TreeNodeComparer.Compare(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            Compares two objects and returns a value indicating 
            whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first <see cref="T:System.Object"/> to compare. </param>
            <param name="y">The second <see cref="T:System.Object"/> to compare. </param>
            <returns>"Less than zero" if x is less than y. 
            "Zero" if x equals y. and "Greater than zero", if
            x is greater than y.</returns>
        </member>
        <member name="T:OgamaControls.DataGridViewQuickComboBoxCell">
            <summary>
            Defines a <strong>DataGridViewQuickComboBoxCell</strong> cell type for the 
            <see cref="T:System.Windows.Forms.DataGridView"/> control
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewQuickComboBoxCell.#ctor">
            <summary>
            Constructor for the <strong>DataGridViewColorButton</strong> cell type
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewQuickComboBoxCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>
            Override OnMouseClick in a class derived from DataGridViewCell to 
            enter edit mode when the user clicks the cell. 
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs"/>
            with the event data.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewQuickComboBoxCell.ToString">
            <summary>
            Returns a string that describes the current object. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current object. </returns>
        </member>
        <member name="T:OgamaControls.DataGridViewQuickComboBoxColumn">
            <summary>
            Custom column type dedicated to the <see cref="T:OgamaControls.DataGridViewQuickComboBoxCell"/> cell type.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewQuickComboBoxColumn.#ctor">
            <summary>
            Constructor for the DataGridViewQuickComboBoxColumn class.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewQuickComboBoxColumn.ToString">
            <summary>
            Returns a standard compact string representation of the column.
            </summary>
            <returns>A <see cref="T:System.String"/> with the compact string representation of the column.</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewQuickComboBoxColumn.CellTemplate">
            <summary>
            Represents the implicit cell that gets cloned when adding rows to the grid.
            Gets or sets the template used to create new cells. 
            </summary>
            <value>A <see cref="T:System.Windows.Forms.DataGridViewCell"/> that all other cells in the column are modeled after. 
            The default is a null reference (Nothing in Visual Basic). </value>
        </member>
        <member name="P:OgamaControls.DataGridViewQuickComboBoxColumn.DataGridViewQuickComboBoxCellTemplate">
            <summary>
            Small utility function that returns the template cell as a <see cref="T:OgamaControls.DataGridViewColorButtonCell"/>
            </summary>
            <value>A <see cref="T:OgamaControls.DataGridViewColorButtonCell"/> template.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewQuickComboBoxColumn.DataSource">
            <summary>
            Replicates the <see cref="P:OgamaControls.DataGridViewQuickComboBoxColumn.DataSource"/> property of the <see cref="T:OgamaControls.DataGridViewQuickComboBoxCell"/> cell type.
            Gets or sets the datasource for all combo box cells in the column.
            </summary>
            <value>The <see cref="T:System.Object"/> with the data source for the cells</value>
        </member>
        <member name="P:OgamaControls.DataGridViewQuickComboBoxColumn.DisplayMember">
            <summary>
            Replicates the <see cref="P:OgamaControls.DataGridViewQuickComboBoxColumn.DisplayMember"/> property of the <see cref="T:OgamaControls.DataGridViewQuickComboBoxCell"/> cell type.
            Gets or sets the DisplayMember for all combo box cells in the column.
            </summary>
            <value>The <see cref="T:System.Object"/> with the DisplayMember for the cells</value>
        </member>
        <member name="P:OgamaControls.DataGridViewQuickComboBoxColumn.ValueMember">
            <summary>
            Replicates the <see cref="P:OgamaControls.DataGridViewQuickComboBoxColumn.ValueMember"/> property of the <see cref="T:OgamaControls.DataGridViewQuickComboBoxCell"/> cell type.
            Gets or sets the ValueMember for all combo box cells in the column.
            </summary>
            <value>The <see cref="T:System.Object"/> with the ValueMember for the cells</value>
        </member>
        <member name="T:OgamaControls.DataGridViewWithBackground">
            <summary>
            This class inherits <see cref="T:System.Windows.Forms.DataGridView"/> and extends it
            with the possibility to show an <see cref="T:System.Drawing.Image"/> as background
            behind the cells and on the surface.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewWithBackground.backgroundImage">
            <summary>
            Saves the background image for the data grid view.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewWithBackground.#ctor">
            <summary>
            Initializes a new instance of the DataGridViewWithBackground class.
            Triggers double buffering and redraw on resize.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewWithBackground.PaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Overridden <see cref="M:System.Windows.Forms.DataGridView.PaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)"/>.
            Paints the background of the DataGridView with the background image.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> used to paint the background.</param>
            <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle"/> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView"/> that needs to be painted.</param>
            <param name="gridBounds">A <see cref="T:System.Drawing.Rectangle"/> that represents the area in which cells are drawn.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewWithBackground.OnRowPrePaint(System.Windows.Forms.DataGridViewRowPrePaintEventArgs)">
            <summary>
            Overridden <see cref="M:System.Windows.Forms.DataGridView.OnRowPrePaint(System.Windows.Forms.DataGridViewRowPrePaintEventArgs)"/>.
            Is called before the row is painted.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewRowPrePaintEventArgs"/> with the event data.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewWithBackground.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>
            Overridden <see cref="M:System.Windows.Forms.DataGridView.OnCellPainting(System.Windows.Forms.DataGridViewCellPaintingEventArgs)"/>.
            Occurs when a cell needs to be drawn. 
            Performs custom background drawing for data cells.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellPaintingEventArgs"/> with the event data.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewWithBackground.DrawCellBackColor(System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>
            This method draws data cells with semitransparent background.
            Selected cells are drawn by default.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellPaintingEventArgs"/> with the event data.</param>
        </member>
        <member name="P:OgamaControls.DataGridViewWithBackground.BackgroundImage">
            <summary>
            Overriden. To enable public setting of a background image property
            which itself is inherited from <see cref="T:System.Windows.Forms.Control"/> but not
            realized in default implementation.
            </summary>
        </member>
        <member name="T:OgamaControls.TriggerControl">
            <summary>
            Inherits <see cref="T:System.Windows.Forms.UserControl"/>. Is to customize a trigger signal
            </summary>
        </member>
        <member name="M:OgamaControls.TriggerControl.#ctor">
            <summary>
            Initializes a new instance of the TriggerControl class.	
            Fills combo box with valid entries.
            </summary>
        </member>
        <member name="F:OgamaControls.TriggerControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.TriggerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.TriggerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OgamaControls.TriggerControl.TriggerSignal">
            <summary>
            Gets or sets the <see cref="T:VectorGraphics.Tools.Trigger.Trigger"/> constructed in this control.
            </summary>
        </member>
        <member name="T:OgamaControls.Media.AVCallback">
            <summary>
            Class used by both audio and video callback
            </summary>
        </member>
        <member name="F:OgamaControls.Media.AVCallback.m_pCallback">
            <summary>
            Client callback routine
            </summary>
        </member>
        <member name="M:OgamaControls.Media.AVCallback.#ctor(OgamaControls.Media.MediaGroup,OgamaControls.Media.IDESCombineCB,DirectShowLib.IMediaEventSink,DirectShowLib.EventCode)">
            <summary>
            
            </summary>
            <param name="pGroup">Timeline group info</param>
            <param name="pCallback">Client callback</param>
            <param name="pEventSink">Event sync to call on file complete</param>
            <param name="ec">Event code to send on file completion</param>
        </member>
        <member name="T:OgamaControls.Media.DESCombine">
            <summary>
            Takes a combination of video or audio files of various formats and stitches them together 
            sequentially.  The result can be output to one of several formats including a video window, 
            or an AVI file.
            </summary>
            <remarks>The normal sequence when using this class would be:
            <list type="number">
            <item>Call the constructor</item>
            <item>Call the Add*File methods to specify the video/audio files to combine</item>
            <item>Call RenderTo* to specify where to render the output</item>
            <item>Call StartRendering to begin the rendering</item>
            </list>
            <para></para>
            <para>
            When calling the RenderTo* methods, a callback routine can be registered so that each audio or video
            frame will be passed to the CB routine.</para>
            </remarks>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.MILLISECONDS">
            <summary>
            Number of MilliSeconds in a second.
            </summary>
            <remarks>
            This constant may be useful for calculations
            </remarks>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.NANOSECONDS">
            <summary>
            Number of NanoSeconds in a second.
            </summary>
            <remarks>
            This constant may be useful for calculations
            </remarks>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.UNITS">
            <summary>
            Number of 100NS in a second.
            </summary>
            <remarks>
            To convert from seconds to 100NS 
            units (used by most DES function), multiply the seconds by UNITS.
            </remarks>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.EC_VideoFileComplete">
            <summary>
            Event code indicating a video file has finished being processed
            </summary>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.EC_AudioFileComplete">
            <summary>
            Event code indicating an audio file has finished being processed
            </summary>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.m_Video">
            <summary>
            Status of the video timeline
            </summary>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.m_Audio">
            <summary>
            Status of the audio timeline
            </summary>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.m_pTimeline">
            <summary>
            Pointer to the timeline containing the audio and video tracks
            </summary>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.m_pGraph">
            <summary>
            IGraphBuilder object for the timeline
            </summary>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.m_pControl">
            <summary>
            Media control interface from m_pGraph
            </summary>
        </member>
        <member name="F:OgamaControls.Media.DESCombine.m_pRenderEngine">
            <summary>
            The engine to process the timeline (can't be released
            until the graph processing is complete)
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.#ctor(System.Double,System.Int16,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Construct the class
            </summary>
            <remarks>
            The input files do not need to have the same height/width/fps.  DES will
            automatically convert them all to the values specified by the constructor.
            </remarks>
            <param name="FPS">Frames per second (commonly 15 or 30)</param>
            <param name="BitCount">Color depth: 16, 24 or 32</param>
            <param name="Width">Frame width (commonly 320, 640, etc)</param>
            <param name="Height">Frame height (commonly 240, 480, etc)</param>
            <param name="audio">support only audio files</param>
            <param name="video">support only video files</param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.Finalize">
            <exclude></exclude>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.AddAVFile(System.String,System.Int64,System.Int64)">
            <summary>
            Add a file with both video and audio to the timeline.
            </summary>
            <remarks>
            If a file contains both audio and video, this method can be used
            to add the file to both groups at the same time.
            </remarks>
            <para>Video files can be of different 
            lengths, frame sizes, color depths, aspect ratios, frame rates, etc.  DES 
            converts them all to the values specified in the constructor.</para>
            
            <param name="sFileName">A/V file path+name</param>
            <param name="lStart">Start position within the file specified in 100ns units</param>
            <param name="lStop">End position within the file specified in 100ns units 
            or -1 to add entire file</param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.AddVideoFile(System.String,System.Int64,System.Int64)">
            <summary>
            Add the video portion of a file to the timeline.
            </summary>
            <remarks>
            If a file contains both audio and video, this method will only add the video portion.
            </remarks>
            <para>Video files can be of different 
            lengths, frame sizes, color depths, aspect ratios, frame rates, etc.  DES 
            converts them all to the values specified in the constructor.</para>
            
            <param name="sFileName">Video file path+name</param>
            <param name="lStart">Start position within the file specified in 100ns units</param>
            <param name="lStop">End position within the file specified in 100ns units 
            or -1 to add entire file</param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.AddAudioFile(System.String,System.Int64,System.Int64)">
            <summary>
            Add the audio portion of a file to the timeline.
            </summary>
            <remarks>
            If a file contains both audio and video, this method will only add the audio portion.
            </remarks>
            <param name="sFileName">Audio file path+name</param>
            <param name="lStart">Start position within the file specified in 100ns units</param>
            <param name="lStop">End position within the file specified in 100ns units 
            or -1 to go to the end of the file</param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.RemoveAudioFiles">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.AddAudioFile(System.String,System.Int64)">
            <summary>
            Add the audio portion of a file to the timeline.
            </summary>
            <remarks>
            If a file contains both audio and video, this method will only add the audio portion.
            </remarks>
            <param name="sFileName">Audio file path+name</param>
            <param name="lStart">Start position within the file specified in 100ns units</param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.RenderAudioToOutput(OgamaControls.Media.IDESCombineCB)">
            <summary>
            
            </summary>
            <param name="pAudioCallback"></param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.RenderAudioToFile(OgamaControls.Media.IDESCombineCB)">
            <summary>
            
            </summary>
            <param name="pAudioCallback"></param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.RenderToWindow(System.IntPtr,OgamaControls.Media.IDESCombineCB,OgamaControls.Media.IDESCombineCB,System.Boolean,System.Boolean)">
            <summary>
            Configure the graph to output the results to a video window.
            </summary>
            <remarks>
            The callback routines are invoked once for each sample.  This allows for additional processing to
            be performed on the video or audio buffers.
            </remarks>
            <param name="hWnd">Window handle to render to, or IntPtr.Zero to render to its own window</param>
            <param name="pVideoCallback">Callback routine to be called for each video frame or null for no callback</param>
            <param name="pAudioCallback">Callback routine to be called for each audio frame or null for no callback</param>
            <param name="video">Render only video</param>
            <param name="audio">Render only audio</param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.RenderToAVI(System.String,DirectShowLib.IBaseFilter,DirectShowLib.IBaseFilter,OgamaControls.Media.IDESCombineCB,OgamaControls.Media.IDESCombineCB)">
            <summary>
            Configure the graph to output the results to an AVI file.
            </summary>
            <param name="sOutputFile">File name for output (must not be null)</param>
            <param name="ibfVideoCompressor">IBaseFilter of a video compressor to use (or null for none).  
            Note that <b><i>no</i></b> configuration of this compressor is done by this method.  It merely adds it
            to the graph in the appropriate place.  Also, the pointer is not invalidated, so any configuration
            of the compressor that needs to be done after being added to the graph can still be done.</param>
            <param name="ibfAudioCompressor">IBaseFilter of an audio compressor to use (or null for none).
            Note that <b><i>no</i></b> configuration of this compressor is done by this method.  It merely adds it
            to the graph in the appropriate place.  Also, the pointer is not invalidated, so any configuration
            of the compressor that needs to be done after being added to the graph can still be done.</param>
            <param name="pVideoCallback">Callback routine to be called for each video frame or null for no callback</param>
            <param name="pAudioCallback">Callback routine to be called for each audio frame or null for no callback</param>
            <remarks>
            The callback routines are invoked once for each sample.  This allows for additional processing to
            be performed on the video or audio buffers.
            </remarks>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.StartRendering">
            <summary>
            Begins rendering and returns immediately.
            </summary>
            <remarks>
            Final status is sent as a <see cref="E:OgamaControls.Media.DESCombine.Completed"/> event.
            </remarks>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.PauseRendering">
            <summary>
            Pauses / unpauses clip according to state.
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.StopRendering">
            <summary>
            This method stops a currently running movie.
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.StopWhenReady">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.Seek(System.Nullable{System.Int64})">
            <summary>
            This method seeks the movie to the given time position.
            The time has to be in units of the <see cref="T:DirectShowLib.IReferenceClock"/>.
            By default that are 100-nanosecond units.
            </summary>
            <param name="timeToStart">An <see cref="T:System.Int64"/> with the absolute start time to seek, 
            or null if the start time should not be set</param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.Cancel">
            <summary>
            Used to signal that the graph should be cancelled.
            </summary>
            <remarks>
            Only has meaning if called after <see cref="M:OgamaControls.Media.DESCombine.StartRendering"/>.
            </remarks>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.GetXML">
            <summary>
            Returns an XML description of the capture graph (as seen by DES).
            </summary>
            <remarks>
            This method can only be called after one
            of the render functions has been called.  Might be useful for debugging.  It is also possible (even easy) 
            to build the DES part of a graph from an XML file, however that functionality has not been implemented
            in this version of the library.
            </remarks>
            <returns>string containing XML</returns>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.ChangeState(OgamaControls.Media.DESCombine.ClassState)">
            <summary>
            Helps deal with potential conflicts between the eventing thread
            and client calls to Cancel()
            </summary>
            <param name="newState">State to change to</param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.EventWait">
            <summary>
            Called on a new thread to process events from the graph.  The thread
            exits when the graph finishes.  Cancelling is done here.
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.GetVideoMediaType(System.Int16,System.Int32,System.Int32)">
            <summary>
            Create a video media type from a few parameters
            </summary>
            <param name="BitCount">Bits per pixel (16, 24, 32)</param>
            <param name="Width">Video width</param>
            <param name="Height">Video height</param>
            <returns>The constructed AMMediaType</returns>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.GetAudioMediaType">
            <summary>
            Create an audio media type
            </summary>
            <returns>The constructed media type</returns>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.RenderCommon">
            <summary>
            Called from RenderTo* routines to perform common initialization
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.IsVideo(DirectShowLib.IPin)">
            <summary>
            Determine whether a specified pin is audio or video
            </summary>
            <param name="pPin">Pin to check</param>
            <returns>True if pin is video</returns>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.RenderWindowHelper(DirectShowLib.ICaptureGraphBuilder2,OgamaControls.Media.AVCallback,System.String,DirectShowLib.IPin,DirectShowLib.IBaseFilter)">
            <summary>
            Called from RenderWindow to add the renderer to the graph, create a sample grabber, add it 
            to the graph and connect it all up
            </summary>
            <param name="icgb">ICaptureGraphBuilder2 to use</param>
            <param name="pCallback">ICaptureGraphBuilder2 to use</param>
            <param name="sType">string to use in creating filter graph object descriptions</param>
            <param name="pPin">Pin to connect from</param>
            <param name="ibfRenderer">Renderer to add</param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.RenderHelper(DirectShowLib.ICaptureGraphBuilder2,OgamaControls.Media.AVCallback,System.String,DirectShowLib.IPin,DirectShowLib.IBaseFilter,DirectShowLib.IBaseFilter)">
            <summary>
            Common routine used by RenderTo*  
            </summary>
            <param name="icgb">ICaptureGraphBuilder2 to use</param>
            <param name="pCallback">Callback to use (or null)</param>
            <param name="sType">string to use in creating filter graph object descriptions</param>
            <param name="pPin">Pin to connect from</param>
            <param name="ibfCompressor">Compressor to use, or null for none</param>
            <param name="pOutput">Endpoint (renderer or file writer) to connect to</param>
        </member>
        <member name="M:OgamaControls.Media.DESCombine.Dispose">
            <summary>
            Release resources used by the class.
            </summary>
            <remarks>May fire events, so do not call from Form.Dispose().</remarks>
        </member>
        <member name="P:OgamaControls.Media.DESCombine.MediaLength">
            <summary>
            Returns the length of the timeline in <see cref="F:OgamaControls.Media.DESCombine.UNITS"/>.
            </summary>
            <remarks>
            This will return the longer of the video time line or the audio time line.
            </remarks>
        </member>
        <member name="P:OgamaControls.Media.DESCombine.VideoLength">
            <summary>
            Returns the length of the video group in <see cref="F:OgamaControls.Media.DESCombine.UNITS"/>.
            </summary>
            <remarks>
            This will return the length of the video group.
            </remarks>
        </member>
        <member name="P:OgamaControls.Media.DESCombine.AudioLength">
            <summary>
            Returns the length of the audio group in <see cref="F:OgamaControls.Media.DESCombine.UNITS"/>.
            </summary>
            <remarks>
            This will return the length of the audio group.
            </remarks>
        </member>
        <member name="P:OgamaControls.Media.DESCombine.PlaybackRate">
            <summary>
            Sets the current playback rate of the timelime.
            </summary>
            <value>A <see cref="T:System.Double"/> with the playback rate. Must not be zero.</value>
        </member>
        <member name="E:OgamaControls.Media.DESCombine.Completed">
            <summary>
            Called when the graph has finished running.
            </summary>
            <remarks>
            The <see cref="T:OgamaControls.DESCompletedArgs"/>
            contains the result of running the graph (Completed, UserAborted,
            out of disk space, etc.)
            This code will be a member of DirectShowLib.EventCode.  Typically it 
            will be EventCode.Complete, EventCode.ErrorAbort or EventCode.UserAbort.
            </remarks>
        </member>
        <member name="E:OgamaControls.Media.DESCombine.ThreadFinished">
            <summary>
            Called when the graph has finished running.
            </summary>
            <remarks>
            The <see cref="T:OgamaControls.DESCompletedArgs"/>
            contains the result of running the graph (Completed, UserAborted,
            out of disk space, etc.)
            This code will be a member of DirectShowLib.EventCode.  Typically it 
            will be EventCode.Complete, EventCode.ErrorAbort or EventCode.UserAbort.
            </remarks>
        </member>
        <member name="E:OgamaControls.Media.DESCombine.FileCompleted">
            <summary>
            Called when a file has finished processing.
            </summary>
            <remarks>
            The <see cref="T:OgamaControls.FileCompletedArgs"/> contains the file name and type.
            Note that if RenderToWindow() is chosen, dropped frames can result in missed notifications.  This
            should not affect other RenderTo* methods.
            </remarks>
        </member>
        <member name="T:OgamaControls.Media.DESCombine.ClassState">
            <summary>
            Used to indicate the state of the class
            </summary>
        </member>
        <member name="T:OgamaControls.Media.DESAudioPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESAudioPlayer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESAudioPlayer.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESAudioPlayer.AddSoundAtPosition(System.String,System.Int64)">
            <summary>
            This method adds the given sound file to the timeline at the
            position given in millisecónds in the second parameter.
            </summary>
            <param name="filename"></param>
            <param name="position">The initial time in milliseconds that this sound should be started.</param>
        </member>
        <member name="M:OgamaControls.Media.DESAudioPlayer.AddSoundAtRange(System.String,System.Int64,System.Int64)">
            <summary>
            This method adds the given sound file to the timeline at the
            position given in millisecónds in the second parameter.
            </summary>
            <param name="filename"></param>
            <param name="startPosition">The initial time in milliseconds that this sound should be started.</param>
            <param name="endPosition">The time in milliseconds that this sound should be stopped.</param>
        </member>
        <member name="M:OgamaControls.Media.DESAudioPlayer.Play">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESAudioPlayer.Seek(System.Int64)">
            <summary>
            
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:OgamaControls.Media.DESAudioPlayer.Pause">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESAudioPlayer.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESAudioPlayer.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.DESAudioPlayer.Close">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.Media.DESAudioPlayer.TimelineLength">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="P:OgamaControls.Media.DESAudioPlayer.PlaybackRate">
            <summary>
            Sets the current playback rate of the audio player.
            </summary>
            <value>A <see cref="T:System.Double"/> with the playback rate. Must not be zero.</value>
        </member>
        <member name="T:OgamaControls.Media.IDESCombineCB">
            <summary>
            A callback interface that can be implemented by callers to DESCombine 
            who wish to perform processing on video or audio frames.
            </summary>
            <remarks>
            Classes which implement this interfaces can be passed to <see cref="M:OgamaControls.Media.DESCombine.RenderToWindow(System.IntPtr,OgamaControls.Media.IDESCombineCB,OgamaControls.Media.IDESCombineCB,System.Boolean,System.Boolean)"/>
            or <see cref="M:OgamaControls.Media.DESCombine.RenderToAVI(System.String,DirectShowLib.IBaseFilter,DirectShowLib.IBaseFilter,OgamaControls.Media.IDESCombineCB,OgamaControls.Media.IDESCombineCB)"/>.  Each audio or video frame that is processed by DES
            will be passed to this callback which can perform additional processing.
            </remarks>
        </member>
        <member name="M:OgamaControls.Media.IDESCombineCB.BufferCB(System.String,System.Double,System.IntPtr,System.Int32)">
            <summary>
            Callback routine - called once for each audio or video frame
            </summary>
            <remarks>
            The buffer can be examined or modified.
            </remarks>
            <param name="sFileName">Filename currently being processed</param>
            <param name="SampleTime">Time stamp in seconds</param>
            <param name="pBuffer">Pointer to the buffer</param>
            <param name="BufferLen">Length of the buffer</param>
            <returns>Return S_OK if successful, or an HRESULT error code otherwise.  This value is sent as 
            the return value to ISampleGrabberCB::BufferCB</returns>
        </member>
        <member name="T:OgamaControls.Media.MediaFile">
            <summary>
            This class wraps a file to be used by DESCombine.  In addition to
            holding the name, it also retrieves the media duration.
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaFile.#ctor(System.String)">
            <summary>
            Constructor takes a file path+name
            </summary>
            <param name="s">File path+name</param>
        </member>
        <member name="M:OgamaControls.Media.MediaFile.GetLength">
            <summary>
            Return the length of the media file
            </summary>
            <returns>Length in 100NS</returns>
        </member>
        <member name="P:OgamaControls.Media.MediaFile.Length">
            <summary>
            Return or set the length of the media file.  When setting the
            value, you can set it from zero to the duration of the media file.
            If the duration of the media file is zero (jpg, bmp, etc), you can
            set the duration to any time.  Useful for intro, credits, etc.
            </summary>
        </member>
        <member name="P:OgamaControls.Media.MediaFile.FileName">
            <summary>
            Return the file name
            </summary>
        </member>
        <member name="T:OgamaControls.Media.MediaGroup">
            <summary>
            Class containing information about the timeline groups (one
            for audio, one for video)
            </summary>
        </member>
        <member name="F:OgamaControls.Media.MediaGroup.m_Length">
            <summary>
            Used to store the current length
            </summary>
        </member>
        <member name="F:OgamaControls.Media.MediaGroup.m_Files">
            <summary>
            An array holding the names and durations of the files to be processed
            </summary>
        </member>
        <member name="F:OgamaControls.Media.MediaGroup.m_FPS">
            <summary>
            FPS of the group
            </summary>
        </member>
        <member name="F:OgamaControls.Media.MediaGroup.m_pTimeline">
            <summary>
            Timeline to add items to
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaGroup.#ctor(DirectShowLib.AMMediaType,DirectShowLib.DES.IAMTimeline,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="mType">Media type of the new group</param>
            <param name="pTimeline">Timeline to use for the group</param>
            <param name="fps">FPS for the group</param>
        </member>
        <member name="M:OgamaControls.Media.MediaGroup.File(System.Int32)">
            <summary>
            Returns the indexed file
            </summary>
            <param name="x">Zero based index into list of files in group</param>
            <returns>The specified MediaFile</returns>
        </member>
        <member name="M:OgamaControls.Media.MediaGroup.RemoveTracks">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaGroup.Add(System.String,System.Int64)">
            <summary>
            Add a file to the group
            </summary>
            <param name="sName">File name+path to add</param>
            <param name="lStart">Start point in destination timeline in UNITS</param>
        </member>
        <member name="M:OgamaControls.Media.MediaGroup.Add(System.String,System.Int64,System.Int64)">
            <summary>
            Add a file to the group
            </summary>
            <param name="sName">File name+path to add</param>
            <param name="lStart">Start point in source file in UNITS</param>
            <param name="lEnd">End point in source file in UNITS or -1 to add entire file</param>
        </member>
        <member name="M:OgamaControls.Media.MediaGroup.Dispose">
            <summary>
            Release everything
            </summary>
        </member>
        <member name="P:OgamaControls.Media.MediaGroup.Count">
            <summary>
            The count of files in the group
            </summary>
            <returns>The count</returns>
        </member>
        <member name="P:OgamaControls.Media.MediaGroup.Length">
            <summary>
            Returns the length of the group in <see cref="F:OgamaControls.Media.DESCombine.UNITS"/>.
            </summary>
        </member>
        <member name="T:OgamaControls.Media.StreamKind">
            <summary>
            Describes the kind of media stream
            </summary>
        </member>
        <member name="F:OgamaControls.Media.StreamKind.General">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.StreamKind.Video">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.StreamKind.Audio">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.StreamKind.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.StreamKind.Chapters">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.StreamKind.Image">
            <summary>
            
            </summary>
        </member>
        <member name="T:OgamaControls.Media.InfoKind">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoKind.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoKind.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoKind.Measure">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoKind.Options">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoKind.NameText">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoKind.MeasureText">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoKind.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoKind.HowTo">
            <summary>
            
            </summary>
        </member>
        <member name="T:OgamaControls.Media.InfoOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoOptions.ShowInInform">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoOptions.Support">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoOptions.ShowInSupported">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoOptions.TypeOfValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:OgamaControls.Media.InfoFileOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoFileOptions.FileOption_Nothing">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoFileOptions.FileOption_Recursive">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoFileOptions.FileOption_CloseAll">
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.Media.InfoFileOptions.FileOption_Max">
            <summary>
            
            </summary>
        </member>
        <member name="T:OgamaControls.Media.MediaInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Open(System.String)">
            <summary>
            
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Open_Buffer_Init(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="File_Size"></param>
            <param name="File_Offset"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Open_Buffer_Continue(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="Buffer"></param>
            <param name="Buffer_Size"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Open_Buffer_Continue_GoTo_Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Open_Buffer_Finalize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Inform">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Get(OgamaControls.Media.StreamKind,System.Int32,System.String,OgamaControls.Media.InfoKind,OgamaControls.Media.InfoKind)">
            <summary>
            
            </summary>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <param name="Parameter"></param>
            <param name="KindOfInfo"></param>
            <param name="KindOfSearch"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Get(OgamaControls.Media.StreamKind,System.Int32,System.Int32,OgamaControls.Media.InfoKind)">
            <summary>
            
            </summary>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <param name="Parameter"></param>
            <param name="KindOfInfo"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Option(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Option"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.State_Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Count_Get(OgamaControls.Media.StreamKind,System.Int32)">
            <summary>
            
            </summary>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Get(OgamaControls.Media.StreamKind,System.Int32,System.String,OgamaControls.Media.InfoKind)">
            <summary>
            
            </summary>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <param name="Parameter"></param>
            <param name="KindOfInfo"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Get(OgamaControls.Media.StreamKind,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Get(OgamaControls.Media.StreamKind,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Option(System.String)">
            <summary>
            
            </summary>
            <param name="Option_"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfo.Count_Get(OgamaControls.Media.StreamKind)">
            <summary>
            
            </summary>
            <param name="StreamKind"></param>
            <returns></returns>
        </member>
        <member name="T:OgamaControls.Media.MediaInfoList">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Open(System.String,OgamaControls.Media.InfoFileOptions)">
            <summary>
            
            </summary>
            <param name="FileName"></param>
            <param name="Options"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Close(System.Int32)">
            <summary>
            
            </summary>
            <param name="FilePos"></param>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Inform(System.Int32)">
            <summary>
            
            </summary>
            <param name="FilePos"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Get(System.Int32,OgamaControls.Media.StreamKind,System.Int32,System.String,OgamaControls.Media.InfoKind,OgamaControls.Media.InfoKind)">
            <summary>
            
            </summary>
            <param name="FilePos"></param>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <param name="Parameter"></param>
            <param name="KindOfInfo"></param>
            <param name="KindOfSearch"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Get(System.Int32,OgamaControls.Media.StreamKind,System.Int32,System.Int32,OgamaControls.Media.InfoKind)">
            <summary>
            
            </summary>
            <param name="FilePos"></param>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <param name="Parameter"></param>
            <param name="KindOfInfo"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Option(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Option"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.State_Get">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Count_Get(System.Int32,OgamaControls.Media.StreamKind,System.Int32)">
            <summary>
            
            </summary>
            <param name="FilePos"></param>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Open(System.String)">
            <summary>
            
            </summary>
            <param name="FileName"></param>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Get(System.Int32,OgamaControls.Media.StreamKind,System.Int32,System.String,OgamaControls.Media.InfoKind)">
            <summary>
            
            </summary>
            <param name="FilePos"></param>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <param name="Parameter"></param>
            <param name="KindOfInfo"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Get(System.Int32,OgamaControls.Media.StreamKind,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="FilePos"></param>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Get(System.Int32,OgamaControls.Media.StreamKind,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="FilePos"></param>
            <param name="StreamKind"></param>
            <param name="StreamNumber"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Option(System.String)">
            <summary>
            
            </summary>
            <param name="Option_"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.MediaInfoList.Count_Get(System.Int32,OgamaControls.Media.StreamKind)">
            <summary>
            
            </summary>
            <param name="FilePos"></param>
            <param name="StreamKind"></param>
            <returns></returns>
        </member>
        <member name="T:OgamaControls.Media.EnhancedVideoRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="T:OgamaControls.Media.IEVRFilterConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.IEVRFilterConfig.SetNumberOfStreams(System.Int32)">
            <summary>
            
            </summary>
            <param name="dwMaxStreams"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IEVRFilterConfig.GetNumberOfStreams(System.Int32@)">
            <summary>
            
            </summary>
            <param name="pdwMaxStreams"></param>
        </member>
        <member name="T:OgamaControls.Media.IMFVideoRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoRenderer.InitializeRenderer(System.Object,OgamaControls.Media.IMFVideoPresenter)">
            <summary>
            
            </summary>
            <param name="pVideoMixer"></param>
            <param name="pVideoPresenter"></param>
            <returns></returns>
        </member>
        <member name="T:OgamaControls.Media.IMFClockStateSink">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.IMFClockStateSink.OnClockStart(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="hnsSystemTime"></param>
            <param name="llClockStartOffset"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFClockStateSink.OnClockStop(System.Int64)">
            <summary>
            
            </summary>
            <param name="hnsSystemTime"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFClockStateSink.OnClockPause(System.Int64)">
            <summary>
            
            </summary>
            <param name="hnsSystemTime"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFClockStateSink.OnClockRestart(System.Int64)">
            <summary>
            
            </summary>
            <param name="hnsSystemTime"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFClockStateSink.OnClockSetRate(System.Int64,System.Single)">
            <summary>
            
            </summary>
            <param name="hnsSystemTime"></param>
            <param name="flRate"></param>
            <returns></returns>
        </member>
        <member name="T:OgamaControls.Media.IMFVideoPresenter">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoPresenter.OnClockStart(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="hnsSystemTime"></param>
            <param name="llClockStartOffset"></param>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoPresenter.OnClockStop(System.Int64)">
            <summary>
            
            </summary>
            <param name="hnsSystemTime"></param>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoPresenter.OnClockPause(System.Int64)">
            <summary>
            
            </summary>
            <param name="hnsSystemTime"></param>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoPresenter.OnClockRestart(System.Int64)">
            <summary>
            
            </summary>
            <param name="hnsSystemTime"></param>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoPresenter.OnClockSetRate(System.Int64,System.Single)">
            <summary>
            
            </summary>
            <param name="hnsSystemTime"></param>
            <param name="flRate"></param>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoPresenter.ProcessMessage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoPresenter.GetCurrentMediaType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OgamaControls.Media.IMFVideoDisplayControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.GetNativeVideoSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.GetIdealVideoSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.SetVideoPosition">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.GetVideoPosition">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.SetAspectRatioMode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.GetAspectRatioMode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.SetVideoWindow(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hwndVideo"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.GetVideoWindow(System.IntPtr@)">
            <summary>
            
            </summary>
            <param name="phwndVideo"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.RepaintVideo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.GetCurrentImage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.SetBorderColor(System.Int32)">
            <summary>
            
            </summary>
            <param name="Clr"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.GetBorderColor(System.Int32@)">
            <summary>
            
            </summary>
            <param name="pClr"></param>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.SetRenderingPrefs">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.GetRenderingPrefs">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.SetFullscreen">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.Media.IMFVideoDisplayControl.GetFullscreen">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OgamaControls.AudioControl">
            <summary>
            This <see cref="T:System.Windows.Forms.UserControl"/> can be used to define a <see cref="T:System.Drawing.Pen"/>
            and <see cref="T:System.Drawing.Brush"/> that are visualized in two preview 
            frames. Additionally the user selects, if edge or fill or both should be used.
            </summary>
        </member>
        <member name="F:OgamaControls.AudioControl.audioFile">
            <summary>
            This member saves the <see cref="T:VectorGraphics.Tools.AudioFile"/> that this control is bound to.
            </summary>
        </member>
        <member name="F:OgamaControls.AudioControl.player">
            <summary>
            The preview player for the audio file.
            </summary>
        </member>
        <member name="F:OgamaControls.AudioControl.pathToCopyTo">
            <summary>
            A path where to put the audio file if successfully loaded.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioControl.btnOpenFile_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.AudioControl.btnOpenFile"/>
            Raises a <see cref="T:System.Windows.Forms.OpenFileDialog"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.AudioControl.btnDeleteFile_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.AudioControl.btnDeleteFile"/>
            Empties the filename <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.AudioControl.chbPlaySound_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event handler for the
            <see cref="T:System.Windows.Forms.CheckBox"/> <see cref="F:OgamaControls.AudioControl.chbPlaySound"/>.
            Raises the <see cref="E:OgamaControls.AudioControl.AudioPropertiesChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.AudioControl.chbLoop_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event handler for the
            <see cref="T:System.Windows.Forms.CheckBox"/> <see cref="F:OgamaControls.AudioControl.chbLoop"/>.
            Raises the <see cref="E:OgamaControls.AudioControl.AudioPropertiesChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.AudioControl.rdbOnAppearance_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.RadioButton.CheckedChanged"/> event handler for the
            <see cref="T:System.Windows.Forms.RadioButton"/> <see cref="F:OgamaControls.AudioControl.rdbOnAppearance"/>.
            Raises the <see cref="E:OgamaControls.AudioControl.AudioPropertiesChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.AudioControl.rdbOnClick_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.RadioButton.CheckedChanged"/> event handler for the
            <see cref="T:System.Windows.Forms.RadioButton"/> <see cref="F:OgamaControls.AudioControl.rdbOnAppearance"/>.
            Raises the <see cref="E:OgamaControls.AudioControl.AudioPropertiesChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.AudioControl.btnPreviewPlay_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.AudioControl.btnPreviewPlay"/>
            Tries to play the audio file.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.AudioControl.btnPreviewStop_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.AudioControl.btnPreviewStop"/>
            Empties the filename <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.AudioControl.OnAudioPropertiesChanged(OgamaControls.AudioPropertiesChangedEventArgs)">
            <summary>
            The protected OnAudioPropertiesChanged method raises the event by invoking 
            the delegates
            </summary>
            <param name="e">A <see cref="T:OgamaControls.AudioPropertiesChangedEventArgs"/> with the event arguments</param>
        </member>
        <member name="M:OgamaControls.AudioControl.RaiseEvent">
            <summary>
            This helper method raises the <see cref="E:OgamaControls.AudioControl.AudioPropertiesChanged"/>
            event.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioControl.UpdateUIWithAudioFile">
            <summary>
            This method fills the UI with the current audio file.
            </summary>
        </member>
        <member name="F:OgamaControls.AudioControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.AudioControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.AudioControl.AudioPropertiesChanged">
            <summary>
            This event is fired, whenever the controls content has 
            changed.
            </summary>
        </member>
        <member name="P:OgamaControls.AudioControl.Sound">
            <summary>
            Gets or sets the audio file defined in this control.
            </summary>
            <value>The newly defined audio file.</value>
        </member>
        <member name="P:OgamaControls.AudioControl.ShouldPlay">
            <summary>
            Gets or sets a value indicating wheter the ShouldPlay checkbox
            should be checked or not.
            </summary>
        </member>
        <member name="P:OgamaControls.AudioControl.PathToCopyTo">
            <summary>
            A path where to put the audio file if successfully loaded.
            </summary>
        </member>
        <member name="T:OgamaControls.CursorSelectControl">
            <summary>
            This user control is intended to show a selection dialog for cursor.
            Its <see cref="E:OgamaControls.CursorSelectControl.CursorStyleChanged"/> event notifys listeners.
            </summary>
        </member>
        <member name="F:OgamaControls.CursorSelectControl.DEFAULT_CURSOR_SIZE">
            <summary>
            The default cursor size, used for first initialization.
            </summary>
        </member>
        <member name="F:OgamaControls.CursorSelectControl.DEFAULT_CURSOR_PEN">
            <summary>
            The default cursor pen, used for first initialization.
            </summary>
        </member>
        <member name="F:OgamaControls.CursorSelectControl.DEFAULT_CURSOR_STYLE">
            <summary>
            The default cursor style, used for first initialization.
            Is of type <see cref="T:VectorGraphics.Elements.VGCursor.DrawingCursors"/>
            </summary>
        </member>
        <member name="F:OgamaControls.CursorSelectControl._cursor">
            <summary>
            Stores the current active <see cref="T:VectorGraphics.Elements.VGCursor"/>
            </summary>
        </member>
        <member name="M:OgamaControls.CursorSelectControl.#ctor">
            <summary>
            Constructor. Initializes components.
            </summary>
        </member>
        <member name="M:OgamaControls.CursorSelectControl.CursorSelectControl_Load(System.Object,System.EventArgs)">
            <summary>
            The controls <see cref="E:System.Windows.Forms.UserControl.Load"/> event handler.
            Creates a predefined cursor.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.CursorSelectControl.pnlPreview_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Paint"/> event handler.
            Redraws the current cursor.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> with the graphics object.</param>
        </member>
        <member name="M:OgamaControls.CursorSelectControl.nudCursorSize_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.NumericUpDown.ValueChanged"/> event handler for
            the <see cref="T:System.Windows.Forms.NumericUpDown"/> <see cref="F:OgamaControls.CursorSelectControl.nudCursorSize"/>.
            Updates <see cref="F:OgamaControls.CursorSelectControl._cursor"/> properties and raises <see cref="E:OgamaControls.CursorSelectControl.CursorStyleChanged"/> event.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.CursorSelectControl.cbbCursorType_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event handler for
            the <see cref="T:System.Windows.Forms.ComboBox"/> <see cref="F:OgamaControls.CursorSelectControl.cbbCursorType"/>.
            Updates <see cref="F:OgamaControls.CursorSelectControl._cursor"/> properties and raises <see cref="E:OgamaControls.CursorSelectControl.CursorStyleChanged"/> event.
            </summary>
            <param name="sender">Source of the event</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.CursorSelectControl.OnCursorStyleChanged(VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs)">
            <summary>
            Raises the <see cref="E:OgamaControls.CursorSelectControl.CursorStyleChanged"/> event by invoking the delegates.
            </summary>
            <param name="e"><see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> event arguments</param>.
        </member>
        <member name="F:OgamaControls.CursorSelectControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.CursorSelectControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.CursorSelectControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.CursorSelectControl.CursorStyleChanged">
            <summary>
            The event that is raised when the <see cref="P:OgamaControls.CursorSelectControl.DrawingCursor"/> style has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.CursorSelectControl.DrawingCursor">
            <summary>
            Sets current cursor of the control and updates property fields.
            </summary>
        </member>
        <member name="T:OgamaControls.CursorSelectControl.CursorStyleChangedEventHandler">
            <summary>
            Delegate for CursorStyleChanged event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> with the new cursor shape.</param>
        </member>
        <member name="T:OgamaControls.RangeTrackBar">
            <summary>
            A range slider control with a caret.
            Inherits <see cref="T:System.Windows.Forms.Control"/>.
            Uses the <see cref="T:System.Windows.Forms.TrackBarRenderer"/> to draw the items.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar.TimeFont">
            <summary>
            A static <see cref="T:System.Drawing.Font"/> for the time values.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar.TimeFontBrush">
            <summary>
            A static <see cref="T:System.Drawing.Brush"/> for the font for the time values.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._trackBounds">
            <summary>
            A <see cref="T:System.Drawing.Rectangle"/> with the bounds for the sliders track line.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._leftThumbBounds">
            <summary>
            A <see cref="T:System.Drawing.Rectangle"/> with the bounds for the start time thumb.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._caretThumbBounds">
            <summary>
            A <see cref="T:System.Drawing.Rectangle"/> with the bounds for the caret thumb.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._rightThumbBounds">
            <summary>
            A <see cref="T:System.Drawing.Rectangle"/> with the bounds for the end time thumb.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._leftThumbPosition">
            <summary>
            A <see cref="T:System.Double"/> with the position of the start time in percent of the sliders
            <see cref="P:OgamaControls.RangeTrackBar.Duration"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._caretThumbPosition">
            <summary>
            A <see cref="T:System.Double"/> with the position of the caret time in percent of the sliders
            <see cref="P:OgamaControls.RangeTrackBar.Duration"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._rightThumbPosition">
            <summary>
            A <see cref="T:System.Double"/> with the position of the ending time in percent of the sliders
            <see cref="P:OgamaControls.RangeTrackBar.Duration"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._leftThumbClicked">
            <summary>
            A <see cref="T:System.Boolean"/> value, whether the start time thumb is clicked or not.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._caretThumbClicked">
            <summary>
            A <see cref="T:System.Boolean"/> value, whether the start time thumb is clicked or not.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._rightThumbClicked">
            <summary>
            A <see cref="T:System.Boolean"/> value, whether the start time thumb is clicked or not.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._leftThumbState">
            <summary>
            A <see cref="T:System.Windows.Forms.VisualStyles.TrackBarThumbState"/> with the current start time thumbs state.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._caretThumbState">
            <summary>
            A <see cref="T:System.Windows.Forms.VisualStyles.TrackBarThumbState"/> with the current caret time thumbs state.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._rightThumbState">
            <summary>
            A <see cref="T:System.Windows.Forms.VisualStyles.TrackBarThumbState"/> with the current ending time thumbs state.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._halfThumbWidth">
            <summary>
            A <see cref="T:System.Int32"/> which stores an half of the thumbs width.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._timeTextSize">
            <summary>
            A <see cref="T:System.Drawing.SizeF"/> with the measured text size of "00:00:000".
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._duration">
            <summary>
            A <see cref="T:System.Int32"/> with the duration of this slider.
            That is its maximum value and the reference for the thumbs.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._toolTipStartTime">
            <summary>
            A <see cref="T:System.Windows.Forms.ToolTip"/> to show the start time.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._toolTipEndTime">
            <summary>
            A <see cref="T:System.Windows.Forms.ToolTip"/> to show the ending time.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar._showCaret">
            <summary>
            A flag whether to show or hide a caret at the <see cref="P:OgamaControls.RangeTrackBar.CurrentTime"/>
            position.
            </summary>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.#ctor">
            <summary>
            Constructor. Initializes tooltips and slider.
            </summary>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.SetupTrackBar">
            <summary>
            Calculate the sizes of the bar and thumbs rectangles.
            </summary>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.OnCaretValueChanged(OgamaControls.RangeTrackBar.PositionValueChangedEventArguments)">
            <summary>
            The protected OnCaretValueChanged method raises the 
            <see cref="E:OgamaControls.RangeTrackBar.CaretValueChanged"/>event by invoking the delegates
            </summary>
            <param name="e">A <see cref="T:OgamaControls.RangeTrackBar.PositionValueChangedEventArguments"/> with the new time.</param>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.OnSectionStartValueChanged(OgamaControls.RangeTrackBar.PositionValueChangedEventArguments)">
            <summary>
            The protected OnSectionStartValueChanged method raises the 
            <see cref="E:OgamaControls.RangeTrackBar.SectionStartValueChanged"/>event by invoking the delegates
            </summary>
            <param name="e">A <see cref="T:OgamaControls.RangeTrackBar.PositionValueChangedEventArguments"/> with the new time
            of the sections start.</param>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.OnSectionEndValueChanged(OgamaControls.RangeTrackBar.PositionValueChangedEventArguments)">
            <summary>
            The protected OnSectionEndValueChanged method raises the 
            <see cref="E:OgamaControls.RangeTrackBar.SectionEndValueChanged"/>event by invoking the delegates
            </summary>
            <param name="e">A <see cref="T:OgamaControls.RangeTrackBar.PositionValueChangedEventArguments"/> with the new time
            of the sections end.</param>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.OnPaddingChanged(System.EventArgs)">
            <summary>
            Overriden. Occurs when the control's padding changes. 
            Recalculation of sizes of the bar and thumbs rectangles needed.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.OnSizeChanged(System.EventArgs)">
            <summary>
            Overriden. Occurs when the control's size changes. 
            Recalculation of sizes of the bar and thumbs rectangles needed.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Occurs when the control is redrawn. 
            Draws the whole track bar and its thumbs, along with the timing.
            If section start and end thumbs are hot or pressed, show tooltip
            with timing information.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raised when mouse down occured.
            Determine whether the user has clicked a track bar thumb.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raised when mouse up occured.
            Redraw the track bar thumb if the user has moved it.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raised when mouse move occured.
            Track cursor movements.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.ConvertToSeconds(System.Int32)">
            <summary>
            Converts milliseconds value into a string format "00:00:000"
            </summary>
            <param name="value">An <see cref="T:System.Int32"/> with the time in milliseconds.</param>
            <returns>A <see cref="T:System.String"/> representation of the time in the format "00:00:000".</returns>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.ResetTrackBar">
            <summary>
            Sets trackbar position to zero.
            </summary>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.CurrentLeftThumbXCoordinate">
            <summary>
            Returns the current left thumbs X coordinate.
            </summary>
            <returns>A <see cref="T:System.Int32"/> with the left thumbs X coordinate in pixels relative to the tracks bounds.</returns>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.CurrentRightThumbXCoordinate">
            <summary>
            Returns the current right thumbs X coordinate.
            </summary>
            <returns>A <see cref="T:System.Int32"/> with the right thumbs X coordinate in pixels relative to the tracks bounds.</returns>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.CurrentCaretThumbXCoordinate">
            <summary>
            Returns the current caret thumbs X coordinate.
            </summary>
            <returns>A <see cref="T:System.Int32"/> with the caret thumbs X coordinate in pixels relative to the tracks bounds.</returns>
        </member>
        <member name="E:OgamaControls.RangeTrackBar.CaretValueChanged">
            <summary>
            An event that is raised when the carets position has changed.
            </summary>
        </member>
        <member name="E:OgamaControls.RangeTrackBar.SectionStartValueChanged">
            <summary>
            An event that is raised when the sections start position has changed.
            </summary>
        </member>
        <member name="E:OgamaControls.RangeTrackBar.SectionEndValueChanged">
            <summary>
            An event that is raised when the sections end position has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.RangeTrackBar.Duration">
            <summary>
            Gets or sets the sliders maximum value.
            Should be given in milliseconds.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the duration of this slider.
            That is its maximum value and the reference for the thumbs.</value>
        </member>
        <member name="P:OgamaControls.RangeTrackBar.ShowCaret">
            <summary>
            Gets or sets a flag whether to show or hide the caret with the
            track bars current position.
            </summary>
            <value><strong>True</strong>, if track bar should show a caret at the
            <see cref="P:OgamaControls.RangeTrackBar.CurrentTime"/> position.</value>
        </member>
        <member name="P:OgamaControls.RangeTrackBar.CurrentTime">
            <summary>
            Gets or sets the position of the caret.
            Should be given in milliseconds.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the milliseconds of the current time position.</value>
            <exception cref="T:System.ArgumentException">Thrown, when CurrentTime is not in the range of the valid section.</exception>
        </member>
        <member name="P:OgamaControls.RangeTrackBar.SectionStartTime">
            <summary>
            Gets or sets the start time of the section to play in milliseconds.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the milliseconds of the start time of the section.</value>
        </member>
        <member name="P:OgamaControls.RangeTrackBar.SectionEndTime">
            <summary>
            Gets or sets the ending time of the section to play in milliseconds.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the milliseconds of the ending time of the section.</value>
        </member>
        <member name="T:OgamaControls.RangeTrackBar.PositionValueChangedEventHandler">
            <summary>
            Delegate declaration of CaretValueChanged event
            </summary>
            <param name="sender">sender of CaretValueChanged event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:OgamaControls.RangeTrackBar.PositionValueChangedEventArguments">
            <summary>
            Class that contains the data for the slider value changed event. Derives from System.EventArgs.
            </summary>
        </member>
        <member name="F:OgamaControls.RangeTrackBar.PositionValueChangedEventArguments._currentMillisecond">
            <summary>
            string containing current timing position in ms.
            </summary>
        </member>
        <member name="M:OgamaControls.RangeTrackBar.PositionValueChangedEventArguments.#ctor(System.Int32)">
            <summary>
            Constructor. Initializes fields.
            </summary>
            <param name="currentMillisecond">Integer containing current timing position in ms.</param>
        </member>
        <member name="P:OgamaControls.RangeTrackBar.PositionValueChangedEventArguments.Millisecond">
            <summary>
            Gets  a string containing current timing position in ms
            </summary>
        </member>
        <member name="T:OgamaControls.FontSelectControl">
            <summary>
            FontSelectControl - A control that lets the user rapidly select a font
            </summary>
        </member>
        <member name="F:OgamaControls.FontSelectControl.font">
            <summary>
            Stores the created font.
            </summary>
        </member>
        <member name="F:OgamaControls.FontSelectControl.fontColor">
            <summary>
            Stores the font color.
            </summary>
        </member>
        <member name="F:OgamaControls.FontSelectControl.alignment">
            <summary>
            Stores the font alignment.
            </summary>
        </member>
        <member name="M:OgamaControls.FontSelectControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.FontSelectControl.OnFontStyleChanged(VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs)">
            <summary>
            The font style has been modified, notify listeners.
            </summary>
        </member>
        <member name="M:OgamaControls.FontSelectControl.SetFontSelection(System.Drawing.Font)">
            <summary>
            Setup the controls to match the current font
            </summary>
        </member>
        <member name="F:OgamaControls.FontSelectControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.FontSelectControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.FontSelectControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.FontSelectControl.FontStyleChanged">
            <summary>
            The event that is raised whenever this controls font style changes.
            </summary>
        </member>
        <member name="P:OgamaControls.FontSelectControl.SelectedFont">
            <summary>
            Gets or sets the font of this control
            </summary>
        </member>
        <member name="P:OgamaControls.FontSelectControl.SelectedFontColor">
            <summary>
            Gets or sets the font color for the text
            </summary>
        </member>
        <member name="P:OgamaControls.FontSelectControl.SelectedFontAlignment">
            <summary>
            Gets or sets the alignment for the text
            </summary>
        </member>
        <member name="T:OgamaControls.PenAndBrushControl">
            <summary>
            This <see cref="T:System.Windows.Forms.UserControl"/> can be used to define a <see cref="T:System.Drawing.Pen"/>
            and <see cref="T:System.Drawing.Brush"/> that are visualized in two preview 
            frames. Additionally the user selects, if edge or fill or both should be used.
            </summary>
        </member>
        <member name="F:OgamaControls.PenAndBrushControl.textAlignment">
            <summary>
            Saves the <see cref="T:VectorGraphics.Elements.VGAlignment"/> of the current shape.
            </summary>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.btnPenStyle_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.PenAndBrushControl.btnPenStyle"/>
            Raises a <see cref="T:OgamaControls.Dialogs.PenStyleDlg"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.btnBrushStyle_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.PenAndBrushControl.btnBrushStyle"/>
            Raises a <see cref="T:OgamaControls.Dialogs.BrushStyleDlg"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.btnFont_Click(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Click"/> event handler 
            for the <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.PenAndBrushControl.btnFont"/>
            Raises a <see cref="T:OgamaControls.Dialogs.BrushStyleDlg"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.txbName_TextChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.TextChanged"/> event handler for the
            <see cref="T:System.Windows.Forms.TextBox"/> <see cref="F:OgamaControls.PenAndBrushControl.txbName"/>.
            Raises the <see cref="E:OgamaControls.PenAndBrushControl.ShapePropertiesChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.txbName_Enter(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.Control.Enter"/> event handler for the
            <see cref="T:System.Windows.Forms.TextBox"/> <see cref="F:OgamaControls.PenAndBrushControl.txbName"/>.
            Checks for instruction and erases it if applicable.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.chbDrawEdge_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event handler for the
            <see cref="T:System.Windows.Forms.CheckBox"/> <see cref="F:OgamaControls.PenAndBrushControl.chbDrawEdge"/>.
            Raises the <see cref="E:OgamaControls.PenAndBrushControl.ShapePropertiesChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.chbDrawFill_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event handler for the
            <see cref="T:System.Windows.Forms.CheckBox"/> <see cref="F:OgamaControls.PenAndBrushControl.chbDrawFill"/>.
            Raises the <see cref="E:OgamaControls.PenAndBrushControl.ShapePropertiesChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.chbDrawName_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> event handler for the
            <see cref="T:System.Windows.Forms.CheckBox"/> <see cref="F:OgamaControls.PenAndBrushControl.chbDrawName"/>.
            Raises the <see cref="E:OgamaControls.PenAndBrushControl.ShapePropertiesChanged"/> event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.OnShapePropertiesChanged(VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs)">
            <summary>
            The protected OnShapePropertiesChanged method raises the event by invoking 
            the delegates
            </summary>
            <param name="e">A <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapePropertiesChangedEventArgs"/> with the event arguments</param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.SetFillVisibility(System.Boolean)">
            <summary>
            
            Enables or disables the fill options of this control
            </summary>
            <param name="visible"><strong>True</strong> if fill styles should be available,
            otherwise <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.GetDrawAction">
            <summary>
            Get current <see cref="T:VectorGraphics.Elements.ShapeDrawAction"/>
            according to checkbox selections in shape design panel.
            </summary>
            <returns>A <see cref="T:VectorGraphics.Elements.ShapeDrawAction"/> that should be used for
            the current element.</returns>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.FillEmptyNameTextBox">
            <summary>
            This method writes an grayed instruction text in an empty name textbox.
            </summary>
        </member>
        <member name="F:OgamaControls.PenAndBrushControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.PenAndBrushControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.PenAndBrushControl.ShapePropertiesChanged">
            <summary>
            This event is fired, whenever the controls content has 
            changed.
            </summary>
        </member>
        <member name="P:OgamaControls.PenAndBrushControl.NewTextAlignment">
            <summary>
            Gets or sets the <see cref="T:VectorGraphics.Elements.VGAlignment"/> for the text.
            </summary>
        </member>
        <member name="P:OgamaControls.PenAndBrushControl.NewName">
            <summary>
            Gets or sets the Name defined in this control.
            </summary>
            <value>The newly defined name.</value>
        </member>
        <member name="P:OgamaControls.PenAndBrushControl.NewFont">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Font"/> defined in this control.
            </summary>
            <remarks>The font value is saved in the invisible buttons Font property,
            because otherwise the name would be to large for the control.</remarks>
            <value>The newly defined <see cref="T:System.Drawing.Font"/>.</value>
        </member>
        <member name="P:OgamaControls.PenAndBrushControl.NewFontColor">
            <summary>
            Gets or sets the fonts <see cref="T:System.Drawing.Color"/> defined in this control.
            </summary>
            <value>The newly defined <see cref="T:System.Drawing.Color"/> for the font.</value>
        </member>
        <member name="P:OgamaControls.PenAndBrushControl.NewPen">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Pen"/> defined in this control.
            </summary>
            <value>The newly defined <see cref="T:System.Drawing.Pen"/>.</value>
        </member>
        <member name="P:OgamaControls.PenAndBrushControl.NewBrush">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Brush"/> defined in this control.
            </summary>
            <value>The newly defined <see cref="T:System.Drawing.Brush"/>.</value>
        </member>
        <member name="P:OgamaControls.PenAndBrushControl.DrawAction">
            <summary>
            Gets or sets the <see cref="T:VectorGraphics.Elements.ShapeDrawAction"/> defined in this control.
            </summary>
            <value>The <see cref="T:VectorGraphics.Elements.ShapeDrawAction"/> that should be used.</value>
        </member>
        <member name="T:OgamaControls.PenSelectControl">
            <summary>
            PenSelectControl - A control that lets the user rapidly select a pen
            </summary>
        </member>
        <member name="F:OgamaControls.PenSelectControl.m_Pen">
            <summary>
            The pen that is created within this control
            </summary>
        </member>
        <member name="F:OgamaControls.PenSelectControl._raiseEvent">
            <summary>
            Flag that is set when the <see cref="E:OgamaControls.PenSelectControl.PenChanged"/> event should be raised.
            </summary>
        </member>
        <member name="M:OgamaControls.PenSelectControl.#ctor">
            <summary>
            Constructor. Initializes the combo box with enumeration values.
            </summary>
        </member>
        <member name="F:OgamaControls.PenSelectControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.PenSelectControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.PenSelectControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.PenSelectControl.PenChanged">
            <summary>
            The event that is raised whenever this controls pen changes.
            </summary>
        </member>
        <member name="P:OgamaControls.PenSelectControl.Pen">
            <summary>
            Gets or sets the controls pen.
            </summary>
        </member>
        <member name="T:OgamaControls.DataGridViewImageButtonCell">
            <summary>
            A customized <see cref="T:System.Windows.Forms.DataGridViewTextBoxCell"/> to show images 
            at the left side of the cell.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewImageButtonCell._imageValue">
            <summary>
            The <see cref="P:OgamaControls.DataGridViewImageButtonCell.Image"/> to display in this cell.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewImageButtonCell._imageSize">
            <summary>
            The <see cref="T:System.Drawing.Size"/> of the image displayed.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewImageButtonCell._initialDirectory">
            <summary>
            Saves a <see cref="T:System.String"/> with the initial directory for
            the image selection.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewImageButtonCell.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewImageButtonCell.Clone">
            <summary>
            Overridden. Creates an exact copy of this cell. 
            </summary>
            <returns>An <see cref="T:System.Object"/> that represents the 
            cloned <see cref="T:OgamaControls.DataGridViewImageButtonCell"/>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewImageButtonCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Customized implementation of the GetFormattedValue function 
            in order to created the thumbs from the filename string in the formatted
            representation of the cell value.
            </summary>
            <param name="value">The value to be formatted. </param>
            <param name="rowIndex">The index of the cell's parent row.</param>
            <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> in effect for the cell.</param>
            <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the value 
            type that provides custom conversion to the formatted value type, 
            or a null reference (Nothing in Visual Basic) if no such custom conversion is needed.</param>
            <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the 
            formatted value type that provides custom conversion from the value type,
            or a null reference (Nothing in Visual Basic) if no such custom conversion is needed.</param>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values 
            describing the context in which the formatted value is needed.</param>
            <returns>The formatted value of the cell or a null reference (Nothing in Visual Basic) if the cell does not belong to a <see cref="T:System.Windows.Forms.DataGridView"/> control.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewImageButtonCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Custom paints the cell. The base implementation of the DataGridViewTextBoxCell 
            type is called first to draw the text box part. Then the <see cref="P:OgamaControls.DataGridViewImageButtonCell.Image"/> is drawn.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> used to paint the <see cref="T:System.Windows.Forms.DataGridViewCell"/>.</param>
            <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle"/> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView"/> that needs to be repainted.</param>
            <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle"/> that contains the bounds of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="rowIndex">The row index of the cell that is being painted.</param>
            <param name="cellState">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates"/> values that specifies the state of the cell.</param>
            <param name="value">The data of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="formattedValue">The formatted data of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="errorText">An error message that is associated with the cell.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that contains formatting and style information about the cell.</param>
            <param name="advancedBorderStyle">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle"/> that contains border styles for the cell that is being painted.</param>
            <param name="paintParts">A bitwise combination of the <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> values that specifies which parts of the cell need to be painted.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewImageButtonCell.OnDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Overridden. Called when the cell is double-clicked. 
            Raises an openfile dialog to select the image file.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewImageButtonCell.SetInitialDirectory(System.Int32,System.String)">
            <summary>
            Utility function that sets a new value for the InitialDirectory property of the cell. 
            Row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The row index of the cell.</param>
            <param name="value">Directory to set</param>
        </member>
        <member name="M:OgamaControls.DataGridViewImageButtonCell.ThumbnailCallback">
            <summary>
            Thumbnail creation callback.
            Currently not used
            </summary>
            <returns>always false</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewImageButtonCell.InitialDirectory">
            <summary>
            Sets the initial directory for the image selection dialog
            </summary>
            <value>A <see cref="T:System.String"/> with the directory to set as initial.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewImageButtonCell.Image">
            <summary>
            Gets or sets the <see cref="P:OgamaControls.DataGridViewImageButtonCell.Image"/> for the cell.
            </summary>
            <value>The <see cref="P:OgamaControls.DataGridViewImageButtonCell.Image"/> of this cell.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewImageButtonCell.OwningDataGridViewImageButtonColumn">
            <summary>
            Gets the <see cref="T:OgamaControls.DataGridViewImageButtonColumn"/> that owns this cell.
            </summary>
            <value>A <see cref="T:OgamaControls.DataGridViewImageButtonColumn"/> that owns this cell.</value>
        </member>
        <member name="T:OgamaControls.DataGridViewImageButtonColumn">
            <summary>
            Image button column for the <see cref="T:System.Windows.Forms.DataGridView"/>.
            Uses <see cref="T:OgamaControls.DataGridViewImageButtonCell"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewImageButtonColumn._imageValue">
            <summary>
            The <see cref="P:OgamaControls.DataGridViewImageButtonColumn.Image"/> to display in this column.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewImageButtonColumn._imageSize">
            <summary>
            The <see cref="T:System.Drawing.Size"/> of the image displayed.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewImageButtonColumn.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewImageButtonColumn.Clone">
            <summary>
            Overridden. Creates an exact copy of this cell. 
            </summary>
            <returns>An <see cref="T:System.Object"/> that represents the 
            cloned <see cref="T:OgamaControls.DataGridViewImageButtonColumn"/>.</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewImageButtonColumn.ImageSize">
            <summary>
            Gets the size of the image.
            </summary>
            <value>A <see cref="T:System.Drawing.Size"/> for the image in this column</value>
        </member>
        <member name="P:OgamaControls.DataGridViewImageButtonColumn.InitialDirectory">
            <summary>
            Sets the initial directory for the image selection dialog
            </summary>
            <value>A <see cref="T:System.String"/> with the directory to set as initial.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewImageButtonColumn.Image">
            <summary>
            Gets or sets the image for all the cells in this column.
            </summary>
            <value>An <see cref="P:OgamaControls.DataGridViewImageButtonColumn.Image"/> for the cells.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewImageButtonColumn.DataGridViewImageButtonCellTemplate">
            <summary>
            Small utility function that returns the template cell 
            as a <see cref="T:OgamaControls.DataGridViewImageButtonCell"/>
            </summary>
            <value>A <see cref="T:OgamaControls.DataGridViewImageButtonCell"/> template.</value>
        </member>
        <member name="T:OgamaControls.DataGridViewPositionButtonCell">
            <summary>
            Defines a <see cref="T:OgamaControls.PositionButton"/> cell type for the <see cref="T:System.Windows.Forms.DataGridView"/> control.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewPositionButtonCell.DataGridViewPositionButton_defaultPosition">
            <summary>
            Default value of the position property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewPositionButtonCell.DataGridViewPositionButton_defaultStimulusScreenSize">
            <summary>
            Default value of the StimulusScreenSize property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewPositionButtonCell.defaultEditType">
            <summary>
            Type of this cell's editing control
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewPositionButtonCell.defaultValueType">
            <summary>
            Type of this cell's value. The formatted value type is 
            string, the same as the base class DataGridViewTextBoxCell
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewPositionButtonCell._location">
            <summary>
            Caches the value of the <see cref="P:OgamaControls.DataGridViewPositionButtonCell.NewPosition"/> property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewPositionButtonCell._stimulusScreenSize">
            <summary>
            Caches the value of the <see cref="P:OgamaControls.DataGridViewPositionButtonCell.StimulusScreenSize"/> property
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.#ctor">
            <summary>
            Constructor for the DataGridViewPositionButton cell type
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.Clone">
            <summary>
            Overridden. Creates an exact copy of this cell. 
            </summary>
            <returns>An <see cref="T:System.Object"/> that represents the cloned <see cref="T:OgamaControls.DataGridViewPositionButtonCell"/>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.GetErrorIconBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            Customized implementation of the GetErrorIconBounds function in order to draw the potential 
            error icon next to the down button and not on top of them.
            Returns the bounding rectangle that encloses the cell's error icon, if one is displayed. 
            </summary>
            <param name="graphics">The graphics context for the cell.</param>
            <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> to be applied to the cell.</param>
            <param name="rowIndex">The index of the cell's parent row.</param>
            <returns>The <see cref="T:System.Drawing.Rectangle"/> that bounds the cell's error icon, if one is displayed; otherwise, <see cref="T:System.Empty"/>. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Customized implementation of the GetFormattedValue function 
            in order to include the buttons new position in the formatted
            representation of the cell value.
            </summary>
            <param name="value">The value to be formatted. </param>
            <param name="rowIndex">The index of the cell's parent row.</param>
            <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> in effect for the cell.</param>
            <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the value 
            type that provides custom conversion to the formatted value type, 
            or a null reference (Nothing in Visual Basic) if no such custom conversion is needed.</param>
            <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the 
            formatted value type that provides custom conversion from the value type,
            or a null reference (Nothing in Visual Basic) if no such custom conversion is needed.</param>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values 
            describing the context in which the formatted value is needed.</param>
            <returns>The formatted value of the cell or a null reference (Nothing in Visual Basic) if the cell does not belong to a <see cref="T:System.Windows.Forms.DataGridView"/> control.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)">
            <summary>
            Custom implementation of the GetPreferredSize function. 
            This implementation uses the preferred size of the base 
            <see cref="T:System.Windows.Forms.DataGridViewTextBoxCell"/> cell and adds room for the down button.
            Calculates the preferred size, in pixels, of the cell. 
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> used to draw the cell.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that represents the style of the cell.</param>
            <param name="rowIndex">The zero-based row index of the cell.</param>
            <param name="constraintSize">The cell's maximum allowable size.</param>
            <returns>A <see cref="T:System.Drawing.Size"/> that represents the preferred size, in pixels, of the cell. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Custom implementation of the <see cref="M:OgamaControls.DataGridViewPositionButtonCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)"/> function. 
            This function is called by the <see cref="T:System.Windows.Forms.DataGridView"/> control 
            at the beginning of an editing session. It makes sure 
            that the properties of the <see cref="T:OgamaControls.PositionButton"/> editing control are 
            set according to the cell properties.
            </summary>
            <param name="rowIndex">The zero-based row index of the cell.</param>
            <param name="initialFormattedValue">An <see cref="T:System.Object"/> that represents the value displayed by the cell when editing is started.</param>
            <param name="dataGridViewCellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that represents the style of the cell.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Custom paints the cell. The base implementation of the 
            <see cref="T:System.Windows.Forms.DataGridViewTextBoxCell"/> type is called first,
            dropping the icon error and content foreground parts. 
            Those two parts are painted by this custom implementation.
            In this sample, the non-edited <see cref="T:OgamaControls.PositionButton"/> combo box 
            dropdown control is painted by hand.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> used to paint the <see cref="T:System.Windows.Forms.DataGridViewCell"/>.</param>
            <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle"/> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView"/> that needs to be repainted.</param>
            <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle"/> that contains the bounds of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="rowIndex">The row index of the cell that is being painted.</param>
            <param name="cellState">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates"/> values that specifies the state of the cell.</param>
            <param name="value">The data of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="formattedValue">The formatted data of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="errorText">An error message that is associated with the cell.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that contains formatting and style information about the cell.</param>
            <param name="advancedBorderStyle">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle"/> that contains border styles for the cell that is being painted.</param>
            <param name="paintParts">A bitwise combination of the <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> values that specifies which parts of the cell need to be painted.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Custom implementation of the <see cref="M:OgamaControls.DataGridViewPositionButtonCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> 
            method called by the <see cref="T:System.Windows.Forms.DataGridView"/> control when it
            needs to relocate and/or resize the editing control.
            </summary>
            <param name="setLocation"><strong>true</strong> to have the control placed as 
            specified by the other arguments; <strong>false</strong> to allow the control to place itself.</param>
            <param name="setSize"><strong>true</strong> to specify the size; 
            <strong>false</strong> to allow the control to size itself. </param>
            <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle"/> that defines the cell bounds. </param>
            <param name="cellClip">The area that will be used to paint the editing control.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that represents the style of the cell being edited.</param>
            <param name="singleVerticalBorderAdded"><strong>true</strong> to add a vertical border to the cell; 
            otherwise, <strong>false</strong>.</param>
            <param name="singleHorizontalBorderAdded"><strong>true</strong> to add a horizontal border to the cell;
            otherwise, <strong>false</strong>.</param>
            <param name="isFirstDisplayedColumn"><strong>true</strong> if the hosting cell is in 
            the first visible column; otherwise, <strong>false</strong>.</param>
            <param name="isFirstDisplayedRow"><strong>true</strong> if the hosting cell is in 
            the first visible row; otherwise, <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.ToString">
            <summary>
            Returns a string that describes the current object. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current object. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.GetAdjustedEditingControlBounds(System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Adjusts the location and size of the editing control given 
            the alignment characteristics of the cell
            </summary>
            <param name="editingControlBounds">A <see cref="T:System.Drawing.Rectangle"/> with the editing controls bounds.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> enumeration member.</param>
            <returns>An adjusted bounding <see cref="T:System.Drawing.Rectangle"/> for the Editing Control</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.OnCommonChange">
            <summary>
            Called when a cell characteristic that affects its rendering and/or preferred size has changed.
            This implementation only takes care of repainting the cells. The DataGridView's autosizing methods
            also need to be called in cases where some grid elements autosize.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.SetPosition(System.Int32,System.Drawing.Point)">
            <summary>
            Utility function that sets a new value for the <see cref="P:OgamaControls.DataGridViewPositionButtonCell.NewPosition"/> property of the cell. 
            Row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The row index of the cell.</param>
            <param name="value"><see cref="T:System.Drawing.Point"/> with location to set</param>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.SetStimulusScreenSize(System.Int32,System.Drawing.Size)">
            <summary>
            Utility function that sets a new value for the <see cref="P:OgamaControls.DataGridViewPositionButtonCell.StimulusScreenSize"/> property of the cell. 
            Row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The row index of the cell.</param>
            <param name="value"><see cref="T:System.Drawing.Point"/> with location to set</param>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.OwnsEditingPositionButton(System.Int32)">
            <summary>
            Determines whether this cell, at the given row index, shows the grid's editing control or not.
            The row index needs to be provided as a parameter because this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The row index of the cell.</param>
            <returns><strong>True</strong>, if this cell, at the given row index, shows the grid's editing control.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonCell.PartPainted(System.Windows.Forms.DataGridViewPaintParts,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Little utility function called by the Paint function to see 
            if a particular part needs to be painted. 
            </summary>
            <param name="paintParts">The whole <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> object in the paint control</param>
            <param name="paintPart">The teste <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> enumeration member.</param>
            <returns><strong>True</strong>, if the particular part needs to be painted.</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonCell.NewPosition">
            <summary>
            The <strong>NewPosition</strong> property replicates 
            the one from the <see cref="T:OgamaControls.PositionButton"/> control
            Gets or sets the buttons position value.
            </summary>
            <value>The <see cref="T:System.Drawing.Point"/> with the new position value of the button.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonCell.StimulusScreenSize">
            <summary>
            The <strong>StimulusScreenSize</strong> property replicates 
            the one from the <see cref="T:OgamaControls.IPositionControl"/> control
            Gets or sets the controls size condition.
            </summary>
            <value>The <see cref="T:System.Drawing.Size"/> with the new stimulus screen size value.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonCell.EditingPositionButton">
            <summary>
            Returns the current <see cref="T:System.Windows.Forms.IDataGridViewEditingControl"/> as 
            a <see cref="T:OgamaControls.DataGridViewPositionButtonEditingControl"/> control
            </summary>
            <value>A <see cref="T:OgamaControls.DataGridViewPositionButtonEditingControl"/> that is currently active.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonCell.EditType">
            <summary>
            Overridden. Define the type of the cell's editing control
            </summary>
            <value>A <see cref="T:System.Type"/> representing the 
            <see cref="T:OgamaControls.DataGridViewPositionButtonEditingControl"/> type.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonCell.ValueType">
            <summary>
            Overridden. Gets the data type of the values in the cell. 
            </summary>
            <value>A <see cref="T:System.Type"/> representing the data type of the value in the cell. </value>
        </member>
        <member name="T:OgamaControls.DataGridViewPositionButtonColumn">
            <summary>
            Custom column type dedicated to the <see cref="T:OgamaControls.DataGridViewNumericUpDownCell"/> cell type.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonColumn.#ctor">
            <summary>
            Constructor for the DataGridViewPositionButtonColumn class.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonColumn.ToString">
            <summary>
            Returns a standard compact string representation of the column.
            </summary>
            <returns>A <see cref="T:System.String"/> with the compact string 
            representation of the column.</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonColumn.CellTemplate">
            <summary>
            Represents the implicit cell that gets cloned when adding rows to the grid.
            Gets or sets the template used to create new cells. 
            </summary>
            <value>A <see cref="T:System.Windows.Forms.DataGridViewCell"/> that all other cells in the column are modeled after. 
            The default is a null reference (Nothing in Visual Basic). </value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonColumn.NewPosition">
            <summary>
            Replicates the <see cref="P:OgamaControls.DataGridViewPositionButtonColumn.NewPosition"/> property of the <see cref="T:OgamaControls.DataGridViewPositionButtonCell"/> cell type.
            Gets or sets the position value for all position button cells in the column.
            </summary>
            <value>The <see cref="T:System.Drawing.Point"/> with the location value of the button cell</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonColumn.StimulusScreenSize">
            <summary>
            The stimulus screen size of the cells for correct sizing of the position control.
            </summary>
            <value>The <see cref="T:System.Drawing.Size"/> which should be set as default value.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonColumn.PositionButtonCellTemplate">
            <summary>
            Small utility function that returns the template cell as a <see cref="T:OgamaControls.DataGridViewPositionButtonCell"/>
            </summary>
            <value>A <see cref="T:OgamaControls.DataGridViewPositionButtonCell"/> template.</value>
        </member>
        <member name="T:OgamaControls.DataGridViewPositionButtonEditingControl">
            <summary>
            Defines the editing control for the DataGridViewNumericUpDownCell custom cell type.
            </summary>
        </member>
        <member name="T:OgamaControls.PositionDropdown">
            <summary>
            Position button is a specialized dropdown button for a position selection.
            OnClick it opens a stimulus screen proportional panel of type <see cref="T:OgamaControls.PositionSelector"/>on which
            the user can select a screen position and it will be recalculated in
            stimuli screen coordinates. 
            </summary>
        </member>
        <member name="T:OgamaControls.IPositionControl">
            <summary>
            Position controls interface to enable a shared <see cref="T:OgamaControls.PositionSelector"/> control.
            </summary>
        </member>
        <member name="M:OgamaControls.IPositionControl.OnPositionChanged(System.EventArgs)">
            <summary>
            OnPositionChanged event handler. Should Raise delegate.
            </summary>
            <param name="e">Empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="E:OgamaControls.IPositionControl.PositionChanged">
            <summary>
            Event. Raised, when the position has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.IPositionControl.CurrentPosition">
            <summary>
            Gets or set the position of the element in stimulus screen coordinates
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> with the new position.</value>
        </member>
        <member name="P:OgamaControls.IPositionControl.StimulusScreenSize">
            <summary>
            Gets or set the stimulus screen size
            </summary>
            <value>A <see cref="T:System.Drawing.Size"/> with the stimulus screen size.</value>
        </member>
        <member name="P:OgamaControls.IPositionControl.Alignment">
            <summary>
            Horizontal text alignment for text at position value.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.HorizontalAlignment"/> with the new alignment of the text.</value>
        </member>
        <member name="F:OgamaControls.PositionDropdown._position">
            <summary>
            The position in stimulus screen coordinates.
            </summary>
        </member>
        <member name="F:OgamaControls.PositionDropdown._stimulusScreenSize">
            <summary>
            The stimulus screen size.
            </summary>
        </member>
        <member name="F:OgamaControls.PositionDropdown._alignment">
            <summary>
            Horizontal alignment of object at given position
            </summary>
        </member>
        <member name="M:OgamaControls.PositionDropdown.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.PositionDropdown.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Component Constructor
            </summary>
            <param name="container">owning container</param>
        </member>
        <member name="M:OgamaControls.PositionDropdown.InitializeCustomComponents">
            <summary>
            Initialize fields with standard values.
            Add zero to dropdown item list.
            </summary>
        </member>
        <member name="M:OgamaControls.PositionDropdown.PositionDropdown_Click(System.Object,System.EventArgs)">
            <summary>
            OnClick event handler. Initializes the position selection control 
            and shows it.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PositionDropdown.OnPositionChanged(System.EventArgs)">
            <summary>
            OnPositionChanged event handler. Raises delegate. 
            Notifys listeners that position value has changed.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="F:OgamaControls.PositionDropdown.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.PositionDropdown.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.PositionDropdown.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.PositionDropdown.PositionChanged">
            <summary>
            Event. Raised, when the position has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.PositionDropdown.CurrentPosition">
            <summary>
            Gets or sets the current position value of the dropdown button.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> with the new position value.</value>
        </member>
        <member name="P:OgamaControls.PositionDropdown.StimulusScreenSize">
            <summary>
            Gets or set the stimulus screen size
            </summary>
            <remarks>Used to size the position control correctly.</remarks>
            <value>A <see cref="T:System.Drawing.Size"/> with the stimulus screen size.</value>
        </member>
        <member name="P:OgamaControls.PositionDropdown.Alignment">
            <summary>
            Horizontal text alignment for text at position value.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.HorizontalAlignment"/> with the new alignment of the text.</value>
        </member>
        <member name="F:OgamaControls.DataGridViewPositionButtonEditingControl.dataGridView">
            <summary>
            The grid that owns this editing control
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewPositionButtonEditingControl.valueChanged">
            <summary>
            Stores whether the editing control's value has changed or not
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewPositionButtonEditingControl.rowIndex">
            <summary>
            Stores the row index in which the editing control resides
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonEditingControl.#ctor">
            <summary>
            Constructor of the editing control class
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonEditingControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Processes a dialog key. It is used to parse comma separated positions that are
            entered by hand not by control into the buttons "(x,y)" position format.
            </summary>
            <remarks>Have a look at <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)"/> for better description.</remarks>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values that represents the key to process.</param>
            <returns><strong>true</strong> if the key was processed by the control; 
            otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonEditingControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Listen to the KeyPress notification to know when the value changed, and 
            notify the grid of the change. Only allow numbers and decimal separators for input.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonEditingControl.OnPositionChanged(System.EventArgs)">
            <summary>
            Listen to the PositionChanged notification to forward the change to the grid.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>Determines whether the specified key is a regular 
            input key that the editing control should process or a special 
            key that the <see cref="T:System.Windows.Forms.DataGridView"/> should process.
            </summary>
            <param name="keyData">A <see cref="T:System.Windows.Forms.Keys"/> that represents the key that was pressed.</param>
            <param name="dataGridViewWantsInputKey"><strong>true</strong> when the <see cref="T:System.Windows.Forms.DataGridView"/> 
            wants to process the <see cref="T:System.Windows.Forms.Keys"/> in keyData; otherwise, <strong>false</strong>.</param>
            <returns><strong>true</strong> if the specified key is a regular input key that should be 
            handled by the editing control; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Method called by the grid before the editing control is shown so it can adapt to the 
            provided cell style.
            Changes the control's user interface (UI) to be consistent with the specified cell style.
            </summary>
            <param name="dataGridViewCellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> to use 
            as the model for the UI.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Retrieves the formatted value of the cell. That is (x,y) formatted <see cref="T:System.Drawing.Point"/> 
            </summary>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values 
            that specifies the context in which the data is needed.</param>
            <returns>An <see cref="T:System.Object"/> that represents the formatted version of the cell contents. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonEditingControl.PrepareEditingControlForEdit(System.Boolean)">
            <summary>
            Called by the grid to give the editing control a chance to prepare itself for
            the editing session.
            </summary>
            <param name="selectAll"><strong>true</strong> to select all of the cell's 
            content; otherwise, <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewPositionButtonEditingControl.NotifyDataGridViewOfValueChange">
            <summary>
            Small utility function that updates the local dirty state and 
            notifies the grid of the value change.
            </summary>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonEditingControl.EditingControlDataGridView">
            <summary>
            Gets or sets the grid that uses this editing control
            </summary>
            <value>The <see cref="T:System.Windows.Forms.DataGridView"/> that owns this Editing Control</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonEditingControl.EditingControlFormattedValue">
            <summary>
            Gets or set the current formatted value of the editing control
            </summary>
            <value>The <see cref="T:System.Object"/> that represents the current formatted value of the editing control.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonEditingControl.EditingControlRowIndex">
            <summary>
            Gets or sets the the row in which the editing control resides
            </summary>
            <value>The <see cref="T:System.Int32"/> that is the row index in which the editing control resides</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonEditingControl.EditingControlValueChanged">
            <summary>
            Gets or sets the value whether the value of the editing control has changed or not
            </summary>
            <value>The <see cref="T:System.Boolean"/> value whether the value of the editing control has changed or not.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonEditingControl.EditingPanelCursor">
            <summary>
            Gets the cursor that must be used for the editing panel,
            i.e. the parent of the editing control.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.Cursor"/> which must be used for the editing panel.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewPositionButtonEditingControl.RepositionEditingControlOnValueChange">
            <summary>
            Gets the property which indicates whether the editing control needs to be repositioned 
            when its value changes. Returns always false.
            </summary>
            <value>The <see cref="T:System.Boolean"/> value whether the editing control needs to be repositioned.</value>
        </member>
        <member name="T:OgamaControls.DataGridViewFontButtonCell">
            <summary>
            Defines a <see cref="T:OgamaControls.FontButton"/> cell type for the <see cref="T:System.Windows.Forms.DataGridView"/> control.
            It looks like a button with a triangle to show its dropdown capacity.
            Its text is drawn with the font that is represented through the cells value.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewFontButtonCell.defaultEditType">
            <summary>
            Type of this cell's editing control
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewFontButtonCell.defaultValueType">
            <summary>
            Type of this cell's value. The formatted value type is string, 
            the same as the base class DataGridViewTextBoxCell
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewFontButtonCell.DataGridViewFontButton_defaultFont">
            <summary>
             Default value of the font property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewFontButtonCell.DataGridViewFontButton_defaultText">
            <summary>
            Default value of the sample text
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewFontButtonCell._font">
            <summary>
            Caches the value of the font property
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.#ctor">
            <summary>
            Constructor for the DataGridViewFontButton cell type
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.Clone">
            <summary>
            Overridden. Creates an exact copy of this cell. 
            </summary>
            <returns>An <see cref="T:System.Object"/> that represents the cloned 
            <see cref="T:OgamaControls.DataGridViewFontButtonCell"/>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.GetErrorIconBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            Customized implementation of the GetErrorIconBounds function in order to draw the potential 
            error icon next to the up/down buttons and not on top of them.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Customized implementation of the GetFormattedValue function 
            in order to include the buttons font in the formatted
            representation of the cell value.
            </summary>
            <param name="value">The value to be formatted. </param>
            <param name="rowIndex">The index of the cell's parent row.</param>
            <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> in effect for the cell.</param>
            <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the value 
            type that provides custom conversion to the formatted value type, 
            or a null reference (Nothing in Visual Basic) if no such custom conversion is needed.</param>
            <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the 
            formatted value type that provides custom conversion from the value type,
            or a null reference (Nothing in Visual Basic) if no such custom conversion is needed.</param>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values 
            describing the context in which the formatted value is needed.</param>
            <returns>The formatted value of the cell or a null reference (Nothing in Visual Basic) if the cell does not belong to a <see cref="T:System.Windows.Forms.DataGridView"/> control.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Custom implementation of the InitializeEditingControl function. 
            This function is called by the DataGridView control 
            at the beginning of an editing session. It makes sure 
            that the properties of the FonbtButton editing control are 
            set according to the cell properties.
            </summary>
            <param name="rowIndex">The zero-based row index of the cell.</param>
            <param name="initialFormattedValue">An <see cref="T:System.Object"/> that represents 
            the value displayed by the cell when editing is started.</param>
            <param name="dataGridViewCellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> 
            that represents the style of the cell.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Custom paints the cell. The base implementation of the DataGridViewTextBoxCell 
            type is called first,
            dropping the icon error and content foreground parts. 
            Those two parts are painted by this custom implementation.
            In this sample, the non-edited FontButton control is painted by hand.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> used to paint the <see cref="T:System.Windows.Forms.DataGridViewCell"/>.</param>
            <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle"/> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView"/> that needs to be repainted.</param>
            <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle"/> that contains the bounds of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="rowIndex">The row index of the cell that is being painted.</param>
            <param name="cellState">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates"/> values that specifies the state of the cell.</param>
            <param name="value">The data of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="formattedValue">The formatted data of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="errorText">An error message that is associated with the cell.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that contains formatting and style information about the cell.</param>
            <param name="advancedBorderStyle">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle"/> that contains border styles for the cell that is being painted.</param>
            <param name="paintParts">A bitwise combination of the <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> values that specifies which parts of the cell need to be painted.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Custom implementation of the <see cref="M:OgamaControls.DataGridViewFontButtonCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> 
            method called by the <see cref="T:System.Windows.Forms.DataGridView"/> control when it
            needs to relocate and/or resize the editing control.
            </summary>
            <param name="setLocation"><strong>true</strong> to have the control placed as 
            specified by the other arguments; <strong>false</strong> to allow the control to place itself.</param>
            <param name="setSize"><strong>true</strong> to specify the size; 
            <strong>false</strong> to allow the control to size itself. </param>
            <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle"/> that defines the cell bounds. </param>
            <param name="cellClip">The area that will be used to paint the editing control.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that represents the style of the cell being edited.</param>
            <param name="singleVerticalBorderAdded"><strong>true</strong> to add a vertical border to the cell; 
            otherwise, <strong>false</strong>.</param>
            <param name="singleHorizontalBorderAdded"><strong>true</strong> to add a horizontal border to the cell;
            otherwise, <strong>false</strong>.</param>
            <param name="isFirstDisplayedColumn"><strong>true</strong> if the hosting cell is in 
            the first visible column; otherwise, <strong>false</strong>.</param>
            <param name="isFirstDisplayedRow"><strong>true</strong> if the hosting cell is in 
            the first visible row; otherwise, <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.ToString">
            <summary>
            Returns a string that describes the current object. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current object. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.GetAdjustedEditingControlBounds(System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Adjusts the location and size of the editing control given 
            the alignment characteristics of the cell
            </summary>
            <param name="editingControlBounds">A <see cref="T:System.Drawing.Rectangle"/> with the editing controls bounds.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> enumeration member.</param>
            <returns>An adjusted bounding <see cref="T:System.Drawing.Rectangle"/> for the Editing Control</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.OnCommonChange">
            <summary>
            Called when a cell characteristic that affects its rendering and/or preferred size has changed.
            This implementation only takes care of repainting the cells. The DataGridView's autosizing methods
            also need to be called in cases where some grid elements autosize.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.SetFont(System.Int32,System.Drawing.Font)">
            <summary>
            Utility function that sets a new value for the Font property of the cell. 
            Row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The row index of the cell.</param>
            <param name="value">color to set</param>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.OwnsEditingFontButton(System.Int32)">
            <summary>
            Determines whether this cell, at the given row index, shows the grid's editing control or not.
            The row index needs to be provided as a parameter because this cell may be shared among multiple rows.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonCell.PartPainted(System.Windows.Forms.DataGridViewPaintParts,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Little utility function called by the Paint function to see if a particular part needs to be painted. 
            </summary>
            <param name="paintParts">The whole <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> object in the paint control</param>
            <param name="paintPart">The teste <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> enumeration member.</param>
            <returns><strong>True</strong>, if the particular part needs to be painted.</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonCell.NewFont">
            <summary>
            The NewFont property replicates the one from the FontButton control.
            Gets or sets the font of this cell.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> that is used to draw the text of the cell
            and that is represented through its value property</value>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonCell.EditingFontButton">
            <summary>
            Returns the current <see cref="T:System.Windows.Forms.IDataGridViewEditingControl"/> as a <see cref="T:OgamaControls.DataGridViewFontButtonEditingControl"/> control
            </summary>
            <value>A <see cref="T:OgamaControls.DataGridViewFontButtonEditingControl"/> that is currently active.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonCell.EditType">
            <summary>
            Overridden. Define the type of the cell's editing control
            </summary>
            <value>A <see cref="T:System.Type"/> representing the <see cref="T:OgamaControls.DataGridViewFontButtonEditingControl"/> type.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonCell.ValueType">
            <summary>
            Overridden. Gets or sets the data type of the values in the cell. 
            </summary>
            <value>A <see cref="T:System.Type"/> representing the data type of the value in the cell. </value>
        </member>
        <member name="T:OgamaControls.DataGridViewFontButtonColumn">
            <summary>
            Custom column type dedicated to the <see cref="T:OgamaControls.DataGridViewFontButtonCell"/> cell type.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonColumn.#ctor">
            <summary>
            Constructor for the DataGridViewFontButtonColumn class.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonColumn.ToString">
            <summary>
            Returns a standard compact string representation of the column.
            </summary>
            <returns>A <see cref="T:System.String"/> with the compact string representation of the column.</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonColumn.CellTemplate">
            <summary>
            Represents the implicit cell that gets cloned when adding rows to the grid.
            Gets or sets the template used to create new cells. 
            </summary>
            <value>A <see cref="T:System.Windows.Forms.DataGridViewCell"/> that all other cells in the column are modeled after. 
            The default is a null reference (Nothing in Visual Basic). </value>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonColumn.FontButtonCellTemplate">
            <summary>
            Small utility function that returns the template cell
            as a <see cref="T:OgamaControls.DataGridViewFontButtonCell"/>
            </summary>
            <value>A <see cref="T:OgamaControls.DataGridViewFontButtonCell"/> template.</value>
        </member>
        <member name="T:OgamaControls.DataGridViewFontButtonEditingControl">
            <summary>
            Defines the editing control for the <see cref="T:OgamaControls.DataGridViewFontButtonCell"/> custom cell type.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewFontButtonEditingControl.dataGridView">
            <summary>
            The grid that owns this editing control
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewFontButtonEditingControl.valueChanged">
            <summary>
            Stores whether the editing control's value has changed or not
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewFontButtonEditingControl.rowIndex">
            <summary>
            Stores the row index in which the editing control resides
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonEditingControl.#ctor">
            <summary>
            Constructor of the editing control class
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonEditingControl.OnFontChanged(System.EventArgs)">
            <summary>
            Listen to the OnFontChanged notification to forward the change to the grid.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Method called by the grid before the editing control is shown so it can adapt to the 
            provided cell style.
            Changes the control's user interface (UI) to be consistent with the specified cell style.
            </summary>
            <param name="dataGridViewCellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> to use 
            as the model for the UI.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>Determines whether the specified key is a regular 
            input key that the editing control should process or a special 
            key that the <see cref="T:System.Windows.Forms.DataGridView"/> should process.
            </summary>
            <param name="keyData">A <see cref="T:System.Windows.Forms.Keys"/> that represents the key that was pressed.</param>
            <param name="dataGridViewWantsInputKey"><strong>true</strong> when the <see cref="T:System.Windows.Forms.DataGridView"/> 
            wants to process the <see cref="T:System.Windows.Forms.Keys"/> in keyData; otherwise, <strong>false</strong>.</param>
            <returns><strong>true</strong> if the specified key is a regular input key that should be 
            handled by the editing control; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Retrieves the formatted value of the cell. 
            </summary>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values 
            that specifies the context in which the data is needed.</param>
            <returns>An <see cref="T:System.Object"/> that represents the formatted version of the cell contents. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonEditingControl.PrepareEditingControlForEdit(System.Boolean)">
            <summary>
            Called by the grid to give the editing control a chance to prepare itself for
            the editing session.
            </summary>
            <param name="selectAll"><strong>true</strong> to select all of the cell's 
            content; otherwise, <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewFontButtonEditingControl.NotifyDataGridViewOfValueChange">
            <summary>
            Small utility function that updates the local dirty state and 
            notifies the grid of the value change.
            </summary>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonEditingControl.EditingControlDataGridView">
            <summary>
            Gets or sets the grid that uses this editing control
            </summary>
            <value>The <see cref="T:System.Windows.Forms.DataGridView"/> that owns this Editing Control</value>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonEditingControl.EditingControlFormattedValue">
            <summary>
            Gets or set the current formatted value of the editing control
            </summary>
            <value>The <see cref="T:System.Object"/> that represents the current formatted value of the editing control.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonEditingControl.EditingControlRowIndex">
            <summary>
            Gets or sets the the row in which the editing control resides
            </summary>
            <value>The <see cref="T:System.Int32"/> that is the row index in which the editing control resides</value>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonEditingControl.EditingControlValueChanged">
            <summary>
            Gets or sets the value whether the value of the editing control has changed or not
            </summary>
            <value>The <see cref="T:System.Boolean"/> value whether the value of the editing control has changed or not.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonEditingControl.EditingPanelCursor">
            <summary>
            Gets the cursor that must be used for the editing panel,
            i.e. the parent of the editing control.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.Cursor"/> which must be used for the editing panel.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewFontButtonEditingControl.RepositionEditingControlOnValueChange">
            <summary>
            Gets the property which indicates whether the editing control needs to be repositioned 
            when its value changes. Returns always false.
            </summary>
            <value>The <see cref="T:System.Boolean"/> value whether the editing control needs to be repositioned.</value>
        </member>
        <member name="T:OgamaControls.PositionButton">
            <summary>
            Position button is a specialized button for a position selection.
            OnClick it opens a stimulus screen proportional panel of type <see cref="T:OgamaControls.PositionSelector"/> on which
            the user can select a screen position and it will be recalculated in
            stimuli screen coordinates. 
            </summary>
        </member>
        <member name="F:OgamaControls.PositionButton._position">
            <summary>
            The position in stimulus screen coordinates.
            </summary>
        </member>
        <member name="F:OgamaControls.PositionButton._stimulusScreenSize">
            <summary>
            The stimulus screen size.
            </summary>
        </member>
        <member name="F:OgamaControls.PositionButton._alignment">
            <summary>
            Horizontal alignment of object at given position
            </summary>
        </member>
        <member name="M:OgamaControls.PositionButton.#ctor">
            <summary>
            Constructor. Initializes fields.
            </summary>
        </member>
        <member name="M:OgamaControls.PositionButton.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Component constructor.Initializes fields.
            </summary>
            <param name="container">owning container.</param>
        </member>
        <member name="M:OgamaControls.PositionButton.InitializeCustomComponents">
            <summary>
            Initialize fields with standard values.
            </summary>
        </member>
        <member name="M:OgamaControls.PositionButton.PositionButton_Click(System.Object,System.EventArgs)">
            <summary>
            OnClick event handler. Initializes the <see cref="T:OgamaControls.PositionSelector"/>
            and shows it.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PositionButton.PositionButton_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaint event handler. Draws a small triangle on the right of the button
            to show the possibility to drop down a selection control.
            </summary>
            <param name="sender"></param>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.PositionButton.OnPositionChanged(System.EventArgs)">
            <summary>
            OnPositionChanged event handler. Raises delegate. 
            Notifys listeners that position value has changed.
            </summary>
            <param name="e">Empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="F:OgamaControls.PositionButton.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.PositionButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.PositionButton.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.PositionButton.PositionChanged">
            <summary>
            Event. Raised, when the position has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.PositionButton.CurrentPosition">
            <summary>
            Gets or sets the current position value of the button.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> with the new position value.</value>
        </member>
        <member name="P:OgamaControls.PositionButton.StimulusScreenSize">
            <summary>
            Gets or set the stimulus screen size
            </summary>
            <remarks>Used to size the position control correctly.</remarks>
            <value>A <see cref="T:System.Drawing.Size"/> with the stimulus screen size.</value>
        </member>
        <member name="P:OgamaControls.PositionButton.Alignment">
            <summary>
            Horizontal text alignment for text at position value.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.HorizontalAlignment"/> with the new alignment of the text.</value>
        </member>
        <member name="T:OgamaControls.DataGridViewColorButtonCell">
            <summary>
            Defines a <strong>ColorButton</strong> cell type for the <see cref="T:System.Windows.Forms.DataGridView"/> control
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewColorButtonCell.DataGridViewColorButton_defaultColor">
            <summary>
            Default value of the color property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewColorButtonCell.defaultEditType">
            <summary>
            Type of this cell's editing control
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewColorButtonCell.defaultValueType">
            <summary>
            Type of this cell's value. The formatted value type is string, 
            the same as the base class DataGridViewTextBoxCell
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewColorButtonCell._currentColor">
            <summary>
            Caches the value of the <see cref="P:OgamaControls.DataGridViewColorButtonCell.ButtonColor"/> property
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.#ctor">
            <summary>
            Constructor for the <strong>DataGridViewColorButton</strong> cell type
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.Clone">
            <summary>
            Overridden. Creates an exact copy of this cell. 
            </summary>
            <returns>An <see cref="T:System.Object"/> that represents the cloned <see cref="T:OgamaControls.DataGridViewColorButtonCell"/>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.GetErrorIconBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            Customized implementation of the GetErrorIconBounds function in order to draw the potential 
            error icon next to the down button and not on top of them.
            Returns the bounding rectangle that encloses the cell's error icon, if one is displayed. 
            </summary>
            <param name="graphics">The graphics context for the cell.</param>
            <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> to be applied to the cell.</param>
            <param name="rowIndex">The index of the cell's parent row.</param>
            <returns>The <see cref="T:System.Drawing.Rectangle"/> that bounds the cell's error icon, if one is displayed; otherwise, <see cref="T:System.Empty"/>. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Customized implementation of the GetFormattedValue function 
            in order to include the buttons color in the formatted
            representation of the cell value.
            </summary>
            <param name="value">The value to be formatted. </param>
            <param name="rowIndex">The index of the cell's parent row.</param>
            <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> in effect for the cell.</param>
            <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the value 
            type that provides custom conversion to the formatted value type, 
            or a null reference (Nothing in Visual Basic) if no such custom conversion is needed.</param>
            <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the 
            formatted value type that provides custom conversion from the value type,
            or a null reference (Nothing in Visual Basic) if no such custom conversion is needed.</param>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values 
            describing the context in which the formatted value is needed.</param>
            <returns>The formatted value of the cell or a null reference (Nothing in Visual Basic) if the cell does not belong to a <see cref="T:System.Windows.Forms.DataGridView"/> control.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)">
            <summary>
            Custom implementation of the GetPreferredSize function. 
            This implementation uses the preferred size of the base 
            <see cref="T:System.Windows.Forms.DataGridViewTextBoxCell"/> cell and adds room for the down button.
            Calculates the preferred size, in pixels, of the cell. 
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> used to draw the cell.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that represents the style of the cell.</param>
            <param name="rowIndex">The zero-based row index of the cell.</param>
            <param name="constraintSize">The cell's maximum allowable size.</param>
            <returns>A <see cref="T:System.Drawing.Size"/> that represents the preferred size, in pixels, of the cell. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Custom implementation of the <see cref="M:OgamaControls.DataGridViewColorButtonCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)"/> function. 
            This function is called by the <see cref="T:System.Windows.Forms.DataGridView"/> control 
            at the beginning of an editing session. It makes sure 
            that the properties of the <see cref="T:OgamaControls.ColorButton"/> editing control are 
            set according to the cell properties.
            </summary>
            <param name="rowIndex">The zero-based row index of the cell.</param>
            <param name="initialFormattedValue">An <see cref="T:System.Object"/> that represents the value displayed by the cell when editing is started.</param>
            <param name="dataGridViewCellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that represents the style of the cell.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Custom paints the cell. The base implementation of the DataGridViewTextBoxCell type is called first,
            dropping the icon error and content foreground parts. Those two parts are painted by this custom implementation.
            In this sample, the non-edited ColorButton control is painted by hand.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> used to paint the <see cref="T:System.Windows.Forms.DataGridViewCell"/>.</param>
            <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle"/> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView"/> that needs to be repainted.</param>
            <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle"/> that contains the bounds of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="rowIndex">The row index of the cell that is being painted.</param>
            <param name="cellState">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates"/> values that specifies the state of the cell.</param>
            <param name="value">The data of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="formattedValue">The formatted data of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="errorText">An error message that is associated with the cell.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that contains formatting and style information about the cell.</param>
            <param name="advancedBorderStyle">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle"/> that contains border styles for the cell that is being painted.</param>
            <param name="paintParts">A bitwise combination of the <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> values that specifies which parts of the cell need to be painted.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Custom implementation of the <see cref="M:OgamaControls.DataGridViewColorButtonCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> 
            method called by the <see cref="T:System.Windows.Forms.DataGridView"/> control when it
            needs to relocate and/or resize the editing control.
            </summary>
            <param name="setLocation"><strong>true</strong> to have the control placed as 
            specified by the other arguments; <strong>false</strong> to allow the control to place itself.</param>
            <param name="setSize"><strong>true</strong> to specify the size; 
            <strong>false</strong> to allow the control to size itself. </param>
            <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle"/> that defines the cell bounds. </param>
            <param name="cellClip">The area that will be used to paint the editing control.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that represents the style of the cell being edited.</param>
            <param name="singleVerticalBorderAdded"><strong>true</strong> to add a vertical border to the cell; 
            otherwise, <strong>false</strong>.</param>
            <param name="singleHorizontalBorderAdded"><strong>true</strong> to add a horizontal border to the cell;
            otherwise, <strong>false</strong>.</param>
            <param name="isFirstDisplayedColumn"><strong>true</strong> if the hosting cell is in 
            the first visible column; otherwise, <strong>false</strong>.</param>
            <param name="isFirstDisplayedRow"><strong>true</strong> if the hosting cell is in 
            the first visible row; otherwise, <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.ToString">
            <summary>
            Returns a string that describes the current object. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current object. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.GetAdjustedEditingControlBounds(System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Adjusts the location and size of the editing control given 
            the alignment characteristics of the cell
            </summary>
            <param name="editingControlBounds">A <see cref="T:System.Drawing.Rectangle"/> with the editing controls bounds.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> enumeration member.</param>
            <returns>An adjusted bounding <see cref="T:System.Drawing.Rectangle"/> for the Editing Control</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.OnCommonChange">
            <summary>
            Called when a cell characteristic that affects its rendering and/or preferred size has changed.
            This implementation only takes care of repainting the cells. The DataGridView's autosizing methods
            also need to be called in cases where some grid elements autosize.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
            Utility function that sets a new value for the Color property of the cell. 
            Row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The row index of the cell.</param>
            <param name="value">color to set</param>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.OwnsEditingColorButton(System.Int32)">
            <summary>
            Determines whether this cell, at the given row index, shows the grid's editing control or not.
            The row index needs to be provided as a parameter because this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The row index of the cell.</param>
            <returns><strong>True</strong>, if this cell, at the given row index, shows the grid's editing control.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonCell.PartPainted(System.Windows.Forms.DataGridViewPaintParts,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Little utility function called by the Paint function to see if a particular part needs to be painted. 
            </summary>
            <param name="paintParts">The whole <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> object in the paint control</param>
            <param name="paintPart">The teste <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> enumeration member.</param>
            <returns><strong>True</strong>, if the particular part needs to be painted.</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonCell.ButtonColor">
            <summary>
            The <strong>ButtonColor</strong> property replicates the one from the <strong>ColorButton</strong> control
            Gets or sets the buttons color.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the button.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonCell.EditingColorButton">
            <summary>
            Returns the current <see cref="T:System.Windows.Forms.IDataGridViewEditingControl"/> as a <see cref="T:OgamaControls.DataGridViewColorButtonEditingControl"/> control
            </summary>
            <value>A <see cref="T:OgamaControls.DataGridViewColorButtonEditingControl"/> that is currently active.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonCell.EditType">
            <summary>
            Overridden. Define the type of the cell's editing control
            </summary>
            <value>A <see cref="T:System.Type"/> representing the <see cref="T:OgamaControls.DataGridViewColorButtonEditingControl"/> type.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonCell.ValueType">
            <summary>
            Overridden. Gets the data type of the values in the cell. 
            </summary>
            <value>A <see cref="T:System.Type"/> representing the data type of the value in the cell. </value>
        </member>
        <member name="T:OgamaControls.DataGridViewColorButtonColumn">
            <summary>
            Custom column type dedicated to the <see cref="T:OgamaControls.DataGridViewColorButtonCell"/> cell type.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonColumn.#ctor">
            <summary>
            Constructor for the DataGridViewColorButtonColumn class.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonColumn.ToString">
            <summary>
            Returns a standard compact string representation of the column.
            </summary>
            <returns>A <see cref="T:System.String"/> with the compact string representation of the column.</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonColumn.CellTemplate">
            <summary>
            Represents the implicit cell that gets cloned when adding rows to the grid.
            Gets or sets the template used to create new cells. 
            </summary>
            <value>A <see cref="T:System.Windows.Forms.DataGridViewCell"/> that all other cells in the column are modeled after. 
            The default is a null reference (Nothing in Visual Basic). </value>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonColumn.ButtonColor">
            <summary>
            Replicates the <see cref="T:System.Drawing.Color"/> property of the <see cref="T:OgamaControls.DataGridViewNumericUpDownCell"/> cell type.
            Gets or sets the color for all button cells in the column.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> of the button cell</value>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonColumn.ColorButtonCellTemplate">
            <summary>
            Small utility function that returns the template cell as a <see cref="T:OgamaControls.DataGridViewColorButtonCell"/>
            </summary>
            <value>A <see cref="T:OgamaControls.DataGridViewColorButtonCell"/> template.</value>
        </member>
        <member name="T:OgamaControls.DataGridViewColorButtonEditingControl">
            <summary>
            Defines the editing control for the <see cref="T:OgamaControls.DataGridViewColorButtonCell"/> custom cell type.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewColorButtonEditingControl.dataGridView">
            <summary>
            The grid that owns this editing control
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewColorButtonEditingControl.valueChanged">
            <summary>
            Stores whether the editing control's value has changed or not
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewColorButtonEditingControl.rowIndex">
            <summary>
            Stores the row index in which the editing control resides
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonEditingControl.#ctor">
            <summary>
            Constructor of the editing control class
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonEditingControl.OnColorChanged(System.EventArgs)">
            <summary>
            Listen to the OnColorChanged notification to forward the change to the grid.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Method called by the grid before the editing control is shown so it can adapt to the 
            provided cell style.
            Changes the control's user interface (UI) to be consistent with the specified cell style.
            </summary>
            <param name="dataGridViewCellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> to use 
            as the model for the UI.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>Determines whether the specified key is a regular 
            input key that the editing control should process or a special 
            key that the <see cref="T:System.Windows.Forms.DataGridView"/> should process.
            </summary>
            <param name="keyData">A <see cref="T:System.Windows.Forms.Keys"/> that represents the key that was pressed.</param>
            <param name="dataGridViewWantsInputKey"><strong>true</strong> when the <see cref="T:System.Windows.Forms.DataGridView"/> 
            wants to process the <see cref="T:System.Windows.Forms.Keys"/> in keyData; otherwise, <strong>false</strong>.</param>
            <returns><strong>true</strong> if the specified key is a regular input key that should be 
            handled by the editing control; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Retrieves the formatted value of the cell. 
            </summary>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values 
            that specifies the context in which the data is needed.</param>
            <returns>An <see cref="T:System.Object"/> that represents the formatted version of the cell contents. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonEditingControl.PrepareEditingControlForEdit(System.Boolean)">
            <summary>
            Called by the grid to give the editing control a chance to prepare itself for
            the editing session.
            </summary>
            <param name="selectAll"><strong>true</strong> to select all of the cell's 
            content; otherwise, <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewColorButtonEditingControl.NotifyDataGridViewOfValueChange">
            <summary>
            Small utility function that updates the local dirty state and 
            notifies the grid of the value change.
            </summary>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonEditingControl.EditingControlDataGridView">
            <summary>
            Gets or sets the grid that uses this editing control
            </summary>
            <value>The <see cref="T:System.Windows.Forms.DataGridView"/> that owns this Editing Control</value>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonEditingControl.EditingControlFormattedValue">
            <summary>
            Gets or set the current formatted value of the editing control
            </summary>
            <value>The <see cref="T:System.Object"/> that represents the current formatted value of the editing control.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonEditingControl.EditingControlRowIndex">
            <summary>
            Gets or sets the the row in which the editing control resides
            </summary>
            <value>The <see cref="T:System.Int32"/> that is the row index in which the editing control resides</value>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonEditingControl.EditingControlValueChanged">
            <summary>
            Gets or sets the value whether the value of the editing control has changed or not
            </summary>
            <value>The <see cref="T:System.Boolean"/> value whether the value of the editing control has changed or not.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonEditingControl.EditingPanelCursor">
            <summary>
            Gets the cursor that must be used for the editing panel,
            i.e. the parent of the editing control.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.Cursor"/> which must be used for the editing panel.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewColorButtonEditingControl.RepositionEditingControlOnValueChange">
            <summary>
            Gets the property which indicates whether the editing control needs to be repositioned 
            when its value changes. Returns always false.
            </summary>
            <value>The <see cref="T:System.Boolean"/> value whether the editing control needs to be repositioned.</value>
        </member>
        <member name="T:OgamaControls.DataGridViewNumericUpDownCell">
            <summary>
            Defines a <see cref="T:System.Windows.Forms.NumericUpDown"/> cell type for the <see cref="T:System.Windows.Forms.DataGridView"/> control
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.DATAGRIDVIEWNUMERICUPDOWNCELL_defaultRenderingBitmapWidth">
            <summary>
            Default Width of the static rendering bitmap used for the painting of the non-edited cells
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.DATAGRIDVIEWNUMERICUPDOWNCELL_defaultRenderingBitmapHeight">
            <summary>
            Default height of the static rendering bitmap used for the painting of the non-edited cells
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.DATAGRIDVIEWNUMERICUPDOWNCELL_defaultValue">
            <summary>
            Default value of the DefaultValue property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.DATAGRIDVIEWNUMERICUPDOWNCELL_defaultDecimalPlaces">
            <summary>
            Default value of the DecimalPlaces property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.DATAGRIDVIEWNUMERICUPDOWNCELL_defaultIncrement">
            <summary>
            Default value of the Increment property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.DATAGRIDVIEWNUMERICUPDOWNCELL_defaultMaximum">
            <summary>
            Default value of the Maximum property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.DATAGRIDVIEWNUMERICUPDOWNCELL_defaultMinimum">
            <summary>
            Default value of the Minimum property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.DATAGRIDVIEWNUMERICUPDOWNCELL_defaultThousandsSeparator">
            <summary>
            Default value of the ThousandsSeparator property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.anyRight">
            <summary>
            Used in <see cref="M:OgamaControls.DataGridViewNumericUpDownCell.TranslateAlignment(System.Windows.Forms.DataGridViewContentAlignment)"/> function
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.anyCenter">
            <summary>
            Used in <see cref="M:OgamaControls.DataGridViewNumericUpDownCell.TranslateAlignment(System.Windows.Forms.DataGridViewContentAlignment)"/> function
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.defaultEditType">
            <summary>
            Type of this cell's editing control
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.defaultValueType">
            <summary>
            Type of this cell's value. The formatted value type is string, 
            the same as the base class <see cref="T:System.Windows.Forms.DataGridViewTextBoxCell"/>
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.renderingBitmap">
            <summary>
            The bitmap used to paint the non-edited cells via a 
            call to <see cref="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)"/>
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.paintingNumericUpDown">
            <summary>
            The NumericUpDown control used to paint the non-edited 
            cells via a call to <see cref="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)"/>
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.decimalPlaces">
            <summary>
            Caches the value of the DecimalPlaces property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.increment">
            <summary>
            Caches the value of the Increment property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.minimum">
            <summary>
            Caches the value of the Minimum property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.maximum">
            <summary>
            Caches the value of the Maximum property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.thousandsSeparator">
            <summary>
            Caches the value of the ThousandsSeparator property
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownCell.defaultValue">
            <summary>
            Default value of the cell.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.#ctor">
            <summary>
            Constructor for the <see cref="T:OgamaControls.DataGridViewNumericUpDownCell"/> cell type
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.Clone">
            <summary>
            Overridden. Creates an exact copy of this cell. 
            </summary>
            <returns>An <see cref="T:System.Object"/> that represents the 
            cloned <see cref="T:OgamaControls.DataGridViewNumericUpDownCell"/>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.DetachEditingControl">
            <summary>
            DetachEditingControl gets called by the DataGridView control 
            when the editing session is ending.
            Removes the cell's editing control from the DataGridView.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.GetErrorIconBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            Customized implementation of the GetErrorIconBounds function in order to draw the potential 
            error icon next to the up/down buttons and not on top of them.
            Returns the bounding rectangle that encloses the cell's error icon, if one is displayed. 
            </summary>
            <param name="graphics">The graphics context for the cell.</param>
            <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> to be applied to the cell.</param>
            <param name="rowIndex">The index of the cell's parent row.</param>
            <returns>The <see cref="T:System.Drawing.Rectangle"/> that bounds the cell's error icon, if one is displayed; otherwise, <see cref="T:System.Empty"/>. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Customized implementation of the GetFormattedValue function
            in order to include the decimal and thousand separator
            characters in the formatted representation of the cell value.
            </summary>
            <param name="value">The value to be formatted. </param>
            <param name="rowIndex">The index of the cell's parent row.</param>
            <param name="cellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> in effect for the cell.</param>
            <param name="valueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the value 
            type that provides custom conversion to the formatted value type, 
            or a null reference (Nothing in Visual Basic) if no such custom conversion is needed.</param>
            <param name="formattedValueTypeConverter">A <see cref="T:System.ComponentModel.TypeConverter"/> associated with the 
            formatted value type that provides custom conversion from the value type,
            or a null reference (Nothing in Visual Basic) if no such custom conversion is needed.</param>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values 
            describing the context in which the formatted value is needed.</param>
            <returns>The formatted value of the cell or a null reference (Nothing in Visual Basic) if the cell does not belong to a <see cref="T:System.Windows.Forms.DataGridView"/> control.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)">
            <summary>
            Custom implementation of the GetPreferredSize function. 
            This implementation uses the preferred size of the base 
            DataGridViewTextBoxCell cell and adds room for the up/down buttons.
            Calculates the preferred size, in pixels, of the cell. 
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> used to draw the cell.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that represents the style of the cell.</param>
            <param name="rowIndex">The zero-based row index of the cell.</param>
            <param name="constraintSize">The cell's maximum allowable size.</param>
            <returns>A <see cref="T:System.Drawing.Size"/> that represents the preferred size, in pixels, of the cell. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Custom implementation of the InitializeEditingControl function. 
            This function is called by the DataGridView control 
            at the beginning of an editing session. It makes sure that 
            the properties of the NumericUpDown editing control are 
            set according to the cell properties.
            </summary>
            <param name="rowIndex">The zero-based row index of the cell.</param>
            <param name="initialFormattedValue">An <see cref="T:System.Object"/> that represents the value displayed by the cell when editing is started.</param>
            <param name="dataGridViewCellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that represents the style of the cell.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.KeyEntersEditMode(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Custom implementation of the KeyEntersEditMode function. 
            This function is called by the DataGridView control
            to decide whether a keystroke must start an editing session or not. 
            In this case, a new session is started when
            a digit or negative sign key is hit.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that represents the key that was pressed.</param>
            <returns><strong>true</strong> if edit mode should be started; 
            otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Custom paints the cell. The base implementation of the 
            DataGridViewTextBoxCell type is called first,
            dropping the icon error and content foreground parts. 
            Those two parts are painted by this custom implementation.
            In this sample, the non-edited NumericUpDown control is 
            painted by using a call to Control.DrawToBitmap. This is
            an easy solution for painting controls but it's not necessarily 
            the most performant. An alternative would be to paint
            the NumericUpDown control piece by piece (text and up/down buttons).
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> used to paint the <see cref="T:System.Windows.Forms.DataGridViewCell"/>.</param>
            <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle"/> that represents the area of the <see cref="T:System.Windows.Forms.DataGridView"/> that needs to be repainted.</param>
            <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle"/> that contains the bounds of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="rowIndex">The row index of the cell that is being painted.</param>
            <param name="cellState">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewElementStates"/> values that specifies the state of the cell.</param>
            <param name="value">The data of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="formattedValue">The formatted data of the <see cref="T:System.Windows.Forms.DataGridViewCell"/> that is being painted.</param>
            <param name="errorText">An error message that is associated with the cell.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that contains formatting and style information about the cell.</param>
            <param name="advancedBorderStyle">A <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle"/> that contains border styles for the cell that is being painted.</param>
            <param name="paintParts">A bitwise combination of the <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> values that specifies which parts of the cell need to be painted.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Custom implementation of the PositionEditingControl method called 
            by the <see cref="T:System.Windows.Forms.DataGridView"/> control when it
            needs to relocate and/or resize the editing control.
            </summary>
            <param name="setLocation"><strong>true</strong> to have the control placed as 
            specified by the other arguments; <strong>false</strong> to allow the control to place itself.</param>
            <param name="setSize"><strong>true</strong> to specify the size; 
            <strong>false</strong> to allow the control to size itself. </param>
            <param name="cellBounds">A <see cref="T:System.Drawing.Rectangle"/> that defines the cell bounds. </param>
            <param name="cellClip">The area that will be used to paint the editing control.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> that represents the style of the cell being edited.</param>
            <param name="singleVerticalBorderAdded"><strong>true</strong> to add a vertical border to the cell; 
            otherwise, <strong>false</strong>.</param>
            <param name="singleHorizontalBorderAdded"><strong>true</strong> to add a horizontal border to the cell;
            otherwise, <strong>false</strong>.</param>
            <param name="isFirstDisplayedColumn"><strong>true</strong> if the hosting cell is in 
            the first visible column; otherwise, <strong>false</strong>.</param>
            <param name="isFirstDisplayedRow"><strong>true</strong> if the hosting cell is in 
            the first visible row; otherwise, <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.ToString">
            <summary>
            Returns a string that describes the current object. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current object. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.Constrain(System.Decimal)">
            <summary>
            Returns the provided value constrained to be within the min and max. 
            </summary>
            <param name="value">value to constrain</param>
            <returns>A <see cref="T:System.Decimal"/> with the constrained value.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.GetAdjustedEditingControlBounds(System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Adjusts the location and size of the editing control given 
            the alignment characteristics of the cell
            </summary>
            <param name="editingControlBounds">A <see cref="T:System.Drawing.Rectangle"/> with the editing controls bounds.</param>
            <param name="cellStyle">A <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> enumeration member.</param>
            <returns>An adjusted bounding <see cref="T:System.Drawing.Rectangle"/> for the Editing Control</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.OnCommonChange">
            <summary>
            Called when a cell characteristic that affects its rendering and/or preferred size has changed.
            This implementation only takes care of repainting the cells. The DataGridView's autosizing methods
            also need to be called in cases where some grid elements autosize.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.SetDecimalPlaces(System.Int32,System.Int32)">
            <summary>
            Utility function that sets a new value for the DecimalPlaces property of the cell. This function is used by
            the cell and column DecimalPlaces property. The column uses this method instead of the DecimalPlaces
            property for performance reasons. This way the column can invalidate the entire column at once instead of 
            invalidating each cell of the column individually. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The zero-based row index of the cell's location.</param>
            <param name="value">A <see cref="T:System.Int32"/> decimal places value</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.SetDefaultValue(System.Int32,System.Int32)">
            <summary>
            Utility function that sets a new value for the DecimalPlaces property of the cell. This function is used by
            the cell and column DecimalPlaces property. The column uses this method instead of the DecimalPlaces
            property for performance reasons. This way the column can invalidate the entire column at once instead of 
            invalidating each cell of the column individually. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The zero-based row index of the cell's location.</param>
            <param name="value">The <see cref="T:System.Int32"/> new default value.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.SetIncrement(System.Int32,System.Decimal)">
            <summary>
            Utility function that sets a new value for the Increment property of the cell. This function is used by
            the cell and column Increment property. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The zero-based row index of the cell's location.</param>
            <param name="value">A <see cref="T:System.Decimal"/> value of the new increment.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.SetMaximum(System.Int32,System.Decimal)">
            <summary>
            Utility function that sets a new value for the Maximum property of the cell. This function is used by
            the cell and column Maximum property. The column uses this method instead of the Maximum
            property for performance reasons. This way the column can invalidate the entire column at once instead of 
            invalidating each cell of the column individually. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The zero-based row index of the cell's location.</param>
            <param name="value">A <see cref="T:System.Decimal"/> value of the maximum to set.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.SetMinimum(System.Int32,System.Decimal)">
            <summary>
            Utility function that sets a new value for the Minimum property of the cell. This function is used by
            the cell and column Minimum property. The column uses this method instead of the Minimum
            property for performance reasons. This way the column can invalidate the entire column at once instead of 
            invalidating each cell of the column individually. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The zero-based row index of the cell's location.</param>
            <param name="value">A <see cref="T:System.Decimal"/> value of the minimum to set.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.SetThousandsSeparator(System.Int32,System.Boolean)">
            <summary>
            Utility function that sets a new value for the ThousandsSeparator property of the cell. This function is used by
            the cell and column ThousandsSeparator property. The column uses this method instead of the ThousandsSeparator
            property for performance reasons. This way the column can invalidate the entire column at once instead of 
            invalidating each cell of the column individually. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The zero-based row index of the cell's location.</param>
            <param name="value">The <see cref="T:System.Boolean"/> value wheter to use a separator.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.OwnsEditingNumericUpDown(System.Int32)">
            <summary>
            Determines whether this cell, at the given row index, shows the grid's editing control or not.
            The row index needs to be provided as a parameter because this cell may be shared among multiple rows.
            </summary>
            <param name="rowIndex">The row index of the cell.</param>
            <returns><strong>True</strong>, if this cell, at the given row index, shows the grid's editing control.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.PartPainted(System.Windows.Forms.DataGridViewPaintParts,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Little utility function called by the Paint function to see if a particular part needs to be painted. 
            </summary>
            <param name="paintParts">The whole <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> object in the paint control</param>
            <param name="paintPart">The teste <see cref="T:System.Windows.Forms.DataGridViewPaintParts"/> enumeration member.</param>
            <returns><strong>True</strong>, if the particular part needs to be painted.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownCell.TranslateAlignment(System.Windows.Forms.DataGridViewContentAlignment)">
            <summary>
            Little utility function used by both the cell and column types to translate
            a <see cref="T:System.Windows.Forms.DataGridViewContentAlignment"/> value into
            a <see cref="T:System.Windows.Forms.HorizontalAlignment"/> value.
            </summary>
            <param name="align">The <see cref="T:System.Windows.Forms.DataGridViewContentAlignment"/> object that should be converted</param>
            <returns>The <see cref="T:System.Windows.Forms.HorizontalAlignment"/> that represents the <see cref="T:System.Windows.Forms.DataGridViewContentAlignment"/> best.</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownCell.DecimalPlaces">
            <summary>
            The DecimalPlaces property replicates the one from the <see cref="T:System.Windows.Forms.NumericUpDown"/> control.
            </summary>
            <value>The number of decimal places to display in the spin box. The default is 0.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownCell.EditingNumericUpDown">
            <summary>
            Returns the current DataGridView EditingControl as a 
            DataGridViewNumericUpDownEditingControl control
            </summary>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownCell.EditType">
            <summary>
            Overridden. Define the type of the cell's editing control
            </summary>
            <value>A <see cref="T:System.Type"/> representing the <see cref="T:OgamaControls.DataGridViewNumericUpDownEditingControl"/> type.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownCell.DefaultValue">
            <summary>
            Gets or sets default value if the numeric up down cell.
            </summary>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownCell.Increment">
            <summary>
            Gets or sets the value to increment or decrement the spin box 
            (also known as an up-down control) when the up or down buttons are clicked.
            </summary>
            <value>The value to increment or decrement the value property when the up or 
            down buttons are clicked on the spin box. The default value is 1. </value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownCell.Maximum">
            <summary>
            Gets or sets the maximum value for the spin box (also known as an up-down control).
            </summary>
            <value>The maximum value for the spin box. The default value is 100. </value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownCell.Minimum">
            <summary>
            Gets or sets the minimum allowed value for the spin box 
            (also known as an up-down control). 
            </summary>
            <value>The minimum allowed value for the spin box. 
            The default value is 0.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownCell.ThousandsSeparator">
            <summary>
            Gets or sets a value indicating whether a thousands separator 
            is displayed in the spin box (also known as an up-down control) when appropriate.
            </summary>
            <value><strong>true</strong> if a thousands separator is displayed in the spin 
            box when appropriate; otherwise, <strong>false</strong>. 
            The default value is <strong>false</strong>.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownCell.ValueType">
            <summary>
            Overridden. Gets or sets the data type of the values in the cell. 
            </summary>
            <value>A <see cref="T:System.Type"/> representing the data type of the value in the cell. </value>
        </member>
        <member name="T:OgamaControls.DataGridViewNumericUpDownColumn">
            <summary>
            Custom column type dedicated to the <see cref="T:OgamaControls.DataGridViewNumericUpDownCell"/> cell type.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownColumn.#ctor">
            <summary>
            Constructor for the DataGridViewNumericUpDownColumn class.
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownColumn.ToString">
            <summary>
            Returns a standard compact string representation of the column.
            </summary>
            <returns>A <see cref="T:System.String"/> with the compact string representation 
            of the column.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownColumn.ShouldSerializeIncrement">
            <summary>
            Indicates whether the Increment property should be persisted.
            </summary>
            <returns><strong>True</strong>, if it should be persisted.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownColumn.ShouldSerializeMinimum">
            <summary>
            Indicates whether the Minimum property should be persisted.
            </summary>
            <returns><strong>True</strong>, if it should be persisted.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownColumn.ShouldSerializeMaximum">
            <summary>
            Indicates whether the Maximum property should be persisted.
            </summary>
            <returns><strong>True</strong>, if it should be persisted.</returns>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownColumn.CellTemplate">
            <summary>
            Represents the implicit cell that gets cloned when adding rows to the grid.
            Gets or sets the template used to create new cells. 
            </summary>
            <value>A <see cref="T:System.Windows.Forms.DataGridViewCell"/> that all other cells in the column are modeled after. 
            The default is a null reference (Nothing in Visual Basic). </value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownColumn.DefaultValue">
            <summary>
            The Default value of the cells.
            </summary>
            <value>The <see cref="T:System.Int32"/> which should be set as default value.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownColumn.DecimalPlaces">
            <summary>
            Replicates the DecimalPlaces property of the DataGridViewNumericUpDownCell cell type.
            </summary>
            <value>A <see cref="T:System.Int32"/> with value for the number of decimal places.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownColumn.Increment">
            <summary>
            Replicates the Increment property of the DataGridViewNumericUpDownCell cell type.
            </summary>
            <value>A <see cref="T:System.Decimal"/> value for the amount to increment or decrement on each button click.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownColumn.Maximum">
            <summary>
            Replicates the Maximum property of the DataGridViewNumericUpDownCell cell type.
            </summary>
            <value>A <see cref="T:System.Decimal"/> value that indicates the maximum value 
            for the numeric up-down cells.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownColumn.Minimum">
            <summary>
            Replicates the Minimum property of the DataGridViewNumericUpDownCell cell type.
            </summary>
            <value>A <see cref="T:System.Decimal"/> value that indicates the minimum value 
            for the numeric up-down cells</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownColumn.ThousandsSeparator">
            <summary>
            Replicates the ThousandsSeparator property of the DataGridViewNumericUpDownCell cell type.
            </summary>
            <value>A <see cref="T:System.Boolean"/> that indicates whether the thousands
            separator will be inserted between every three decimal digits.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownColumn.NumericUpDownCellTemplate">
            <summary>
            Small utility function that returns the template cell as 
            a <see cref="T:OgamaControls.DataGridViewNumericUpDownCell"/>
            </summary>
            <value>A <see cref="T:OgamaControls.DataGridViewNumericUpDownCell"/> template.</value>
        </member>
        <member name="T:OgamaControls.DataGridViewNumericUpDownEditingControl">
            <summary>
            Defines the editing control for the <see cref="T:OgamaControls.DataGridViewNumericUpDownCell"/> custom cell type.
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownEditingControl.dataGridView">
            <summary>
            The grid that owns this editing control
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownEditingControl.valueChanged">
            <summary>
            Stores whether the editing control's value has changed or not
            </summary>
        </member>
        <member name="F:OgamaControls.DataGridViewNumericUpDownEditingControl.rowIndex">
            <summary>
            Stores the row index in which the editing control resides
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownEditingControl.#ctor">
            <summary>
            Constructor of the editing control class
            </summary>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownEditingControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Listen to the KeyPress notification to know when the value changed, and 
            notify the grid of the change.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownEditingControl.OnValueChanged(System.EventArgs)">
            <summary>
            Listen to the OnValueChanged notification to forward the change to the grid.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownEditingControl.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
            <summary>
            A few keyboard messages need to be forwarded to the inner textbox of the
            NumericUpDown control so that the first character pressed appears in it.
            </summary>
            <param name="m">A <see cref="T:System.Windows.Forms.Message"/> indicating the key that was pressed.</param>
            <returns><strong>true</strong> if the key event was handled by the editing control; 
            otherwise, <strong>false</strong>. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Method called by the grid before the editing control is shown so it can adapt to the 
            provided cell style.
            Changes the control's user interface (UI) to be consistent with the specified cell style.
            </summary>
            <param name="dataGridViewCellStyle">The <see cref="T:System.Windows.Forms.DataGridViewCellStyle"/> to use 
            as the model for the UI.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>Determines whether the specified key is a regular 
            input key that the editing control should process or a special 
            key that the <see cref="T:System.Windows.Forms.DataGridView"/> should process.
            </summary>
            <param name="keyData">A <see cref="T:System.Windows.Forms.Keys"/> that represents the key that was pressed.</param>
            <param name="dataGridViewWantsInputKey"><strong>true</strong> when the <see cref="T:System.Windows.Forms.DataGridView"/> 
            wants to process the <see cref="T:System.Windows.Forms.Keys"/> in keyData; otherwise, <strong>false</strong>.</param>
            <returns><strong>true</strong> if the specified key is a regular input key that should be 
            handled by the editing control; otherwise, <strong>false</strong>.</returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Retrieves the formatted value of the cell. 
            </summary>
            <param name="context">A bitwise combination of <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts"/> values 
            that specifies the context in which the data is needed.</param>
            <returns>An <see cref="T:System.Object"/> that represents the formatted version of the cell contents. </returns>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownEditingControl.PrepareEditingControlForEdit(System.Boolean)">
            <summary>
            Called by the grid to give the editing control a chance to prepare itself for
            the editing session.
            </summary>
            <param name="selectAll"><strong>true</strong> to select all of the cell's 
            content; otherwise, <strong>false</strong>.</param>
        </member>
        <member name="M:OgamaControls.DataGridViewNumericUpDownEditingControl.NotifyDataGridViewOfValueChange">
            <summary>
            Small utility function that updates the local dirty state and 
            notifies the grid of the value change.
            </summary>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownEditingControl.EditingControlDataGridView">
            <summary>
            Gets or sets the grid that uses this editing control
            </summary>
            <value>The <see cref="T:System.Windows.Forms.DataGridView"/> that owns this Editing Control</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownEditingControl.EditingControlFormattedValue">
            <summary>
            Gets or set the current formatted value of the editing control
            </summary>
            <value>The <see cref="T:System.Object"/> that represents the current formatted value of the editing control.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownEditingControl.EditingControlRowIndex">
            <summary>
            Gets or sets the the row in which the editing control resides
            </summary>
            <value>The <see cref="T:System.Int32"/> that is the row index in which the editing control resides</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownEditingControl.EditingControlValueChanged">
            <summary>
            Gets or sets the value whether the value of the editing control has changed or not
            </summary>
            <value>The <see cref="T:System.Boolean"/> value whether the value of the editing control has changed or not.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownEditingControl.EditingPanelCursor">
            <summary>
            Gets the cursor that must be used for the editing panel,
            i.e. the parent of the editing control.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.Cursor"/> which must be used for the editing panel.</value>
        </member>
        <member name="P:OgamaControls.DataGridViewNumericUpDownEditingControl.RepositionEditingControlOnValueChange">
            <summary>
            Gets the property which indicates whether the editing control needs to be repositioned 
            when its value changes. Returns always false.
            </summary>
            <value>The <see cref="T:System.Boolean"/> value whether the editing control needs to be repositioned.</value>
        </member>
        <member name="T:OgamaControls.ArrowButtonDirection">
            <summary>
            Direction of arrow button for the class <c>ArrowButton</c>
            </summary>
        </member>
        <member name="F:OgamaControls.ArrowButtonDirection.Left">
            <summary>
            arrow left direction
            </summary>
        </member>
        <member name="F:OgamaControls.ArrowButtonDirection.Right">
            <summary>
            arrow right direction
            </summary>
        </member>
        <member name="F:OgamaControls.ArrowButtonDirection.Up">
            <summary>
            arrow up direction
            </summary>
        </member>
        <member name="F:OgamaControls.ArrowButtonDirection.Down">
            <summary>
            arrown down direction
            </summary>
        </member>
        <member name="T:OgamaControls.ArrowButton">
            <summary>
            Simple button that has a graphical arrow on it
            </summary>
        </member>
        <member name="F:OgamaControls.ArrowButton.m_Direction">
            <summary>
            The direction of the arrow.
            </summary>
        </member>
        <member name="F:OgamaControls.ArrowButton.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.ArrowButton.#ctor">
            <summary>
            Constructor. Initializes designer components.
            </summary>
        </member>
        <member name="M:OgamaControls.ArrowButton.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if disposing</param>
        </member>
        <member name="M:OgamaControls.ArrowButton.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OgamaControls.ArrowButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw the arrow. You might be wondering why I didn't use AdjustableArrowCap from
            the .NET API. The width and height specified for that class didn't seem to have
            anything to do with pixels, and thus it was hard to use when a pixel region is
            given. After playing with the math and getting right arrows that were different
            from left arrows of the same size, I gave up and drew them myself.
            </summary>
            <param name="pe">PaintEventArgs</param>
        </member>
        <member name="P:OgamaControls.ArrowButton.Direction">
            <summary>
            Specifies the direction the arrow will point
            </summary>
        </member>
        <member name="T:OgamaControls.Dialogs.BrushStyleDlg">
            <summary>
            Dialog for selecting a cursor shape style.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.BrushStyleDlg.#ctor">
            <summary>
            Constructor. Initializes components and wires cursor changed event.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.BrushStyleDlg.OnBrushStyleChanged(VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs)">
            <summary>
            Raises the <see cref="E:OgamaControls.Dialogs.BrushStyleDlg.BrushStyleChanged"/> event by invoking the delegates.
            </summary>
            <param name="e"><see cref="T:VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs"/> event arguments</param>.
        </member>
        <member name="M:OgamaControls.Dialogs.BrushStyleDlg.brushSelectControl_BrushStyleChanged(System.Object,VectorGraphics.Tools.CustomEventArgs.BrushChangedEventArgs)">
            <summary>
            Wires the event from the underlying control to the listeners.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> with the new cursor.</param>
        </member>
        <member name="F:OgamaControls.Dialogs.BrushStyleDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.BrushStyleDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.Dialogs.BrushStyleDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.Dialogs.BrushStyleDlg.BrushStyleChanged">
            <summary>
            Event handler. Raised, when dialogs shape parameters has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.Dialogs.BrushStyleDlg.Brush">
            <summary>
            Sets the dialogs cursor property and that of the underlying control.
            </summary>
        </member>
        <member name="T:OgamaControls.User32">
            <summary>
            Helper class containing User32 API functions
            </summary>
        </member>
        <member name="F:OgamaControls.User32.LVM_FIRST">
            <summary>
            Needed constant for ListViewMessages
            </summary>
        </member>
        <member name="F:OgamaControls.User32.LVM_SETICONSPACING">
            <summary>
            A constant for icon spacing in list views.
            </summary>
        </member>
        <member name="M:OgamaControls.User32.VkKeyScan(System.Char)">
            <summary>
            The VkKeyScan function translates a character to the corresponding
            virtual-key code and shift state for the current keyboard.
            </summary>
            <remarks>Used in KeyEntersEditMode function</remarks>
            <param name="key">Specifies the character to be translated into a virtual-key code. </param>
            <returns>If the function succeeds, the low-order byte of the 
            return value contains the virtual-key code and the high-order 
            byte contains the shift state, which can be a combination of the 
            following flag bits. If the function finds no key that translates 
            to the passed character code, both the low-order and high-order bytes contain –1.
            </returns>
        </member>
        <member name="M:OgamaControls.User32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Needed to forward keyboard messages to the child TextBox control.
            </summary>
            <param name="hWnd">Handle of window to send the message to.</param>
            <param name="msg">Specifies the message to be sent.</param>
            <param name="wParam">Specifies additional message-dependent information.</param>
            <param name="lParam">Specifies additional message-dependent information.</param>
            <returns>The result of the message processing; its value depends on the message sent.</returns>
        </member>
        <member name="M:OgamaControls.User32.MsgWaitForMultipleObjects(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            The MsgWaitForMultipleObjects function returns when any one or 
            all of the specified objects are in the signaled state or 
            the time-out interval elapses. The objects can include input 
            event objects, which you specify using the dwWakeMask parameter.
            </summary>
            <param name="nCount">[in] Number of object handles in the array 
            pointed to by pHandles. The maximum number of object 
            handles is MAXIMUM_WAIT_OBJECTS minus one. </param>
            <param name="pHandles">[in] Pointer to an array of object
            handles. For a list of the object types whose handles can 
            be specified, see the following Remarks section. The array
            can contain handles of objects of different types. It may 
            not contain multiple copies of the same handle. 
            If one of these handles is closed while the wait is still 
            pending, the function's behavior is undefined.</param>
            <param name="bWaitAll">[in] If this parameter is TRUE, 
            the function returns when the states of all objects 
            in the pHandles array have been set to signaled and 
            an input event has been received. If this parameter 
            is FALSE, the function returns when the state of any one 
            of the objects is set to signaled or an input event has been 
            received. In this case, the return value indicates the object 
            whose state caused the function to return. </param>
            <param name="dwMilliseconds">[in] Time-out interval, in milliseconds. 
            The function returns if the interval elapses, even if the 
            criteria specified by the bWaitAll or dwWakeMask 
            parameter have not been met. If dwMilliseconds is 
            zero, the function tests the states of the specified 
            objects and returns immediately. If dwMilliseconds is 
            INFINITE, the function's time-out interval never elapses.</param>
            <param name="dwWakeMask">[in] Input types for which an input
            event object handle will be added to the array of object handles. </param>
            <returns>If the function succeeds, the return value indicates the 
            event that caused the function to return.</returns>
        </member>
        <member name="T:OgamaControls.Kernel32">
            <summary>
            This static class exposes methods from the Kernel32.dll to C#.
            </summary>
        </member>
        <member name="M:OgamaControls.Kernel32.CopyMemory(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            The CopyMemory function copies a block of memory from one location to another. 
            </summary>
            <param name="Destination">Pointer to the starting address of the copied block's destination.</param>
            <param name="Source">Pointer to the starting address of the block of memory to copy.</param>
            <param name="Length">Size of the block of memory to copy, in bytes.</param>
        </member>
        <member name="T:OgamaControls.AVPlayer">
            <summary>
            This <see cref="T:System.Windows.Forms.UserControl"/> encapsulates an DirectShow interface
            to play back videos.
            </summary>
        </member>
        <member name="M:OgamaControls.AVPlayer.#ctor">
            <summary>
            Initializes a new instance of the AVPlayer class.
            </summary>
        </member>
        <member name="M:OgamaControls.AVPlayer.LoadMovie(System.String)">
            <summary>
            This method loads a movie given by the parameter into
            this control and displays its first frame.
            If the filename is empty a file dialog is shown.
            </summary>
            <param name="filename">A <see cref="T:System.String"/> with the full filename of
            the movie to play.</param>
            <remarks>If another movie is already loaded it is closed before
            the new movie is loaded.</remarks>
        </member>
        <member name="M:OgamaControls.AVPlayer.CloseMovie">
            <summary>
            This method closes a currently loaded movie.
            </summary>
        </member>
        <member name="M:OgamaControls.AVPlayer.SeekMovie(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            This method seeks the movie to the given time position.
            The time has to be in units of the <see cref="T:DirectShowLib.IReferenceClock"/>.
            By default that are 100-nanosecond units.
            </summary>
            <param name="timeToStart">An <see cref="T:System.Int64"/> with the absolute start time to seek, 
            or null if the start time should not be set</param>
            <param name="timeToStop">An <see cref="T:System.Int64"/> with the absolute time at which the play should stop,
            or null if the stop time should not be set.</param>
            <remarks>If the timeToStop parameter is null, the stop time is set to the duration
            of the video.</remarks>
        </member>
        <member name="M:OgamaControls.AVPlayer.PlayMovie">
            <summary>
            This method starts the replay of an already loaded movie.
            If no movie is loaded before vie <see cref="M:OgamaControls.AVPlayer.LoadMovie(System.String)"/>
            this method does nothing.
            </summary>
        </member>
        <member name="M:OgamaControls.AVPlayer.StopMovie">
            <summary>
            This method stops a currently running movie.
            </summary>
        </member>
        <member name="M:OgamaControls.AVPlayer.PauseMovie">
            <summary>
            Pauses / unpauses clip according to state.
            </summary>
        </member>
        <member name="F:OgamaControls.AVPlayer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.AVPlayer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.AVPlayer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OgamaControls.AVPlayer.PlayState">
            <summary>
            Gets the current <see cref="P:OgamaControls.AVPlayer.PlayState"/>.
            </summary>
            <value>The current <see cref="P:OgamaControls.AVPlayer.PlayState"/> of the movie</value>
        </member>
        <member name="P:OgamaControls.AVPlayer.MovieFile">
            <summary>
            Gets the filename with path to the currently loaded movie file.
            </summary>
            <value>A <see cref="T:System.String"/> with the currently loaded movie file.</value>
        </member>
        <member name="P:OgamaControls.AVPlayer.PlaybackRate">
            <summary>
            Gets or sets the current playback rate of the video.
            </summary>
            <value>A <see cref="T:System.Double"/> with the playback rate. Must not be zero.</value>
        </member>
        <member name="P:OgamaControls.AVPlayer.VideoSize">
            <summary>
            Gets the native <see cref="T:System.Drawing.Size"/> of the video stream.
            </summary>
        </member>
        <member name="P:OgamaControls.AVPlayer.Screenshot">
            <summary>
            Gets a <see cref="T:System.Drawing.Bitmap"/> with a screenshot of
            the current video renderer output.
            </summary>
        </member>
        <member name="T:OgamaControls.AudioPlayer">
            <summary>
            This class encapsulates an DirectShow interface
            to play back audio files.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioPlayer.#ctor">
            <summary>
            Initializes a new instance of the AudioPlayer class.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioPlayer.LoadAudioFile(System.String)">
            <summary>
            This method loads a movie given by the parameter into
            this control and displays its first frame.
            If the filename is empty a file dialog is shown.
            </summary>
            <param name="filename">A <see cref="T:System.String"/> with the full filename of
            the movie to play.</param>
            <remarks>If another movie is already loaded it is closed before
            the new movie is loaded.</remarks>
        </member>
        <member name="M:OgamaControls.AudioPlayer.AddAudioChannel(System.String)">
            <summary>
            This method adds a new file to the output channel that is played
            in parallel to existing files in the direct show graph.
            </summary>
            <param name="filename">A <see cref="T:System.String"/> with the full filename of
            the audio file to play.</param>
        </member>
        <member name="M:OgamaControls.AudioPlayer.CloseAudioFile">
            <summary>
            This method closes a currently loaded movie.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioPlayer.Seek(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            This method seeks the movie to the given time position.
            The time has to be in units of the <see cref="T:DirectShowLib.IReferenceClock"/>.
            By default that are 100-nanosecond units.
            </summary>
            <param name="timeToStart">An <see cref="T:System.Int64"/> with the absolute start time to seek, 
            or null if the start time should not be set</param>
            <param name="timeToStop">An <see cref="T:System.Int64"/> with the absolute time at which the play should stop,
            or null if the stop time should not be set.</param>
            <remarks>If the timeToStop parameter is null, the stop time is set to the duration
            of the video.</remarks>
        </member>
        <member name="M:OgamaControls.AudioPlayer.Play">
            <summary>
            This method starts the replay of an already loaded movie.
            If no movie is loaded before vie <see cref="M:OgamaControls.AudioPlayer.LoadAudioFile(System.String)"/>
            this method does nothing.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioPlayer.Stop">
            <summary>
            This method stops a currently running movie.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioPlayer.EventWait">
            <summary>
            Called on a new thread to process events from the graph.  The thread
            exits when the graph finishes.  Cancelling is done here.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioPlayer.ChangeState(OgamaControls.PlayState)">
            <summary>
            Helps deal with potential conflicts between the eventing thread
            and client calls to Cancel()
            </summary>
            <param name="newState">State to change to</param>
        </member>
        <member name="M:OgamaControls.AudioPlayer.Pause">
            <summary>
            Pauses / unpauses clip according to state.
            </summary>
        </member>
        <member name="E:OgamaControls.AudioPlayer.Completed">
            <summary>
            Called when the graph has finished running.
            </summary>
            <remarks>
            The <see cref="T:OgamaControls.AudioPlayer.CompletedArgs"/>
            contains the result of running the graph (Completed, UserAborted,
            out of disk space, etc.)
            This code will be a member of DirectShowLib.EventCode.  Typically it 
            will be EventCode.Complete, EventCode.ErrorAbort or EventCode.UserAbort.
            </remarks>
        </member>
        <member name="P:OgamaControls.AudioPlayer.PlayState">
            <summary>
            Gets the current <see cref="P:OgamaControls.AudioPlayer.PlayState"/>.
            </summary>
            <value>The current <see cref="P:OgamaControls.AudioPlayer.PlayState"/> of the movie</value>
        </member>
        <member name="P:OgamaControls.AudioPlayer.AudioFile">
            <summary>
            Gets the filename with path to the currently loaded movie file.
            </summary>
            <value>A <see cref="T:System.String"/> with the currently loaded movie file.</value>
        </member>
        <member name="P:OgamaControls.AudioPlayer.PlaybackRate">
            <summary>
            Gets or sets the current playback rate of the video.
            </summary>
            <value>A <see cref="T:System.Double"/> with the playback rate. Must not be zero.</value>
        </member>
        <member name="P:OgamaControls.AudioPlayer.Duration">
            <summary>
            Gets the duration in milliseconds of the current loaded audiofile.
            </summary>
            <value>An <see cref="T:System.Int64"/> with the files duration in milliseconds.</value>
        </member>
        <member name="T:OgamaControls.AudioPlayer.CompletedArgs">
            <summary>Reports the event code that exited the graph.
            </summary>
            <remarks>Signals that all files have been rendered</remarks>
        </member>
        <member name="F:OgamaControls.AudioPlayer.CompletedArgs.Result">
            <summary>The result of the rendering</summary>
            <remarks>
            This code will be a member of DirectShowLib.EventCode.  Typically it 
            will be EventCode.Complete, EventCode.ErrorAbort or EventCode.UserAbort.
            </remarks>
        </member>
        <member name="M:OgamaControls.AudioPlayer.CompletedArgs.#ctor(DirectShowLib.EventCode)">
            <summary>
            Used to construct an instace of the class.
            </summary>
            <param name="ec"></param>
        </member>
        <member name="T:OgamaControls.PlayState">
            <summary>
            This enumeration describes the possible replay states
            of the <see cref="T:OgamaControls.AVPlayer"/> control.
            </summary>
        </member>
        <member name="F:OgamaControls.PlayState.None">
            <summary>
            No state set.
            </summary>
        </member>
        <member name="F:OgamaControls.PlayState.Stopped">
            <summary>
            The player ist stopped.
            </summary>
        </member>
        <member name="F:OgamaControls.PlayState.Paused">
            <summary>
            The replay is paused.
            </summary>
        </member>
        <member name="F:OgamaControls.PlayState.Running">
            <summary>
            The replay is running.
            </summary>
        </member>
        <member name="F:OgamaControls.PlayState.Init">
            <summary>
            The <see cref="T:OgamaControls.AVPlayer"/> is initializing.
            </summary>
        </member>
        <member name="F:OgamaControls.PlayState.Cancelling">
            <summary>
            The <see cref="T:OgamaControls.AVPlayer"/> is beeing cancelled.
            </summary>
        </member>
        <member name="F:OgamaControls.PlayState.Exiting">
            <summary>
            The <see cref="T:OgamaControls.AVPlayer"/> is exiting.
            </summary>
        </member>
        <member name="T:OgamaControls.VideoFramePusher">
            <summary>
            This class inherits <see cref="T:DirectShowLib.ISampleGrabberCB"/> and <see cref="T:System.IDisposable"/>
            to provide a sample callback function that raises an event whenever
            a new video frame is available.
            Connect to <see cref="E:OgamaControls.VideoFramePusher.VideoFrameAvailable"/> to retreive the bitmaps of 
            every frame.
            </summary>
        </member>
        <member name="F:OgamaControls.VideoFramePusher.m_videoWidth">
            <summary> Dimensions of the image, calculated once in constructor. </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.#ctor">
            <summary>
            Initializes a new instance of the VideoFramePusher class.
            </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.Dispose">
            <summary> release everything. </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.Start">
            <summary>
            Starts the capturing.
            </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.Stop">
            <summary>
            Stops the capturing
            </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.Pause">
            <summary>
            Pauses / unpauses clip according to state.
            </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.SetupGraph(System.String)">
            <summary> build the capture graph for grabber. </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.SaveSizeInfo(DirectShowLib.ISampleGrabber)">
            <summary> Read and store the properties </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.ConfigureSampleGrabber(DirectShowLib.ISampleGrabber)">
            <summary> Set the options on the sample grabber </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.CloseInterfaces">
            <summary> Shut down capture </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.ShowSampleAtMS(System.Int64)">
            <summary>
            This method seeks the movie to the given position
            and waits for the buffer callback function to 
            be done, then returns the new bitmap of the
            video at the seek position
            </summary>
            <param name="ms">A timestamp in milliseconds.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> with the snapshot
            of the video at the given millisecond.</returns>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.DirectShowLib#ISampleGrabberCB#SampleCB(System.Double,DirectShowLib.IMediaSample)">
            <summary> sample callback, NOT USED. </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.OnVideoFrameAvailable(OgamaControls.BitmapEventArgs)">
            <summary>
            This method raises the <see cref="E:OgamaControls.VideoFramePusher.VideoFrameAvailable"/> 
            event by invoking the delegates.
            </summary>
            <param name="e">A <see cref="T:OgamaControls.BitmapEventArgs"/> with the event data.</param>.
        </member>
        <member name="M:OgamaControls.VideoFramePusher.DirectShowLib#ISampleGrabberCB#BufferCB(System.Double,System.IntPtr,System.Int32)">
            <summary> buffer callback, COULD BE FROM FOREIGN THREAD. </summary>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.SeekMovie(System.Int64)">
            <summary>
            This method seeks the movie to the given time position.
            The time has to be in units of the <see cref="T:DirectShowLib.IReferenceClock"/>.
            By default that are 100-nanosecond units.
            </summary>
            <param name="timeToStart">An <see cref="T:System.Int64"/> with the absolute start time to seek</param>
        </member>
        <member name="M:OgamaControls.VideoFramePusher.LoadMovie(System.String)">
            <summary>
            Loads the given movie into the graph.
            </summary>
            <param name="videoFile">A <see cref="T:System.String"/> with full path to the
            video file.</param>
        </member>
        <member name="E:OgamaControls.VideoFramePusher.VideoFrameAvailable">
            <summary>
            This event is raised whenever a new video frame is available.
            </summary>
        </member>
        <member name="P:OgamaControls.VideoFramePusher.CapturedImage">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Bitmap"/> of the current captured image.
            </summary>
        </member>
        <member name="P:OgamaControls.VideoFramePusher.PlaybackRate">
            <summary>
            Gets or sets the current playback rate of the video.
            </summary>
            <value>A <see cref="T:System.Double"/> with the playback rate. Must not be zero.</value>
        </member>
        <member name="T:OgamaControls.BitmapEventHandler">
            <summary>
            Delegate. Handles bitmap occured event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:OgamaControls.BitmapEventArgs"/> with the bitmap</param>
        </member>
        <member name="T:OgamaControls.BitmapEventArgs">
            <summary>
            Derived from <see cref="T:System.EventArgs"/>
            Class that contains the data for the TrialEventOccured event. Derives from System.EventArgs.
            </summary>
        </member>
        <member name="F:OgamaControls.BitmapEventArgs.bitmap">
            <summary>
            The <see cref="P:OgamaControls.BitmapEventArgs.Bitmap"/> to be send.
            </summary>
        </member>
        <member name="M:OgamaControls.BitmapEventArgs.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the BitmapEventArgs class.
            </summary>
            <param name="newBitmap">A new available <see cref="P:OgamaControls.BitmapEventArgs.Bitmap"/>.</param>
        </member>
        <member name="P:OgamaControls.BitmapEventArgs.Bitmap">
            <summary>
            Gets the <see cref="P:OgamaControls.BitmapEventArgs.Bitmap"/>.
            </summary>
            <value>A new <see cref="P:OgamaControls.BitmapEventArgs.Bitmap"/>.</value>
        </member>
        <member name="T:OgamaControls.CaptureMode">
            <summary>
            The <strong>CaptureMode</strong> enumeration lists
            the available modes for capturing audio and video
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureMode.None">
            <summary>
            No capturing at all.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureMode.VideoPreview">
            <summary>
            Only preview of video stream.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureMode.VideoCapture">
            <summary>
            Capture the video stream.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureMode.Video">
            <summary>
            Preview and Capture the video stream
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureMode.AudioPrehear">
            <summary>
            Preview (Prehear) the audio stream.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureMode.AudioCapture">
            <summary>
            Capture the audio stream.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureMode.Audio">
            <summary>
            Prehear and capture the audio stream.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureMode.AudioVideoPreview">
            <summary>
            Preview video and audio stream.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureMode.AudioVideoCapture">
            <summary>
            Capture both video and audio stream into a file.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureMode.AudioVideo">
            <summary>
            Preview and capture audio and video stream.
            </summary>
        </member>
        <member name="T:OgamaControls.CaptureModeEventHandler">
            <summary>
            Delegate. Handles capture mode changed event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:OgamaControls.CaptureModeEventArgs"/>
            with <see cref="T:OgamaControls.CaptureMode"/> to send. </param>
        </member>
        <member name="T:OgamaControls.CaptureModeEventArgs">
            <summary>
            Derived from <see cref="T:System.EventArgs"/>
            Class that contains a <see cref="T:OgamaControls.CaptureMode"/> in its arguments
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureModeEventArgs.parameter">
            <summary>
            A custom CaptureMode to send.
            </summary>
        </member>
        <member name="M:OgamaControls.CaptureModeEventArgs.#ctor(OgamaControls.CaptureMode)">
            <summary>
            Initializes a new instance of the CaptureModeEventArgs class.
            </summary>
            <param name="newParam">A <see cref="T:OgamaControls.CaptureMode"/> with the CaptureMode to send.</param>
        </member>
        <member name="P:OgamaControls.CaptureModeEventArgs.Param">
            <summary>
            Gets the custom CaptureMode.
            </summary>
            <value>A <see cref="T:OgamaControls.CaptureMode"/> to send to the listener.</value>
        </member>
        <member name="T:OgamaControls.DSVideoProperties">
            <summary>
            This <see cref="T:System.Windows.Forms.UserControl"/> encapsulates an dialog for getting, setting
            and previewing the properties of a direct show video including audio input.
            </summary>
        </member>
        <member name="F:OgamaControls.DSVideoProperties.properties">
            <summary>
            Saves the current <see cref="T:OgamaControls.CaptureDeviceProperties"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.DSVideoProperties.dxCapture">
            <summary>
            The <see cref="T:OgamaControls.DXCapture"/> which is to be controlled.
            </summary>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.#ctor">
            <summary>
            Initializes a new instance of the DSVideoProperties class.
            </summary>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.DSVideoProperties_Load(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.UserControl.Load"/> event handler.
            Runs preview if possible.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.ParentForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Form.FormClosing"/> event handler of the parent form.
            Gets called when the parent form is closed.
            Has been wired in overridden <see cref="M:OgamaControls.DSVideoProperties.OnCreateControl"/>.
            Stops the webcam control, to free video stream.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.FormClosingEventArgs"/> with the event data.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.btnVideoDeviceProperties_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.DSVideoProperties.btnVideoDeviceProperties"/>.
            Calls a <see cref="M:OgamaControls.Webcam.ShowVideoDeviceConfigureDialog"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.btnVideoCompressorProperties_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.DSVideoProperties.btnVideoCompressorProperties"/>.
            Calls a <see cref="M:OgamaControls.Webcam.ShowVideoCompressorConfigureDialog"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.btnAudioDeviceProperties_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.DSVideoProperties.btnAudioDeviceProperties"/>.
            Calls a <see cref="M:OgamaControls.Webcam.ShowAudioDeviceConfigureDialog"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.btnAudioCompressorProperties_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Click"/> event handler for the
            <see cref="T:System.Windows.Forms.Button"/> <see cref="F:OgamaControls.DSVideoProperties.btnAudioCompressorProperties"/>.
            Calls a <see cref="M:OgamaControls.Webcam.ShowAudioCompressorConfigureDialog"/>.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.CbbVideoDevices_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event handler
            for the <see cref="T:System.Windows.Forms.ComboBox"/> <see cref="F:OgamaControls.DSVideoProperties.cbbVideoDevices"/>
            Updates webcams properties and preview.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.cbbVideoCompressor_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event handler
            for the <see cref="T:System.Windows.Forms.ComboBox"/> <see cref="F:OgamaControls.DSVideoProperties.cbbVideoCompressor"/>
            Updates webcams properties and preview.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.cbbAudioDevices_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event handler
            for the <see cref="T:System.Windows.Forms.ComboBox"/> <see cref="F:OgamaControls.DSVideoProperties.cbbAudioDevices"/>
            Updates webcams properties and preview.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.cbbAudioCompressor_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event handler
            for the <see cref="T:System.Windows.Forms.ComboBox"/> <see cref="F:OgamaControls.DSVideoProperties.cbbAudioCompressor"/>
            Updates webcams properties and preview.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.CbbVideoSize_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.ComboBox.SelectionChangeCommitted"/> event handler
            for the <see cref="T:System.Windows.Forms.ComboBox"/> <see cref="F:OgamaControls.DSVideoProperties.cbbVideoSize"/>
            Updates webcams video size.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.nudFrameRate_Leave(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Control.Leave"/> event handler
            for the <see cref="T:System.Windows.Forms.NumericUpDown"/> <see cref="F:OgamaControls.DSVideoProperties.nudFrameRate"/>.
            Updates the webcams video frame rate.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.OnCreateControl">
            <summary>
            Overridden <see cref="M:OgamaControls.DSVideoProperties.OnCreateControl"/>.
            Wires the <see cref="E:System.Windows.Forms.Form.FormClosing"/> event to this control.
            </summary>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.InitializeUI">
            <summary>
            This method populates the combo boxes with valid entries.
            </summary>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.UpdateProperties">
            <summary>
            This method fills the <see cref="T:OgamaControls.CaptureDeviceProperties"/> according to the current selections.
            </summary>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.PopulateDlgWithProperties">
            <summary>
            This method populates the dialog with the current <see cref="T:OgamaControls.CaptureDeviceProperties"/>
            </summary>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.PopulateVideoProperties(System.Boolean)">
            <summary>
            This method populates the video property fields of the dialog
            with valid entries for the selected video device.
            </summary>
            <param name="selectFirstValidEntries"><strong>True</strong>
            if first valid entries of the combo boxes should be selected.</param>
        </member>
        <member name="F:OgamaControls.DSVideoProperties.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.DSVideoProperties.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OgamaControls.DSVideoProperties.DxCapture">
            <summary>
            Gets or sets the <see cref="T:OgamaControls.DXCapture"/> for this control
            </summary>
        </member>
        <member name="P:OgamaControls.DSVideoProperties.Properties">
            <summary>
            Gets or sets the current <see cref="T:OgamaControls.CaptureDeviceProperties"/>.
            </summary>
        </member>
        <member name="P:OgamaControls.DSVideoProperties.VideoSizes">
            <summary>
            Gets or sets the available video sizes.
            </summary>
        </member>
        <member name="T:OgamaControls.DXCapture">
            <summary>
            Capture class encapsulating simple video device capturing to file.
            Is used for the usercamera feature of Ogama
            </summary>
        </member>
        <member name="F:OgamaControls.DXCapture.graphBuilder">
            <summary>
            DShow Filter: Graph builder 
            </summary>
        </member>
        <member name="F:OgamaControls.DXCapture.mediaControl">
            <summary>
            DShow Filter: Start/Stop the filter graph -> copy of graphBuilder
            </summary>
        </member>
        <member name="F:OgamaControls.DXCapture.videoWindow">
            <summary>
            DShow Filter: Control preview window -> copy of graphBuilder
            </summary>
        </member>
        <member name="F:OgamaControls.DXCapture.captureGraphBuilder">
            <summary>
             DShow Filter: building graphs for capturing video
            </summary>
        </member>
        <member name="F:OgamaControls.DXCapture.muxFilter">
            <summary>
            DShow Filter: multiplexor (combine video and audio streams)
            </summary>
        </member>
        <member name="F:OgamaControls.DXCapture.fileWriterFilter">
            <summary>
            DShow Filter: file writer
            </summary>
        </member>
        <member name="F:OgamaControls.DXCapture.referenceClock">
            <summary>
            The <see cref="T:DirectShowLib.IReferenceClock"/> of the current graph
            </summary>
        </member>
        <member name="F:OgamaControls.DXCapture.videoStreamConfig">
            <summary>
            DShow Filter: configure frame rate, size
            </summary>
        </member>
        <member name="F:OgamaControls.DXCapture.captureDeviceProperties">
            <summary>
            The <see cref="P:OgamaControls.DXCapture.CaptureDeviceProperties"/> containing the options
            for the DirectShow graph.
            </summary>
        </member>
        <member name="M:OgamaControls.DXCapture.#ctor(OgamaControls.CaptureDeviceProperties)">
            <summary>
            Initializes an instance of the <see cref="T:OgamaControls.DXCapture"/> class
            with the given <see cref="P:OgamaControls.DXCapture.CaptureDeviceProperties"/>
            </summary>
            <param name="properties">A <see cref="P:OgamaControls.DXCapture.CaptureDeviceProperties"/> containing the options
            for the DirectShow graph.</param>
        </member>
        <member name="M:OgamaControls.DXCapture.Start">
            <summary>
            Start the graph if it is ready
            </summary>
        </member>
        <member name="M:OgamaControls.DXCapture.Stop">
            <summary>
            Stop the graph if it is running
            </summary>
        </member>
        <member name="M:OgamaControls.DXCapture.GetCurrentTime(System.Int32@)">
            <summary>
            This method returns the time of the graphs
            <see cref="T:DirectShowLib.IReferenceClock"/>.
            </summary>
            <returns>The <see cref="T:System.Int64"/> value of the
            <see cref="T:DirectShowLib.IReferenceClock"/>.</returns>
        </member>
        <member name="M:OgamaControls.DXCapture.Dispose">
            <summary>
            Dispose the resources used by this capture class.
            Stops the graph first.
            </summary>
        </member>
        <member name="M:OgamaControls.DXCapture.onPreviewWindowResize(System.Object,System.EventArgs)">
            <summary> Resize the preview when the PreviewWindow is resized </summary>
        </member>
        <member name="M:OgamaControls.DXCapture.CreateGraph">
            <summary> 
             Create a new filter graph and add filters (devices, compressors, 
             misc), but leave the filters unconnected. Call renderGraph()
             to connect the filters.
            </summary>
            <returns>True if successful created the graph.</returns>
        </member>
        <member name="M:OgamaControls.DXCapture.ShowPreviewWindow">
            <summary>
            This method is called to show the preview of the video stream on
            the preselected this.captureDeviceProperties.PreviewWindow control.
            </summary>
        </member>
        <member name="M:OgamaControls.DXCapture.SetConfigParms(DirectShowLib.IAMStreamConfig,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the Framerate, and video size
            </summary>
            <param name="videoStreamConfig">The <see cref="T:DirectShowLib.IAMStreamConfig"/> of the capture device.</param>
            <param name="frameRate">The new framerate to be used.</param>
            <param name="width">The new video width to be used.</param>
            <param name="height">The new video height to be used.</param>
        </member>
        <member name="M:OgamaControls.DXCapture.GetMaxMinCaps(GTHardware.Cameras.DirectShow.CameraInfo,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns the maximum and minimum capabilities of the 
            given <see cref="T:GTHardware.Cameras.DirectShow.CameraInfo"/> for FPS and size.
            </summary>
            <param name="camera">The <see cref="T:GTHardware.Cameras.DirectShow.CameraInfo"/> to be checked for.</param>
            <param name="minFramerate">Out. The minimum available framerate of this device.</param>
            <param name="maxFramerate">Out. The maximum available framerate of this device.</param>
            <param name="minWidth">Out. The minimum available width of this device.</param>
            <param name="maxWidth">Out. The maximum available width of this device.</param>
            <param name="minHeight">Out. The minimum available height of this device.</param>
            <param name="maxHeight">Out. The maximum available height of this device.</param>
        </member>
        <member name="P:OgamaControls.DXCapture.HasValidGraph">
            <summary>
            Gets a value indicating whether this capture class has a valid
            directshow graph.
            </summary>
        </member>
        <member name="P:OgamaControls.DXCapture.VideoDeviceFilter">
            <summary>
            DShow Filter: selected video device
            </summary>
        </member>
        <member name="P:OgamaControls.DXCapture.VideoCompressorFilter">
            <summary>
            DShow Filter: selected video compressor
            </summary>
        </member>
        <member name="P:OgamaControls.DXCapture.AudioDeviceFilter">
            <summary>
            DShow Filter: selected video device
            </summary>
        </member>
        <member name="P:OgamaControls.DXCapture.AudioCompressorFilter">
            <summary>
            DShow Filter: selected video compressor
            </summary>
        </member>
        <member name="P:OgamaControls.DXCapture.CaptureDeviceProperties">
            <summary>
            Gets or sets the <see cref="P:OgamaControls.DXCapture.CaptureDeviceProperties"/> describing the
            directshow properties
            </summary>
        </member>
        <member name="T:OgamaControls.Media.WebCam.CustomReferenceClock">
            <summary>
            This class implements an DirectShow <see cref="T:DirectShowLib.IReferenceClock"/>
            with the QueryPerformanceCounter and QueryPerformanceFrequency
            methods of the Kernel32.dll.
            </summary>
        </member>
        <member name="M:OgamaControls.Media.WebCam.CustomReferenceClock.#ctor">
            <summary>
            Initializes a new instance of the CustomReferenceClock class.
            </summary>
        </member>
        <member name="M:OgamaControls.Media.WebCam.CustomReferenceClock.GetTime(System.Int64@)">
            <summary>
            Returns the current time.
            </summary>
            <param name="pTime">Out. An <see cref="T:System.Int64"/> with the clocks time.</param>
            <returns>Always S_OK</returns>
        </member>
        <member name="M:OgamaControls.Media.WebCam.CustomReferenceClock.AdviseTime(System.Int64,System.Int64,System.IntPtr,System.Int32@)">
            <summary>
            The AdviseTime method creates a one-shot advise request.
            </summary>
            <param name="baseTime">Base reference time, in 100-nanosecond units.</param>
            <param name="streamTime">Stream offset time, in 100-nanosecond units.</param>
            <param name="hEvent">Handle to an event, created by the caller.</param>
            <param name="pdwAdviseCookie">Pointer to a variable that receives 
            an identifier for the advise request.</param>
            <returns>Returns an HRESULT value. Possible values include the following.
            S_OK Success. 
            E_INVALIDARG Invalid time values. 
            E_OUTOFMEMORY Failure. 
            E_POINTER NULL pointer argument.</returns>
            <remarks>This method creates a one-shot advise request for the reference 
            time baseTime + streamTime. The sum must be greater than zero and 
            less than MAX_TIME, or the method returns E_INVALIDARG. 
            At the requested time, the clock signals the event specified in the hEvent parameter.
            To cancel the notification before the time is reached, call 
            the Unadvise method and pass the pdwAdviseToken value 
            returned from this call. After the notification has occurred, 
            the clock automatically clears it, so it is not necessary to call 
            Unadvise. However, it is not an error to do so.</remarks>
        </member>
        <member name="M:OgamaControls.Media.WebCam.CustomReferenceClock.Unadvise(System.Int32)">
            <summary>
            Not implemented. 
            The Unadvise method removes a pending advise request.
            </summary>
            <param name="dwAdviseCookie">Identifier of the request to remove. 
            Use the value returned by IReferenceClock::AdviseTime or 
            IReferenceClock::AdvisePeriodic in the pdwAdviseToken parameter.</param>
            <returns>Returns an HRESULT value. Possible values include the following.
            S_FALSE Not found. S_OK Success.</returns>
        </member>
        <member name="M:OgamaControls.Media.WebCam.CustomReferenceClock.AdvisePeriodic(System.Int64,System.Int64,System.IntPtr,System.Int32@)">
            <summary>
            Not implemented. 
            The AdvisePeriodic method creates a periodic advise request.
            </summary>
            <param name="startTime">Time of the first notification, 
            in 100-nanosecond units. Must be greater than zero and less than MAX_TIME</param>
            <param name="periodTime">Time between notifications, in 100-nanosecond units. Must be greater than zero</param>
            <param name="hSemaphore">Handle to a semaphore, created by the caller. </param>
            <param name="pdwAdviseCookie">Pointer to a variable that receives an identifier for the advise request.</param>
            <returns>Returns an HRESULT value. Possible values include the following.
            S_OK Success. 
            E_INVALIDARG Invalid time values. 
            E_OUTOFMEMORY Failure. 
            E_POINTER NULL pointer argument.</returns>
        </member>
        <member name="P:OgamaControls.Media.WebCam.CustomReferenceClock.PlayRate">
            <summary>
            Gets or sets the replay rate of the clock.
            </summary>
        </member>
        <member name="T:OgamaControls.Webcam">
            <summary>
            This class encapsulates a webcam <see cref="T:System.Windows.Forms.UserControl"/>.
            It can be used to show a preview of any capture device on the
            system in itself or a custom provided <see cref="T:System.Windows.Forms.Control"/>.
            It can also capture video and audio stream into a file with
            default or custom devices and compressors.
            </summary>
        </member>
        <member name="F:OgamaControls.Webcam.dxCapture">
            <summary>
            The <see cref="T:OgamaControls.DXCapture"/> object used to capture the webcams
            video stream along with audio stream.
            </summary>
        </member>
        <member name="F:OgamaControls.Webcam.properties">
            <summary>
            The <see cref="T:OgamaControls.CaptureDeviceProperties"/> with the currently
            used filters for the capturing
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.#ctor">
            <summary>
            Initializes a new instance of the ReplayModule class
            with the default preview window.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the ReplayModule class 
            with a custom preview window.
            </summary>
            <param name="previewWindow">A <see cref="T:System.Windows.Forms.Control"/> in which the preview
            window should be shown.</param>
        </member>
        <member name="M:OgamaControls.Webcam.Preview">
            <summary>
            Gets or sets a value indicating whether this
            webcam should preview its video stream or not.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.DisposeDxCapture">
            <summary>
            Releases the resources used by the DXcapture object
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.TestCapture">
            <summary>
            This method checks for valid capture settings
            and returns <strong>true</strong> if the current
            <see cref="T:OgamaControls.CaptureDeviceProperties"/> can be used.
            </summary>
            <returns><strong>True</strong> if the current
            <see cref="T:OgamaControls.CaptureDeviceProperties"/> can be used for capturing,
            otherwise <strong>false</strong>.</returns>
        </member>
        <member name="M:OgamaControls.Webcam.RunGraph">
            <summary>
            This methods starts the capturing of the webcam stream
            into the given filename if one is specified.
            It also starts the internal timer to receive timestamps.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.StopCapture">
            <summary>
            This methods stops the capturing of the webcam stream
            and writes the file on the disk.
            It also stops the internal timer for receiving timestamps.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.ShowConfigureDialog(System.Boolean)">
            <summary>
            This method shows a <see cref="T:OgamaControls.WebcamPropertiesDlg"/>
            to modify the current <see cref="T:OgamaControls.CaptureDeviceProperties"/>
            and afterwards reinitializes the webcam.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.GetCurrentTime">
            <summary>
            This method returns the <see cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds"/> value,
            that is the time from the start of the capturing in millisecons.
            </summary>
            <returns>The <see cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds"/> in
            milliseconds and -1, if stopwatch is not running.</returns>
        </member>
        <member name="M:OgamaControls.Webcam.ShowVideoDeviceConfigureDialog">
            <summary>
            This method displays the property pages for the current video device.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.ShowVideoCompressorConfigureDialog">
            <summary>
            This method displays the property pages for the current video compressor.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.ShowAudioDeviceConfigureDialog">
            <summary>
            This method displays the property pages for the current audio device.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.ShowAudioCompressorConfigureDialog">
            <summary>
            This method displays the property pages for the current audio compressor.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.WebCam2_Load(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.Form.Load"/> event handler. 
            Initializes the webcam with the current
            <see cref="T:OgamaControls.CaptureDeviceProperties"/>
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.Webcam.cmuProperties_Click(System.Object,System.EventArgs)">
            <summary>
            The <see cref="E:System.Windows.Forms.ToolStripItem.Click"/> event handler
            for the <see cref="T:System.Windows.Forms.ContextMenu"/> <see cref="F:OgamaControls.Webcam.cmuProperties"/>.
            Calls the <see cref="M:OgamaControls.Webcam.ShowConfigureDialog(System.Boolean)"/> that shows
            a configuration dialog.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.Webcam.OnWebcamAvailable(OgamaControls.CaptureModeEventArgs)">
            <summary>
            This method raises the <see cref="E:OgamaControls.Webcam.WebcamAvailable"/> 
            event by invoking the delegates.
            It should be called when the webcam is initialized.
            </summary>
            <remarks>The <see cref="T:OgamaControls.CaptureModeEventArgs"/> contain
            the new initalized <see cref="T:OgamaControls.CaptureMode"/></remarks>
            <param name="e">A <see cref="T:OgamaControls.CaptureModeEventArgs"/></param>.
        </member>
        <member name="M:OgamaControls.Webcam.InitializeCustomComponents">
            <summary>
            This method initializes the webcam with default values
            for video and audio capturing.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.InitializeWebcam(OgamaControls.CaptureDeviceProperties)">
            <summary>
            This method creates a new <see cref="T:OgamaControls.DXCapture"/>
            with the given <see cref="T:OgamaControls.CaptureDeviceProperties"/>
            </summary>
            <param name="captureProperties">A <see cref="T:OgamaControls.CaptureDeviceProperties"/>
            to use for creating the underlying <see cref="T:OgamaControls.DXCapture"/></param>
        </member>
        <member name="F:OgamaControls.Webcam.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.Webcam.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.Webcam.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.Webcam.WebcamAvailable">
            <summary>
            This event is raised whenever the webcam is initialized with
            new capture settings and contains a <see cref="T:OgamaControls.CaptureMode"/>
            in its event handler.
            </summary>
        </member>
        <member name="P:OgamaControls.Webcam.DirectXCapture">
            <summary>
            Gets the underlying <see cref="T:OgamaControls.DXCapture"/>
            object.
            </summary>
        </member>
        <member name="P:OgamaControls.Webcam.Properties">
            <summary>
            Gets or sets a <see cref="T:OgamaControls.CaptureDeviceProperties"/>
            with the properties of the webcam.
            </summary>
        </member>
        <member name="T:OgamaControls.ToolStripTrackBar">
            <summary>
            Class for a toolstrip hostable track bar control
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripTrackBar.#ctor">
            <summary>
            Constructor. Initializes Component and event handler
            </summary>
        </member>
        <member name="F:OgamaControls.ToolStripTrackBar.SendValueChangedEvents">
            <summary>
            Gets or sets a value indicating whether to send value changed events.
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripTrackBar.OnSubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Overridden. Subscribes events from the hosted control.
            </summary>
            <param name="c">control</param>
        </member>
        <member name="M:OgamaControls.ToolStripTrackBar.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Overridden. Unsubscribes events from the hosted control.
            </summary>
            <param name="c">control</param>
        </member>
        <member name="M:OgamaControls.ToolStripTrackBar.TrackBar_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler. Raises value changed event.
            </summary>
            <param name="sender">sender</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:OgamaControls.ToolStripTrackBar.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Overridden GetPreferredSize. Shrinks control to height of 23.
            </summary>
            <param name="constrainingSize">The constraining size input</param>
            <returns>The preferred size for this control.</returns>
        </member>
        <member name="E:OgamaControls.ToolStripTrackBar.ValueChanged">
            <summary>
            Value changed event handler from track bar control
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripTrackBar.Value">
            <summary>
            Gets or sets current value
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripTrackBar.Minimum">
            <summary>
            Gets or sets the minimum allowed value for the track bar
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripTrackBar.Maximum">
            <summary>
            Gets or sets the maximal allowed value for the track bar
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripTrackBar.TickFrequency">
            <summary>
            Gets or sets the TickFrequency for the track bar
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripTrackBar.TickStyle">
            <summary>
            Gets or sets the tick style for the track bar
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripTrackBar.TrackBar">
            <summary>
            Gets the underlying track bar control
            </summary>
        </member>
        <member name="T:OgamaControls.ToolStripAlignmentDropdown">
            <summary>
            Class for a toolstrip hostable color drop down control
            </summary>
        </member>
        <member name="F:OgamaControls.ToolStripAlignmentDropdown._position">
            <summary>
            The position in stimulus screen coordinates.
            </summary>
        </member>
        <member name="F:OgamaControls.ToolStripAlignmentDropdown._stimulusScreenSize">
            <summary>
            The stimulus screen size.
            </summary>
        </member>
        <member name="F:OgamaControls.ToolStripAlignmentDropdown._alignment">
            <summary>
            Horizontal alignment of object at given position
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripAlignmentDropdown.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            On mouse down event handler. Shows color selection panel of type <see cref="T:OgamaControls.ColorPanel"/>.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.ToolStripAlignmentDropdown.OnPositionChanged(System.EventArgs)">
            <summary>
            On position changed event handler. Raises delegate.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="E:OgamaControls.ToolStripAlignmentDropdown.PositionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripAlignmentDropdown.CurrentPosition">
            <summary>
            Gets or sets the current position value of the dropdown button.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> with the new position value.</value>
        </member>
        <member name="P:OgamaControls.ToolStripAlignmentDropdown.StimulusScreenSize">
            <summary>
            Gets or set the stimulus screen size
            </summary>
            <remarks>Used to size the position control correctly.</remarks>
            <value>A <see cref="T:System.Drawing.Size"/> with the stimulus screen size.</value>
        </member>
        <member name="P:OgamaControls.ToolStripAlignmentDropdown.Alignment">
            <summary>
            Horizontal text alignment for text at position value.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.HorizontalAlignment"/> with the new alignment of the text.</value>
        </member>
        <member name="T:OgamaControls.ToolStripColorDropDownOld">
            <summary>
            Class for a toolstrip hostable color drop down control
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripColorDropDownOld.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripColorDropDownOld.OnSubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Overridden. Subscribes events from the hosted control.
            </summary>
            <param name="c">control</param>
        </member>
        <member name="M:OgamaControls.ToolStripColorDropDownOld.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Overridden. Unsubscribes events from the hosted control.
            </summary>
            <param name="c">control</param>
        </member>
        <member name="M:OgamaControls.ToolStripColorDropDownOld.colorDropdownControl_ColorChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler. Raises color changed event.
            </summary>
            <param name="sender">sender</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="E:OgamaControls.ToolStripColorDropDownOld.ColorChanged">
            <summary>
            Color changed event handler from color drop down control
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripColorDropDownOld.Color">
            <summary>
            Gets or sets current color
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripColorDropDownOld.ColorDropdown">
            <summary>
            Gets the underlying color drop down control
            </summary>
        </member>
        <member name="T:OgamaControls.ToolStripColorDropdown">
            <summary>
            Class for a toolstrip hostable color drop down control
            </summary>
        </member>
        <member name="F:OgamaControls.ToolStripColorDropdown._color">
            <summary>
            Dropdowns color member.
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripColorDropdown.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripColorDropdown.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            On mouse down event handler. Shows color selection panel of type <see cref="T:OgamaControls.ColorPanel"/>.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.ToolStripColorDropdown.OnColorChanged(System.EventArgs)">
            <summary>
            On color changed event handler. Raises delegate.
            </summary>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="E:OgamaControls.ToolStripColorDropdown.ColorChanged">
            <summary>
            Color changed event handler from color drop down control
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripColorDropdown.CurrentColor">
            <summary>
            Gets or sets the dropdowns current color
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> value of the dropdown</value>
        </member>
        <member name="T:OgamaControls.ToolStripRadioButton">
            <summary>
            Class for a toolstrip hostable numeric up down control
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripRadioButton.#ctor">
            <summary>
            Constructor. Initializes Component and event handler
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripRadioButton.OnSubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Overridden. Subscribes events from the hosted control.
            </summary>
            <param name="c">control</param>
        </member>
        <member name="M:OgamaControls.ToolStripRadioButton.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Overridden. Unsubscribes events from the hosted control.
            </summary>
            <param name="c">control</param>
        </member>
        <member name="M:OgamaControls.ToolStripRadioButton.RadioButton_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler. Raises RadioButton.CheckedChanged event.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="E:OgamaControls.ToolStripRadioButton.CheckedChanged">
            <summary>
            Value changed event handler from numeric up down control
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripRadioButton.Checked">
            <summary>
            Gets or sets a value indicating whether the control is checked.
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripRadioButton.AutoCheck">
            <summary>
            Gets or sets a value indicating whether the <strong>Checked</strong> 
            value and the appearance of the control automatically 
            change when the control is clicked.
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripRadioButton.CheckAlign">
            <summary>
            Gets or sets the location of the check box portion of the <strong>RadioButton</strong>. 
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripRadioButton.RadioButton">
            <summary>
            Gets the underlying radio button control
            </summary>
        </member>
        <member name="T:OgamaControls.Marker">
            <summary>
            Triangle shaped marker, that are used to show the
            color blend positions of the gradient control.
            </summary>
        </member>
        <member name="F:OgamaControls.Marker.MARKER_SIZE">
            <summary>
            Size of triangle shaped color blend marker.
            </summary>
        </member>
        <member name="F:OgamaControls.Marker.bounds">
            <summary>
            Bounds of this marker
            </summary>
        </member>
        <member name="F:OgamaControls.Marker.color">
            <summary>
            Color of this marker.
            </summary>
        </member>
        <member name="F:OgamaControls.Marker.position">
            <summary>
            Position of this marker.
            </summary>
        </member>
        <member name="F:OgamaControls.Marker.IsMovable">
            <summary>
            Flag. True, if marker is movable.
            </summary>
            <remarks>Only markers at the beginning and the end of the gradient are not movable.</remarks>
        </member>
        <member name="M:OgamaControls.Marker.#ctor(System.Single,System.Drawing.Color)">
            <summary>
            Constructor. Creates a new marker with given parameters.
            </summary>
            <param name="position">new marker position</param>
            <param name="color">new marker color</param>
        </member>
        <member name="M:OgamaControls.Marker.#ctor(System.Single)">
            <summary>
            Constructor. Creates a new marker with given parameters.
            </summary>
            <param name="position">new marker position</param>
        </member>
        <member name="M:OgamaControls.Marker.#ctor(System.Single,System.Drawing.Color,System.Boolean)">
            <summary>
            Constructor. Creates a new marker with given parameters.
            </summary>
            <param name="position">new marker position</param>
            <param name="color">new marker color</param>
            <param name="isMovable">true, if marker should be movable.</param>
        </member>
        <member name="M:OgamaControls.Marker.SetPositionSilently(System.Single)">
            <summary>
             Set the Position value without causing the MarkerUpdated event to fire
            </summary>
            <param name="position">New marker position</param>
        </member>
        <member name="M:OgamaControls.Marker.UpdateBounds(System.Drawing.Rectangle)">
            <summary>
            Update the marker's bounds based on the marker strip's bounds.
            </summary>
            <param name="markerStripBounds">bounds of marker strip</param>
        </member>
        <member name="E:OgamaControls.Marker.MarkerUpdated">
            <summary>
            Event. Raised when a color blend marker has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.Marker.Bounds">
            <summary>
            Gets or sets the bounds of the marker.
            </summary>
        </member>
        <member name="P:OgamaControls.Marker.Color">
            <summary>
            Gets or sets the color of the marker.
            </summary>
        </member>
        <member name="P:OgamaControls.Marker.Position">
            <summary>
            Gets or sets the position of the marker.
            </summary>
        </member>
        <member name="T:OgamaControls.FontStyleArea">
            <summary>
            Area to show font styles
            </summary>
        </member>
        <member name="M:OgamaControls.FontStyleArea.#ctor">
            <summary>
            Constructor. Initializes components and sets standard font values.
            </summary>
        </member>
        <member name="M:OgamaControls.FontStyleArea.FontStyleArea_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event handler. Draws sample text with current font.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.FontStyleArea.OnFontStyleChanged(VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs)">
            <summary>
            The protected OnFontStyleChanged method raises the progress event by invoking 
            the delegates
            </summary>
            <param name="e">FontChanged event arguments</param>
        </member>
        <member name="M:OgamaControls.FontStyleArea.ThisFontChanged(System.Object,VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs)">
            <summary>
            Eventhandler. Updates the line sample with the new pen.
            </summary>
            <param name="sender">message sender</param>
            <param name="e">Pen change event arguments that hold new pen</param>
        </member>
        <member name="F:OgamaControls.FontStyleArea.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.FontStyleArea.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.FontStyleArea.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.FontStyleArea.FontStyleChanged">
            <summary>
            Event handler. Raised, when dialogs parameters has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.FontStyleArea.FontColor">
            <summary>
            Sets the Controls font color.
            </summary>
        </member>
        <member name="P:OgamaControls.FontStyleArea.FontAlignment">
            <summary>
            Sets the font text alignment
            </summary>
        </member>
        <member name="P:OgamaControls.FontStyleArea.SampleString">
            <summary>
            Sets the Controls sample string
            </summary>
        </member>
        <member name="T:OgamaControls.GenericValueEditor">
            <summary>
            Represents a Windows control that allows you to edit a value of any type.
            </summary>
            <remarks>
            <p>The <strong>GenericValueEditor</strong> control allows the user to edit
            values of a specific type. Use the <see cref="P:OgamaControls.GenericValueEditor.Value"/> property to access
            the edited value.</p>
            <p>The type of objects to edit is defined by the
            <see cref="P:OgamaControls.GenericValueEditor.EditedType"/> property of this control. The
            <strong>GenericValueEditor</strong> uses the <see cref="T:System.Drawing.Design.UITypeEditor"/> and
            <see cref="T:System.ComponentModel.TypeConverter"/> installed on that type to edit and validate values.</p>
            <p>When the <see cref="T:System.Drawing.Design.UITypeEditor"/> associated with the edited type has the style
            <strong>DropDown</strong> (see <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/>), then
            this control will display a down arrow button that drops the custom editor.
            When the <see cref="T:System.Drawing.Design.UITypeEditor"/> associated with the edited type has the style
            <strong>Modal</strong>, then this control will display a <strong>...</strong> button
            that opens the modal dialog.</p>
            <p>When no <see cref="T:System.Drawing.Design.UITypeEditor"/> is associated with the edited type or the
            associated editor is of style <strong>None</strong>, then the behavior of the
            control depends on the edited type. If the type is enumerated, then the control acts
            like a combo box of the enumerated values. If the type is not an enumerated type,
            then the control acts like a text box.</p>
            <p>If the editor associated with the edited type can display a representation of
            the edited value (see 
            <see cref="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported">UITypeEditor.GetPaintValueSupported</see>),
            then a small rectangle showing this representation will be displayed in addition to the
            textual value.</p> 
            </remarks>
            <example>
            <para lang="C#,Visual Basic">The following code sample shows how to create a <strong>GenericValueEditor</strong> for editing 
            a <see cref="T:System.Drawing.Color"/> stucture.
            </para>
            <code lang="C#">
            private GenericValueEditor GetColorEditor(Color startColor) {
            	GenericValueEditor editor = new GenericValueEditor();
            	editor.EditedType = typeof(Color);
            	editor.Value = startColor;
            	return editor;
            }
            </code>
            <code lang="Visual Basic">
            Private Funtion GetColorEditor(ByVal startColor As Color) as GenericValueEditor
            	Dim editor as GenericValueEditor = New GenericValueEditor()
            	editor.EditedType = GetType(Color)
            	editor.Value = startColor
            	Return editor
            End Function
            </code>
            </example>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.PAINT_VALUE_WIDTH">
            <summary>
            Default width of the paint value rectangle.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.autoSize">
            <summary>
            Indicates whether the control is in auto size mode.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.borderStyle">
            <summary>
            The border style. Note that initialization must be done here.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.editedType">
            <summary>
            Edited type.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.converter">
            <summary>
            The type converter for the edited type.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.editor">
            <summary>
            The editor for the currently edited type.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.currentValue">
            <summary>
            Current value of the editor.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.textBox">
            <summary>
            The text box for editing text.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.editorButton">
            <summary>
            A button used to drop UI type editors, if any.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.previewControl">
            <summary>
            A control used to paint the current value.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.hasButton">
            <summary>
            Indicates whether a button should be displayed to drop a <strong>UITypeEditor</strong>
            or the standard value list box.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.editorService">
            <summary>
            The <strong>IWindowsFormsEditorService</strong> that 
            allows you to drop UI type editors.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.paintValueSupported">
            <summary>
            Indicates if the UITypeEditor can paint the value.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.hasStandardValues">
            <summary>
            Indicates if the type converter defines standard values for the type.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.showPreviewOnly">
            <summary>
            Indicates if we want to hide the textbox and only paint the value.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.standardValuesUIEditor">
            <summary>
            UITypeEditor for types with standard values.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OgamaControls.GenericValueEditor"/> class.
            </summary>
            <remarks>The default edited type is <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:OgamaControls.GenericValueEditor"/> class using
            the specified type.
            </summary>
            <param name="editedType">The <see cref="T:System.Type"/> of object that can be edited by this control.</param>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.InitTextBox">
            <summary>
            Initializes the text box .
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.ResetForeColor">
            <summary>
            Resets the <see cref="P:OgamaControls.GenericValueEditor.ForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.ResetBackColor">
            <summary>
            Resets the <see cref="P:OgamaControls.GenericValueEditor.BackColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:OgamaControls.GenericValueEditor.BorderStyle"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>BorderStyle</strong> property is changed.</remarks>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnTextAlignChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:OgamaControls.GenericValueEditor.TextAlign"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>TextAlign</strong> property is changed.</remarks>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnReadOnlyChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:OgamaControls.GenericValueEditor.ReadOnly"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>ReadOnly</strong> property is changed.</remarks>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnValueChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:OgamaControls.GenericValueEditor.Value"/> property is changed on the control.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>Called when the <strong>Value</strong> property is changed.</remarks>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            This members overrides <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">Control.OnSystemColorsChanged</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnCursorChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">Control.OnCursorChanged</see>.
            </summary>
            <param name="args">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">Control.SetBoundsCore</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnFontChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">Control.OnFontChanged</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnHandleCreated(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">Control.OnValidating</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnLeave(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">Control.OnLeave</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnGotFocus(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">Control.OnGotFocus</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnEnabledChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">Control.OnEnabledChanged</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override.Fills background with solid brush
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.PreviewControlClicked(System.Object,System.EventArgs)">
            <summary>
            Invoked when clicking the picture box.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.ButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Invoked when clicking the drop button.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.GetStandardValues">
            <summary>
            Gets the list of standard values from the converter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.DropEditor">
            <summary>
            Drops the <see cref="T:System.Drawing.Design.UITypeEditor"/> associated with the edited value.
            </summary>
            <remarks>The method may also drop a list box if the edited value does not 
            have any editor and the type proposes standard values.
            </remarks>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">Control.OnKeyPress</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">Control.OnMouseWheel</see>.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the data.</param>
            <remarks>The default implementation iterates on the standard values proposed by
            the edited type, if any.</remarks>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">Control.OnKeyDown</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.ValidateText">
            <summary>
            Is called to validate the text that is currently edited by the control.
            </summary>
            <returns><see langword="true"/> if the string has been successfully converted into 
            the type defined by the property <see cref="P:OgamaControls.GenericValueEditor.EditedType"/>; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="E:OgamaControls.GenericValueEditor.ValueChanged">
            <summary>
            Event fired when the <see cref="P:OgamaControls.GenericValueEditor.Value"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.BackgroundImage">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.BackgroundImage">Control.BackgroundImage</see>.
            </summary>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the foreground color of the control.
            The default value is the value for window text (<see cref="P:System.Drawing.SystemColors.WindowText">SystemColors.WindowText</see>).</value>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.BackColor">
            <summary>
            Gets or sets the background color of the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.
            The default value is the value for window text (<see cref="P:System.Drawing.SystemColors.Window">SystemColors.Window</see>).</value>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control automatically adjusts its height to the font height.
            </summary>
            <value><see langword="true"/> if the control adjusts its height to closely fit 
            its contents; <see langword="false"/> otherwise. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.CreateParams">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.
            </summary>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.BorderStyle">
            <summary>
            Gets or sets the border style of the control.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.BorderStyle"/> values. The default value
            is <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D"/>.</value>
        </member>
        <member name="E:OgamaControls.GenericValueEditor.BorderStyleChanged">
            <summary>
            Event fired when the <see cref="P:OgamaControls.GenericValueEditor.BorderStyle"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.TextAlign">
            <summary>
            Gets or sets the way text is aligned in a <see cref="T:OgamaControls.GenericValueEditor"/> control.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.HorizontalAlignment"/> enumeration values that specifies 
            how text is aligned in the control. The default value is <see cref="F:System.Windows.Forms.HorizontalAlignment.Left"/>.</value>
        </member>
        <member name="E:OgamaControls.GenericValueEditor.TextAlignChanged">
            <summary>
            Event fired when the <see cref="P:OgamaControls.GenericValueEditor.TextAlign"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.ReadOnly">
            <summary>
            Gets or sets a value indicating whether text in the text box is read-only.
            </summary>
            <value><see langword="true"/> if the text box is read-only; <see langword="false"/> otherwise. The default value is 
            <see langword="false"/>.</value>
            <remarks>When this property is set to <see langword="true"/>, the contents of the control cannot be 
            changed by the user at runtime. With this property set to <see langword="true"/>, you can still set 
            the value of the <see cref="P:OgamaControls.GenericValueEditor.Text"/> property in code. You can use this feature instead of disabling 
            the control with the <see cref="P:System.Windows.Forms.Control.Enabled"/> property to allow the contents to be copied.
            </remarks>
        </member>
        <member name="E:OgamaControls.GenericValueEditor.ReadOnlyChanged">
            <summary>
            Event fired when the <see cref="P:OgamaControls.GenericValueEditor.ReadOnly"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.ShowPreviewOnly">
            <summary>
            Gets or sets a value indicating whether to show only the rectangle 
            that displays a representation of the edited value.
            </summary>
            <value><see langword="true"/> if the control shows only the rectangle that displays 
            a representation of the edited value; <see langword="false"/> otherwise. The textual value is then not visible.</value>
            <remarks>
            When the editor can paint a representation of the value
            (see <see cref="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported">UITypeEditor.GetPaintValueSupported</see>)
            this control will show both a textual value and a rectangle that displays a
            representation of the value.
            Setting this property to <see langword="true"/> will hide the textual value.
            Not all editors can paint a representation of the edited value. If the
            editor cannot paint the edited value, then the value 
            of this property is meaningless.
            </remarks>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.Value">
            <summary>
            Gets or sets the value edited by the control.
            </summary>
            <value>The current value of the editor.</value>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.SelectionStart">
            <summary>
            Gets or sets the starting point of text selected in the control.
            </summary>
            <value>The starting position of text selected in the control.</value>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.SelectionLength">
            <summary>
            Gets or sets the number of characters selected in the control.
            </summary>
            <value>The number of characters selected in the control.</value>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.Text">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.Text">Control.Text</see>.
            </summary>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.EditedType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> this control can edit.
            </summary>
            <value>A <see cref="T:System.Type"/> instance that represents the type of object that can be edited 
            by the editor.</value>
            <exception cref="T:System.ArgumentNullException">The property value is
            <see langword="null"/>.</exception>
            <remarks>Changing this property also changes the <see cref="P:OgamaControls.GenericValueEditor.Value"/>,
            <see cref="P:OgamaControls.GenericValueEditor.Converter"/>, and <see cref="P:OgamaControls.GenericValueEditor.Editor"/> properties.</remarks>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.Converter">
            <summary>
            Gets or sets the type converter used by the editor.
            </summary>
            <value>A <see cref="T:System.ComponentModel.TypeConverter"/> instance that is used to convert the edited value from and to text.</value>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.Editor">
            <summary>
            Gets or sets the type editor for this control.
            </summary>
            <value>A <see cref="T:System.Drawing.Design.UITypeEditor"/> instance that defines the way this control will edit the value.</value>
            <remarks>
            <p>When the editor has the style <strong>DropDown</strong>
            (see <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/>), then this control will display a
            down-arrow button that drops the custom editor. When the editor has the style
            <strong>Modal</strong>, then this control will display a <strong>...</strong>
            button that opens the modal dialog.</p>
            <p>When no editor is set or the editor is of style <strong>None</strong>, then
            the behavior of the control depends on the edited type. If the type is enumerated
            then the control acts like a combo box of the enumerated values. If the type is
            not an enumerated type, then the control acts like a text box.</p>
            <p>If the editor can display a representation of the edited value
            (see <see cref="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported">UITypeEditor.GetPaintValueSupported</see>),
            then a small rectangle showing this representation will be displayed in addition
            to the textual value.</p>
            </remarks>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.DefaultSize">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.DefaultSize">Control.DefaultSize</see>.
            </summary>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.Focused">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.Focused">Control.Focused</see>.
            </summary>
        </member>
        <member name="P:OgamaControls.GenericValueEditor.PreviewControl">
            <summary>
            Gets the picture box of the control.
            </summary>
        </member>
        <member name="T:OgamaControls.GenericValueEditor.EditorService">
            <summary>
            The <strong>IWindowsFormsEditorService</strong> that allows you to
            drop dialog and UI type editors for a <see cref="T:OgamaControls.GenericValueEditor"/>.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.EditorService.editor">
            <summary>
            The control that uses this service.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.EditorService.dropDownForm">
            <summary>
            A control that holds the dropped editors.
            </summary>
        </member>
        <member name="F:OgamaControls.GenericValueEditor.EditorService.closingDropDown">
            <summary>
            Indicates whether we are currently closing the drop-down form.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.EditorService.#ctor(OgamaControls.GenericValueEditor)">
            <summary>
            Creates the editor service.
            </summary>
            <param name="editor">The cell editor.</param>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.EditorService.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.EditorService.DropDownControl(System.Windows.Forms.Control)">
            <summary>
            Drops the editor control.
            </summary>
            <param name="ctl">The control to drop.</param>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.EditorService.HideForm">
            <summary>
            Hides the drop-down editor.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.EditorService.CloseDropDown">
            <summary>
            Closes the dropped editor.
            </summary>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.EditorService.ShowDialog(System.Windows.Forms.Form)">
            <summary>
            Opens a dialog editor.
            </summary>
            <param name="dialog">The dialog to open.</param>
        </member>
        <member name="M:OgamaControls.GenericValueEditor.EditorService.SystemColorsChanged">
            <summary>
            Is Called when the SystemColorsChanged event is received
            by the GenericValueEditor.
            </summary>
        </member>
        <member name="T:OgamaControls.PreviewControl">
            <summary>
            The small rectangle that paints the current edited value.
            </summary>
        </member>
        <member name="T:OgamaControls.EditorButton">
            <summary>
            The button that opens <see cref="T:System.Drawing.Design.UITypeEditor"/> controls.
            </summary>
        </member>
        <member name="F:OgamaControls.EditorButton.dialog">
            <summary>
            Indicates whether the button should be displayed as a 
            drop-down arrow or as a dialog button.
            </summary>
        </member>
        <member name="M:OgamaControls.EditorButton.#ctor">
            <summary>
            Creates a <strong>EditorButton</strong>.
            </summary>
        </member>
        <member name="M:OgamaControls.EditorButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary>
        </member>
        <member name="P:OgamaControls.EditorButton.IsDialog">
            <summary>
            Gets or sets a value indicating if the button should be 
            drawn as a drop dialog button or as a drop button.
            </summary>
            <value><see langword="true"/> if the button should be 
            drawn as a drop dialog button; <see langword="false"/> otherwise.</value>
        </member>
        <member name="T:OgamaControls.StandardValuesListBox">
            <summary>
            <strong>ListBox</strong> which is dropped when the type contains standard values.
            </summary>
            
        </member>
        <member name="M:OgamaControls.StandardValuesListBox.#ctor(OgamaControls.GenericValueEditor)">
            <summary>
            Creates a <strong>DropListBox</strong>.
            </summary>
        </member>
        <member name="M:OgamaControls.StandardValuesListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">ListBox.OnDrawItem</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.StandardValuesListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">ListBox.OnMeasureItem</see>.
            </summary>
        </member>
        <member name="T:OgamaControls.DropDownForm">
            <summary>
            The form that contains the dropped down editor.
            </summary>
        </member>
        <member name="F:OgamaControls.DropDownForm.currentControl">
            <summary>
            Currently dropped control.
            </summary>
        </member>
        <member name="F:OgamaControls.DropDownForm.service">
            <summary>
            The service that dropped this form.
            </summary>
        </member>
        <member name="M:OgamaControls.DropDownForm.#ctor(System.Windows.Forms.Design.IWindowsFormsEditorService)">
            <summary>
            Creates a <strong>DropDownForm</strong>.
            </summary>
            <param name="service">The service that drops this form.</param>
        </member>
        <member name="M:OgamaControls.DropDownForm.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseDown</see>.
            </summary>
            <remarks>
            Closes the form when the left button is clicked.
            </remarks>
        </member>
        <member name="M:OgamaControls.DropDownForm.OnClosed(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.OnClosed(System.EventArgs)">Form.OnClosed</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.DropDownForm.OnDeactivate(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.OnDeactivate(System.EventArgs)">Form.OnDeactivate</see>.
            </summary>
        </member>
        <member name="M:OgamaControls.DropDownForm.OnCurrentControlResize(System.Object,System.EventArgs)">
            <summary>
            Invoked when the dropped control is resized.
            This resizes the form and realigns it.
            </summary>
        </member>
        <member name="M:OgamaControls.DropDownForm.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Invoked when the form is resized.
            </summary>
        </member>
        <member name="P:OgamaControls.DropDownForm.Component">
            <summary>
            Gets or sets the control displayed by the form.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> instance.</value>
        </member>
        <member name="T:OgamaControls.Gradient">
            <summary>
            Class for creating and maintaining custom gradients.
            Used in attention map interface.
            </summary>
        </member>
        <member name="F:OgamaControls.Gradient.startColor">
            <summary>
            Start color of gradient.
            </summary>
        </member>
        <member name="F:OgamaControls.Gradient.endColor">
            <summary>
            End color of gradient.
            </summary>
        </member>
        <member name="F:OgamaControls.Gradient.colorBlend">
            <summary>
            The <see cref="P:OgamaControls.Gradient.ColorBlend"/> to be used in the gradient.
            </summary>
        </member>
        <member name="F:OgamaControls.Gradient.gradientDir">
            <summary>
            Current gradient direction. Of type <see cref="T:System.Drawing.Drawing2D.LinearGradientMode"/> enumeration.
            </summary>
        </member>
        <member name="M:OgamaControls.Gradient.#ctor">
            <summary>
            Constructs a Gradient with both start and end colors set to transparent.
            </summary>
        </member>
        <member name="M:OgamaControls.Gradient.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Constructs a new Gradient with the specified start and end colors.
            </summary>
            <param name="startColor">start color</param>
            <param name="endColor">end color</param>
        </member>
        <member name="M:OgamaControls.Gradient.#ctor(OgamaControls.Gradient)">
            <summary>
            Initializes a new instance of the Gradient class.
            </summary>
            <param name="gradientToClone">The <see cref="T:OgamaControls.Gradient"/> to be cloned.</param>
        </member>
        <member name="M:OgamaControls.Gradient.Clone">
            <summary>
            Clones this gradient.
            </summary>
            <returns>The cloned gradient.</returns>
        </member>
        <member name="M:OgamaControls.Gradient.FillRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Fills the specified rectangular area on the given graphics context.
            </summary>
            <param name="g">Graphics context</param>
            <param name="rect">rectangle to fill</param>
        </member>
        <member name="M:OgamaControls.Gradient.FillRegion(System.Drawing.Graphics,System.Drawing.Region)">
            <summary>
            Fills the specified Region area on the given graphics context.
            </summary>
            <param name="g">Graphics context</param>
            <param name="rgn">region to fill</param>
        </member>
        <member name="M:OgamaControls.Gradient.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills the specified GraphicsPath using a PathGradientBrush.
            </summary>
            <param name="g">Graphics context</param>
            <param name="path">path to fill</param>
        </member>
        <member name="M:OgamaControls.Gradient.GetLinearGradientBrush(System.Drawing.Rectangle)">
            <summary>
            Returns a LinearGradientBrush object initialized based on the current
            gradient configuration.
            </summary>
            <remarks>
            The user is responsible for disposing the returned Brush object.
            </remarks>
            <param name="rect">base rectangle</param>
            <returns>LinearGradientBrush</returns>
        </member>
        <member name="M:OgamaControls.Gradient.GetPathGradientBrush(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Returns a PathGradientBrush object initialized based on the current
            gradient configuration.
            </summary>
            <remarks>
            The user is responsible for desposing the returned Brush object.
            </remarks>
            <param name="path">GraphicsPath</param>
            <returns>PathGradientBrush</returns>
        </member>
        <member name="M:OgamaControls.Gradient.PaintGradientWithDirectionOverride(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Drawing2D.LinearGradientMode)">
            <summary>
            Paints this gradient with given direction in given rectangle
            </summary>
            <param name="g">Graphics to draw to</param>
            <param name="rect">rectangle within graphics to draw to</param>
            <param name="mode">LinearGradientMode enumeration member</param>
        </member>
        <member name="P:OgamaControls.Gradient.ColorBlend">
            <summary>
            Gets or sets the color blend of the gradient.
            </summary>
        </member>
        <member name="P:OgamaControls.Gradient.GradientDirection">
            <summary>
            Gets or sets the gradient direction.
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.DEFAULT_PADDING">
            <summary>
            Default padding with around gradient rectangle
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.gradBarRect">
            <summary>
            Rectangle that bounds gradient bar.
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.markerStrip">
            <summary>
            Rectangle that bounds the strip for the color markers.
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.compensatedMarkerStrip">
            <summary>
            Rectangle with compensated values for the color marker strip
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.markers">
            <summary>
            List of color blend markers.
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.selectedMarker">
            <summary>
            Currently selected marker.
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.movingMarker">
            <summary>
            Currently moving marker.
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.gradientBmp">
            <summary>
            Bitmap of the current gradient.
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.isBitmapInvalid">
            <summary>
            Flag. True, if bitmap should be renewed.
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.gradient">
            <summary>
            Current gradient object.
            </summary>
        </member>
        <member name="F:OgamaControls.GradientBuilder.silentMarkers">
            <summary>
            Flag. True if markers should be set silent.
            </summary>
        </member>
        <member name="M:OgamaControls.GradientBuilder.#ctor">
            <summary>
            Constructor. Initializes gradient builder control.
            </summary>
        </member>
        <member name="M:OgamaControls.GradientBuilder.OnGradientChanged(System.Boolean)">
            <summary>
            Invoked, when gradient changed. Updates gradient object with new color blends.
            </summary>
            <param name="suppressEvent">True, if gradient changed event should be suppressed.</param>
        </member>
        <member name="M:OgamaControls.GradientBuilder.OnMarkerSelected(OgamaControls.Marker)">
            <summary>
            Raises MarkerSelected event.
            </summary>
            <param name="selectedMarker">currently selected Marker</param>
        </member>
        <member name="M:OgamaControls.GradientBuilder.marker_MarkerUpdated(System.Object,System.EventArgs)">
            <summary>
            Raises <c>OnGradientChanged</c> event when marker position changed.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.GradientBuilder.OnResize(System.EventArgs)">
            <summary>
            Override. Recalculates gradient bitmap on resizing.
            </summary>
            <param name="e">Empty event args</param>
        </member>
        <member name="M:OgamaControls.GradientBuilder.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override. Paints gradient and marker of the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.GradientBuilder.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override. Can a marker (other than the first or the last) receive this 
            mouse down event?
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:OgamaControls.GradientBuilder.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override. Move the marker along the marker strip. If the marker is dragged out
            of the marker strip then the marker is removed.
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:OgamaControls.GradientBuilder.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override. Updates gradient with changes.
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:OgamaControls.GradientBuilder.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override.  If an location on the marker strip is double clicked where there
            are no existing markers, a new marker is added.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:OgamaControls.GradientBuilder.Recalculate">
            <summary>
            Resize bounds of gradient bar and marker strip.
            </summary>
        </member>
        <member name="M:OgamaControls.GradientBuilder.DrawMarkers(System.Drawing.Graphics)">
            <summary>
            Draw Markers in the list
            </summary>
            <param name="g">graphics context</param>
        </member>
        <member name="M:OgamaControls.GradientBuilder.GetBlendFromMarkers">
            <summary>
            Calculates a colorblend object from marker positions to apply to gradient.
            </summary>
            <returns>Color blend for use in gradient.</returns>
        </member>
        <member name="M:OgamaControls.GradientBuilder.CompareMarkers(OgamaControls.Marker,OgamaControls.Marker)">
            <summary>
            Compares to markers and returns true, if they are at the same position.
            </summary>
            <param name="a">Marker 1</param>
            <param name="b">Marker 2</param>
            <returns>true if at the same place</returns>
        </member>
        <member name="E:OgamaControls.GradientBuilder.MarkerSelected">
            <summary>
            Event. Raised when a marker is selected
            </summary>
        </member>
        <member name="E:OgamaControls.GradientBuilder.GradientChanged">
            <summary>
            Event. Raised, when gradient changed
            </summary>
        </member>
        <member name="P:OgamaControls.GradientBuilder.Gradient">
            <summary>
            Gets or sets gradient object of the control
            </summary>
        </member>
        <member name="P:OgamaControls.GradientBuilder.SilentMarkers">
            <summary>
            Gets or sets whether the GradientChanged event is fired when a marker
            is dragged.
            </summary>
        </member>
        <member name="T:OgamaControls.GradientTypeEditorUI">
            <summary>
            User control that creates and edits custom gradients.
            </summary>
            <summary>
            Control for creating custom controls
            </summary>
        </member>
        <member name="F:OgamaControls.GradientTypeEditorUI.marker">
            <summary>
            current Marker
            </summary>
        </member>
        <member name="M:OgamaControls.GradientTypeEditorUI.#ctor">
            <summary>
            Contructor. Initalizes Control
            </summary>
        </member>
        <member name="M:OgamaControls.GradientTypeEditorUI.colorMixerFieldValueChanged(System.Object,System.EventArgs)">
            <summary>
            Color mixer field changed.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.GradientTypeEditorUI.gradientBuilder_MarkerSelected(System.Object,System.EventArgs)">
            <summary>
            Raised, when a marker is selected. Updates UI fields with marker values.
            </summary>
            <param name="sender">marker that is selected</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.GradientTypeEditorUI.gradientBuilder_GradientChanged(System.Object,System.EventArgs)">
            <summary>
            Raises <c>GradientChanged</c> event.
            </summary>
            <param name="sender">GradientChanged</param>
            <param name="e">GradientChanged</param>
        </member>
        <member name="M:OgamaControls.GradientTypeEditorUI.UpdateMarkerColor">
            <summary>
            Updates the markers color and position.
            </summary>
        </member>
        <member name="F:OgamaControls.GradientTypeEditorUI.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.GradientTypeEditorUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.GradientTypeEditorUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.GradientTypeEditorUI.GradientChanged">
            <summary>
            Event. Raised when gradients color blend has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.GradientTypeEditorUI.Gradient">
            <summary>
            Gets or Sets current gradient.
            </summary>
        </member>
        <member name="P:OgamaControls.GradientTypeEditorUI.SilentMarkers">
            <summary>
            Gets or sets whether the GradientChanged event is fired when a marker
            is dragged.
            </summary>
        </member>
        <member name="T:OgamaControls.PenStyleArea">
            <summary>
            Area to show pen style.
            </summary>
        </member>
        <member name="F:OgamaControls.PenStyleArea.m_Pen">
            <summary>
            Saves the controls visualized Pen.
            </summary>
        </member>
        <member name="M:OgamaControls.PenStyleArea.#ctor">
            <summary>
            Constructor. Initializes members.
            </summary>
        </member>
        <member name="M:OgamaControls.PenStyleArea.PenStyleArea_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event handler. Redraws area with current Pen.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">An empty <see cref="T:System.EventArgs"/></param>
        </member>
        <member name="M:OgamaControls.PenStyleArea.OnPenStyleChanged(VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs)">
            <summary>
            The protected OnPenStyleChanged method raises the progress event by invoking 
            the delegates
            </summary>
            <param name="e">A <see cref="T:VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs"/> with the event arguments</param>
        </member>
        <member name="F:OgamaControls.PenStyleArea.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.PenStyleArea.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.PenStyleArea.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.PenStyleArea.PenStyleChanged">
            <summary>
            Event handler. Raised, when dialogs parameters has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.PenStyleArea.Pen">
            <summary>
            Gets or sets the controls pen.
            </summary>
        </member>
        <member name="P:OgamaControls.PenStyleArea.PenColor">
            <summary>
            Gets or sets the control pens color.
            </summary>
        </member>
        <member name="P:OgamaControls.PenStyleArea.PenDashStyle">
            <summary>
            Gets or sets the control pens dash style.
            </summary>
        </member>
        <member name="P:OgamaControls.PenStyleArea.PenSize">
            <summary>
            Gets or sets the control pens line size.
            </summary>
        </member>
        <member name="T:OgamaControls.PositionSelector">
            <summary>
            A form that is used to select a position respective to screen.
            </summary>
            <remarks>It has 9 alignment buttons for the standard alignments topleft, etc.
            Its initial size is the screen size divided with <see cref="F:OgamaControls.PositionSelector.SCREENSIZEDIVIDER"/>.
            The alignment can be deactivated by holding the shift key.</remarks>
            <summary>
            
            </summary>
        </member>
        <member name="F:OgamaControls.PositionSelector.SCREENSIZEDIVIDER">
            <summary>
            To this amount the stimulus screen size is divided to size the panel.
            </summary>
        </member>
        <member name="F:OgamaControls.PositionSelector.BUTTONSIZE">
            <summary>
            Size of the alignment buttons.
            </summary>
        </member>
        <member name="F:OgamaControls.PositionSelector._positionControl">
            <summary>
            Owning control that has created an instance of this position selector
            </summary>
        </member>
        <member name="F:OgamaControls.PositionSelector._alignment">
            <summary>
            Horizontal alignment for the stimulus text 
            </summary>
        </member>
        <member name="F:OgamaControls.PositionSelector._textPosition">
            <summary>
            Position in stimulus screen coordinates
            </summary>
        </member>
        <member name="F:OgamaControls.PositionSelector._alignmentButtons">
            <summary>
            List of rectangles to hold the position and size of the alignment buttons.
            </summary>
        </member>
        <member name="F:OgamaControls.PositionSelector._defaultFont">
            <summary>
            Default position marker text.
            </summary>
        </member>
        <member name="M:OgamaControls.PositionSelector.#ctor(System.Drawing.Size)">
            <summary>
            Constructor
            </summary>
            <param name="stimulusScreenSize">stimulus screen size</param>
        </member>
        <member name="M:OgamaControls.PositionSelector.#ctor(System.Drawing.Point,OgamaControls.IPositionControl,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Constructor.
            </summary>
            <param name="ctrlPosition">Position of this control</param>
            <param name="positionControl">owning control</param>
            <param name="location">position of instruction cursor</param>
            <param name="stimulusScreenSize">stimulus screen size</param>
        </member>
        <member name="M:OgamaControls.PositionSelector.CustomInitialize(System.Drawing.Size)">
            <summary>
            Provides custom initialization.
            Sets size and generates alignment buttons.
            </summary>
        </member>
        <member name="M:OgamaControls.PositionSelector.PositionSelector_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseDown event handler. Notifys parent of new position.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.PositionSelector.PositionSelector_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseMove event handler. Checks for alignments and updates parent with new position
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.PositionSelector.PositionSelector_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            OnMouseUp event handler. Checks for alignments and updates parent with new position.
            If cursor is out of panel close the panel without setting <see cref="T:System.Windows.Forms.DialogResult"/> to OK,
            so that changes will not be committed.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.PositionSelector.PositionSelector_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaint event handler. Draws the alignment buttons and the position marker text.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.PositionSelector.CalculatePositionOfAlignmentButtons">
            <summary>
            Calculates position of alignment buttons and add them to a list
            of rectangles. (TopLeft,TopMiddle,TopRight,MiddleLeft and so on)
            </summary>
        </member>
        <member name="M:OgamaControls.PositionSelector.MouseMoveHandler(System.Windows.Forms.MouseEventArgs)">
            <summary>
            When mouse has new position, notify the parent control of the value.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OgamaControls.PositionSelector.CheckForAlignments(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Snaps mouse location to the center of an alignment button,
            if it is 10 pixel near it.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            <returns>snapped position (center of alignment button)</returns>
        </member>
        <member name="M:OgamaControls.PositionSelector.NotifyNewPosition(System.Drawing.Point)">
            <summary>
            Let the owner know the new position.
            Take care of the alignment property.
            </summary>
            <param name="pt">A <see cref="T:System.Drawing.Point"/> with the current position to send.</param>
        </member>
        <member name="F:OgamaControls.PositionSelector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.PositionSelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.PositionSelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OgamaControls.PositionSelector.Alignment">
            <summary>
            Horizontal alignment for the position value.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.HorizontalAlignment"/> of the displayed reference text.</value>
        </member>
        <member name="T:OgamaControls.Dialogs.CursorStyleDlg">
            <summary>
            Dialog for selecting a cursor shape style.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.CursorStyleDlg.#ctor">
            <summary>
            Constructor. Initializes components and wires cursor changed event.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.CursorStyleDlg.OnCursorStyleChanged(VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs)">
            <summary>
            Raises the <see cref="E:OgamaControls.Dialogs.CursorStyleDlg.CursorStyleChanged"/> event by invoking the delegates.
            </summary>
            <param name="e"><see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> event arguments</param>.
        </member>
        <member name="M:OgamaControls.Dialogs.CursorStyleDlg.cursorSelectControl_CursorStyleChanged(System.Object,VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs)">
            <summary>
            Wires the event from the underlying control to the listeners.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:VectorGraphics.Tools.CustomEventArgs.ShapeEventArgs"/> with the new cursor.</param>
        </member>
        <member name="F:OgamaControls.Dialogs.CursorStyleDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.CursorStyleDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.Dialogs.CursorStyleDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.Dialogs.CursorStyleDlg.CursorStyleChanged">
            <summary>
            Event handler. Raised, when dialogs shape parameters has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.Dialogs.CursorStyleDlg.DrawingCursor">
            <summary>
            Sets the dialogs cursor property and that of the underlying control.
            </summary>
        </member>
        <member name="T:OgamaControls.Dialogs.PenAndFontStyleDlg">
            <summary>
            Dialog for selecting pen and font style together.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.PenAndFontStyleDlg.#ctor">
            <summary>
            Constructor. Initializes dialog and callback host for owned controls.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.PenAndFontStyleDlg.OnFontStyleChanged(VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs)">
            <summary>
            The PenStyle has been modified, notify the callback host if any
            </summary>
        </member>
        <member name="F:OgamaControls.Dialogs.PenAndFontStyleDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.PenAndFontStyleDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.Dialogs.PenAndFontStyleDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.Dialogs.PenAndFontStyleDlg.FontStyleChanged">
            <summary>
            Event handler. Raised, when dialogs font parameters has changed.
            </summary>
        </member>
        <member name="E:OgamaControls.Dialogs.PenAndFontStyleDlg.PenChanged">
            <summary>
            Event handler. Raised, when dialogs pen parameters has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.Dialogs.PenAndFontStyleDlg.CustomFont">
            <summary>
            Sets current dialogs and children controls font.
            </summary>
        </member>
        <member name="P:OgamaControls.Dialogs.PenAndFontStyleDlg.CustomFontBrush">
            <summary>
            Sets current dialogs and children controls font brush
            </summary>
        </member>
        <member name="P:OgamaControls.Dialogs.PenAndFontStyleDlg.CustomFontTextAlignment">
            <summary>
            Sets current dialogs and children controls font text alignment
            </summary>
        </member>
        <member name="P:OgamaControls.Dialogs.PenAndFontStyleDlg.Pen">
            <summary>
            Sets current dialogs and children controls pen.
            </summary>
        </member>
        <member name="T:OgamaControls.Dialogs.FontStyleDlg">
            <summary>
            Dialog for selecting font style.
            i.e. font face, size and style
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.FontStyleDlg.#ctor">
            <summary>
            Constructor. Initializes dialog and callback host.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.FontStyleDlg.OnFontChanged(VectorGraphics.Tools.CustomEventArgs.FontChangedEventArgs)">
            <summary>
            The PenStyle has been modified, notify the callback host if any
            </summary>
        </member>
        <member name="F:OgamaControls.Dialogs.FontStyleDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.FontStyleDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.Dialogs.FontStyleDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.Dialogs.FontStyleDlg.FontStyleChanged">
            <summary>
            Event handler. Raised, when dialogs parameters has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.Dialogs.FontStyleDlg.CurrentFontColor">
            <summary>
            Gets or sets dialogs current font color.
            </summary>
        </member>
        <member name="P:OgamaControls.Dialogs.FontStyleDlg.CurrentFont">
            <summary>
            Gets or sets dialogs current font.
            </summary>
        </member>
        <member name="P:OgamaControls.Dialogs.FontStyleDlg.CurrentFontAlignment">
            <summary>
            Gets or sets dialogs current font.
            </summary>
        </member>
        <member name="T:OgamaControls.AudioPropertiesChangedEventArgs">
            <summary>
            Class that contains the data for the AudioPropertiesChanged event. Derives from System.EventArgs.
            </summary>
        </member>
        <member name="M:OgamaControls.AudioPropertiesChangedEventArgs.#ctor(VectorGraphics.Tools.AudioFile)">
            <summary>
            Constructor. Initializes fields.
            </summary>
            <param name="newAudioFile">New <see cref="P:OgamaControls.AudioPropertiesChangedEventArgs.AudioFile"/> that should be used.</param>
        </member>
        <member name="P:OgamaControls.AudioPropertiesChangedEventArgs.AudioFile">
            <summary>
            Gets the <see cref="P:OgamaControls.AudioPropertiesChangedEventArgs.AudioFile"/> property. 
            </summary>
        </member>
        <member name="T:OgamaControls.ColorChangedEventArgs">
            <summary>
            Class that contains the data for the ColorChanged event. Derives from System.EventArgs.
            </summary>
        </member>
        <member name="M:OgamaControls.ColorChangedEventArgs.#ctor(System.Drawing.Color)">
            <summary>
            Constructor. Initializes fields.
            </summary>
            <param name="newColor">new Color</param>
        </member>
        <member name="P:OgamaControls.ColorChangedEventArgs.Color">
            <summary>
            Gets the Color property. This is the new created color.
            </summary>
        </member>
        <member name="T:OgamaControls.FFTEventArgs">
            <summary>
            Class that contains the data for the AudioSamplesReceived event. Derives from System.EventArgs.
            </summary>
        </member>
        <member name="M:OgamaControls.FFTEventArgs.#ctor(System.Int32[])">
            <summary>
            Constructor. Initializes fields.
            </summary>
            <param name="newAmplitudes">new amplitudes</param>
        </member>
        <member name="P:OgamaControls.FFTEventArgs.Amplitudes">
            <summary>
            Gets the Amplitudes property. This is the array of new amplitude values.
            </summary>
        </member>
        <member name="T:OgamaControls.DESCompletedArgs">
            <summary>Used by the <see cref="E:OgamaControls.Media.DESCombine.Completed"/> event.  
            Reports the event code that exited the graph.
            </summary>
            <remarks>Signals that all files have been rendered</remarks>
        </member>
        <member name="F:OgamaControls.DESCompletedArgs.Result">
            <summary>The result of the rendering</summary>
            <remarks>
            This code will be a member of DirectShowLib.EventCode.  Typically it 
            will be EventCode.Complete, EventCode.ErrorAbort or EventCode.UserAbort.
            </remarks>
        </member>
        <member name="M:OgamaControls.DESCompletedArgs.#ctor(DirectShowLib.EventCode)">
            <summary>
            Used to construct an instace of the class.
            </summary>
            <param name="ec"></param>
        </member>
        <member name="T:OgamaControls.FileCompletedArgs">
            <summary>
            Used by the <see cref="E:OgamaControls.Media.DESCombine.FileCompleted"/> event.  Reports 
            when a file has completed processing.
            </summary>
            <remarks>
            To determine whether you are receiving a notification for an audio
            or video file completing, examine the <see cref="F:OgamaControls.FileCompletedArgs.Type"/> property.  Also, when
            using the RenderToWindow, dropped frames can result in late or missed notifications.
            </remarks>
        </member>
        <member name="F:OgamaControls.FileCompletedArgs.FileName">
            <summary>
            The file name that just completed
            </summary>
            <remarks>
            Use the <see cref="F:OgamaControls.FileCompletedArgs.Type"/> to determine whether this is a video
            or audio file.
            </remarks>
        </member>
        <member name="F:OgamaControls.FileCompletedArgs.Type">
            <summary>
            The type (audio/video) of file
            </summary>
        </member>
        <member name="M:OgamaControls.FileCompletedArgs.#ctor(System.String,OgamaControls.FileCompletedArgs.FileType)">
            <summary>
            Used to construct an instance of the class.
            </summary>
            <param name="sFilename">Filename that has been completed</param>
            <param name="eType">Type of the file (audio/video)</param>
        </member>
        <member name="T:OgamaControls.FileCompletedArgs.FileType">
            <summary>
            Type of the file that has completed (audio/video)
            </summary>
        </member>
        <member name="F:OgamaControls.FileCompletedArgs.FileType.Video">
            <summary>
            Type is video
            </summary>
        </member>
        <member name="F:OgamaControls.FileCompletedArgs.FileType.Audio">
            <summary>
            Type is audio
            </summary>
        </member>
        <member name="T:OgamaControls.Dialogs.PenStyleDlg">
            <summary>
            Dialog for selecting pen style.
            i.e. pen style, thickness and color
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.PenStyleDlg.#ctor">
            <summary>
            Constructor. Initializes dialog and callback host.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.PenStyleDlg.penSelectControl_PenChanged(System.Object,VectorGraphics.Tools.CustomEventArgs.PenChangedEventArgs)">
            <summary>
            Raises <see cref="E:OgamaControls.Dialogs.PenStyleDlg.PenChanged"/> event, when 
            new pen is selected in the underlying control.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:OgamaControls.Dialogs.PenStyleDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.Dialogs.PenStyleDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.Dialogs.PenStyleDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:OgamaControls.Dialogs.PenStyleDlg.PenChanged">
            <summary>
            Event handler. Raised, when dialogs parameters has changed.
            </summary>
        </member>
        <member name="P:OgamaControls.Dialogs.PenStyleDlg.Pen">
            <summary>
            Gets or sets dialogs current pen.
            </summary>
        </member>
        <member name="T:OgamaControls.ToolStripNumericUpDown">
            <summary>
            Class for a toolstrip hostable numeric up down control
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripNumericUpDown.#ctor">
            <summary>
            Constructor. Initializes Component and event handler
            </summary>
        </member>
        <member name="M:OgamaControls.ToolStripNumericUpDown.OnSubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Overridden. Subscribes events from the hosted control.
            </summary>
            <param name="c">control</param>
        </member>
        <member name="M:OgamaControls.ToolStripNumericUpDown.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Overridden. Unsubscribes events from the hosted control.
            </summary>
            <param name="c">control</param>
        </member>
        <member name="M:OgamaControls.ToolStripNumericUpDown.NumericUpDown_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler. Raises value changed event.
            </summary>
            <param name="sender">sender</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="E:OgamaControls.ToolStripNumericUpDown.ValueChanged">
            <summary>
            Value changed event handler from numeric up down control
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripNumericUpDown.Value">
            <summary>
            Gets or sets current value
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripNumericUpDown.Minimum">
            <summary>
            Gets or sets the minimum allowed value for the numeric up down
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripNumericUpDown.Maximum">
            <summary>
            Gets or sets the maximal allowed value for the numeric up down
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripNumericUpDown.Increment">
            <summary>
            Gets or sets the increment for the numeric up down
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripNumericUpDown.DecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for the numeric up down
            </summary>
        </member>
        <member name="P:OgamaControls.ToolStripNumericUpDown.NumericUpDown">
            <summary>
            Gets the underlying nueric up down control
            </summary>
        </member>
        <member name="T:OgamaControls.FFT">
            <summary>
            This class provides the calculation of an Fast Fourier Transform.
            </summary>
        </member>
        <member name="F:OgamaControls.FFT.DDC_PI">
            <summary>
            The constant Pi in detail.
            </summary>
        </member>
        <member name="M:OgamaControls.FFT.IsPowerOfTwo(System.UInt32)">
            <summary>
            Verifies a number is a power of two
            </summary>
            <param name="x">Number to check</param>
            <returns>true if number is a power two (i.e.:1,2,4,8,16,...)</returns>
        </member>
        <member name="M:OgamaControls.FFT.NextPowerOfTwo(System.UInt32)">
            <summary>
            Get Next power of number.
            </summary>
            <param name="x">Number to check</param>
            <returns>A power of two number</returns>
        </member>
        <member name="M:OgamaControls.FFT.NumberOfBitsNeeded(System.UInt32)">
            <summary>
            Get Number of bits needed for a power of two
            </summary>
            <param name="PowerOfTwo">Power of two number</param>
            <returns>Number of bits</returns>
        </member>
        <member name="M:OgamaControls.FFT.ReverseBits(System.UInt32,System.UInt32)">
            <summary>
            Reverse bits
            </summary>
            <param name="index">Bits</param>
            <param name="NumBits">Number of bits to reverse</param>
            <returns>Reverse Bits</returns>
        </member>
        <member name="M:OgamaControls.FFT.IndexToFrequency(System.UInt32,System.UInt32)">
            <summary>
            Return index to frequency based on number of samples
            </summary>
            <param name="Index">sample index</param>
            <param name="NumSamples">number of samples</param>
            <returns>Frequency index range</returns>
        </member>
        <member name="M:OgamaControls.FFT.Compute(System.UInt32,System.Double[],System.Double[],System.Double[],System.Double[],System.Boolean)">
            <summary>
            Compute FFT
            </summary>
            <param name="NumSamples">NumSamples Number of samples (must be power two)</param>
            <param name="pRealIn">Real samples</param>
            <param name="pImagIn">Imaginary (optional, may be null)</param>
            <param name="pRealOut">Real coefficient output</param>
            <param name="pImagOut">Imaginary coefficient output</param>
            <param name="bInverseTransform">bInverseTransform when true, compute Inverse FFT</param>
        </member>
        <member name="M:OgamaControls.FFT.Norm(System.UInt32,System.Double[],System.Double[],System.Double[])">
            <summary>
            Calculate normal (power spectrum)
            </summary>
            <param name="NumSamples">Number of sample</param>
            <param name="pReal">Real coefficient buffer</param>
            <param name="pImag">Imaginary coefficient buffer</param>
            <param name="pAmpl">Working buffer to hold amplitude Xps(m) = | X(m)^2 | = Xreal(m)^2  + Ximag(m)^2</param>
        </member>
        <member name="M:OgamaControls.FFT.PeakFrequency(System.UInt32,System.Double[],System.Double,System.UInt32@)">
            <summary>
            Find Peak frequency in Hz
            </summary>
            <param name="NumSamples">Number of samples</param>
            <param name="pAmpl">Current amplitude</param>
            <param name="samplingRate">Sampling rate in samples/second (Hz)</param>
            <param name="index">Frequency index</param>
            <returns>Peak frequency in Hz</returns>
        </member>
        <member name="T:OgamaControls.CaptureDeviceProperties">
            <summary>
            This class holds the properties of a capture device
            like a webcam or a screen recorder.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureDeviceProperties.videoInputDevice">
            <summary>
            Saves the the friendly name of the video input device to use.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureDeviceProperties.audioInputDevice">
            <summary>
            Saves the friendly name of the audio input device to use.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureDeviceProperties.videoCompressor">
            <summary>
            Saves the friendly name of the video compressor to use.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureDeviceProperties.audioCompressor">
            <summary>
            Saves the friendly name of the audio compressor to use.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureDeviceProperties.frameRate">
            <summary>
            Saves the frame rate for the video stream.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureDeviceProperties.videoSize">
            <summary>
            Saves the size of the video stream.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureDeviceProperties.filename">
            <summary>
            Saves the filename for the video recording.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureDeviceProperties.captureMode">
            <summary>
            Saves the <see cref="P:OgamaControls.CaptureDeviceProperties.CaptureMode"/> for the device.
            </summary>
        </member>
        <member name="F:OgamaControls.CaptureDeviceProperties.previewWindow">
            <summary>
            Saves the <see cref="T:System.Windows.Forms.Control"/> for the preview window.
            Null if it should not be previewed.
            </summary>
        </member>
        <member name="M:OgamaControls.CaptureDeviceProperties.#ctor">
            <summary>
            Initializes a new instance of the CaptureDeviceProperties class.
            </summary>
        </member>
        <member name="M:OgamaControls.CaptureDeviceProperties.#ctor(GTHardware.Cameras.DirectShow.CameraInfo,System.String,System.String,System.String,System.Int32,System.Drawing.Size,System.String,OgamaControls.CaptureMode,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the CaptureDeviceProperties class.
            </summary>
            <param name="newVideoInputDevice">The <see cref="T:GTHardware.Cameras.DirectShow.CameraInfo"/> with the video input device to use.</param>
            <param name="newAudioInputDevice">The friendly name of the audio input device to use.</param>
            <param name="newVideoCompressor">The friendly name of the video compressor to use.</param>
            <param name="newAudioCompressor">The friendly name of the audio compressor to use.</param>
            <param name="newFrameRate">The frame rate for the video stream.</param>
            <param name="newVideoSize">The size of the video stream.</param>
            <param name="newFilename">The filename for the video recording.</param>
            <param name="newCaptureMode">The <see cref="P:OgamaControls.CaptureDeviceProperties.CaptureMode"/> flags for the recording.</param>
            <param name="newPreviewWindow">The <see cref="T:System.Windows.Forms.Control"/> where the preview
            should be shown or null, if no preview should be shown.</param>
        </member>
        <member name="M:OgamaControls.CaptureDeviceProperties.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Drawing.Size,System.String,OgamaControls.CaptureMode,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the WebcamProperties class.
            </summary>
            <param name="newVideoInputDevice">The friendly name of the video input device to use.</param>
            <param name="newAudioInputDevice">The friendly name of the audio input device to use.</param>
            <param name="newVideoCompressor">The friendly name of the video compressor to use.</param>
            <param name="newAudioCompressor">The friendly name of the audio compressor to use.</param>
            <param name="newFrameRate">The frame rate for the video stream.</param>
            <param name="newVideoSize">The size of the video stream.</param>
            <param name="newFilename">The filename for the video recording.</param>
            <param name="newCaptureMode">The <see cref="P:OgamaControls.CaptureDeviceProperties.CaptureMode"/> flags for the recording.</param>
            <param name="newPreviewWindow">The <see cref="T:System.Windows.Forms.Control"/> where the preview
            should be shown or null, if no preview should be shown.</param>
        </member>
        <member name="M:OgamaControls.CaptureDeviceProperties.Clone">
            <summary>
            This method returns an exact copy of this <see cref="T:OgamaControls.CaptureDeviceProperties"/>
            </summary>
            <returns>An duplicated <see cref="T:System.Object"/> of type <see cref="T:OgamaControls.CaptureDeviceProperties"/></returns>
        </member>
        <member name="P:OgamaControls.CaptureDeviceProperties.VideoInputDevice">
            <summary>
            Gets or sets the friendly name of the video input device to use.
            </summary>
            <value>A <see cref="T:System.String"/> with the name of the video input device as
            been enumerated via DirectShow.</value>
        </member>
        <member name="P:OgamaControls.CaptureDeviceProperties.AudioInputDevice">
            <summary>
            Gets or sets the friendly name of the audio input device to use.
            </summary>
            <value>A <see cref="T:System.String"/> with the name of the audio input device as
            been enumerated via DirectShow.</value>
        </member>
        <member name="P:OgamaControls.CaptureDeviceProperties.VideoCompressor">
            <summary>
            Gets or sets the friendly name of the video compressor to use.
            </summary>
            <value>A <see cref="T:System.String"/> with the name of the video compressor as
            been enumerated via DirectShow.</value>
        </member>
        <member name="P:OgamaControls.CaptureDeviceProperties.AudioCompressor">
            <summary>
            Gets or sets the friendly name of the audio compressor to use.
            </summary>
            <value>A <see cref="T:System.String"/> with the name of the audio compressor as
            been enumerated via DirectShow.</value>
        </member>
        <member name="P:OgamaControls.CaptureDeviceProperties.FrameRate">
            <summary>
            Gets or sets the frame rate for the video stream.
            </summary>
            <value>A <see cref="T:System.Int32"/> with the new frame rate for the video stream.</value>
        </member>
        <member name="P:OgamaControls.CaptureDeviceProperties.VideoSize">
            <summary>
            Gets or sets the size of the video stream.
            </summary>
            <value>A <see cref="T:System.Drawing.Size"/> with the new size of the video stream.</value>
        </member>
        <member name="P:OgamaControls.CaptureDeviceProperties.Filename">
            <summary>
            Gets or sets the filename for the video recording.
            </summary>
            <value>A <see cref="T:System.String"/> with the new filename for the video recording.</value>
        </member>
        <member name="P:OgamaControls.CaptureDeviceProperties.CaptureMode">
            <summary>
            Gets or sets the <see cref="P:OgamaControls.CaptureDeviceProperties.CaptureMode"/> for the device.
            </summary>
        </member>
        <member name="P:OgamaControls.CaptureDeviceProperties.PreviewWindow">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Control"/> which hosts the preview window
            </summary>
        </member>
        <member name="T:OgamaControls.WebcamPropertiesDlg">
            <summary>
            This <see cref="T:System.Windows.Forms.Form"/> encapsulates an dialog for getting, setting
            and previewing the properties of a webcam including audio input.
            </summary>
        </member>
        <member name="M:OgamaControls.WebcamPropertiesDlg.#ctor(OgamaControls.DXCapture)">
            <summary>
            Initializes a new instance of the WebcamPropertiesDlg class.
            </summary>
        </member>
        <member name="F:OgamaControls.WebcamPropertiesDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgamaControls.WebcamPropertiesDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgamaControls.WebcamPropertiesDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OgamaControls.WebcamPropertiesDlg.Properties">
            <summary>
            Gets or sets the current <see cref="T:OgamaControls.CaptureDeviceProperties"/>.
            </summary>
        </member>
        <member name="T:OgamaControls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:OgamaControls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OgamaControls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:OgamaControls.ThreadSafe">
            <summary>
            Static class providing methods for thread safe calls into
            windows forms controls
            </summary>
        </member>
        <member name="M:OgamaControls.ThreadSafe.GetHandle(System.Windows.Forms.Control)">
            <summary>
            A thread safe version to receive the <see cref="P:System.Windows.Forms.Control.Handle"/>
            property of the control.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to retreive the handle for.</param>
            <returns>An <see cref="T:System.IntPtr"/> with the handle of the control.</returns>
        </member>
        <member name="M:OgamaControls.ThreadSafe.Close(System.Windows.Forms.Form)">
            <summary>
            Thread safe version to call the <see cref="M:System.Windows.Forms.Form.Close"/> method
            </summary>
            <param name="form">A <see cref="T:System.Windows.Forms.Form"/> that should be closed.</param>
        </member>
        <member name="M:OgamaControls.ThreadSafe.Dispose(System.Windows.Forms.Control)">
            <summary>
            Thread safe version to call the <see cref="M:System.ComponentModel.Component.Dispose"/> method
            </summary>
            <param name="control">A <see cref="T:System.Windows.Forms.Control"/> that should be disposed.</param>
        </member>
        <member name="M:OgamaControls.ThreadSafe.GetClientRectangle(System.Windows.Forms.Control)">
            <summary>
            Thread safe version to get the <see cref="P:System.Windows.Forms.Control.ClientRectangle"/> property
            </summary>
            <returns>The <see cref="T:System.Drawing.Rectangle"/> of the given control.</returns>
        </member>
        <member name="M:OgamaControls.ThreadSafe.ThreadSafeSetText(System.Windows.Forms.TextBox,System.String)">
            <summary>
            Thread safe version to set the <see cref="P:System.Windows.Forms.TextBox.Text"/> property
            </summary>
            <param name="control">The TextBox control.</param>
            <param name="stringToSet">The string to set.</param>
        </member>
        <member name="M:OgamaControls.ThreadSafe.ThreadSafeGetText(System.Windows.Forms.TextBox)">
            <summary>
            Thread safe version to get the <see cref="P:System.Windows.Forms.TextBox.Text"/> property
            </summary>
            <param name="control">The TextBox control.</param>
            <returns>
            The <see cref="T:System.String"/> with the string to
            be set to the RichTextBox.
            </returns>
        </member>
        <member name="M:OgamaControls.ThreadSafe.EnableDisableButton(System.Windows.Forms.Button,System.Boolean)">
            <summary>
            Thread safe version to enable or disable a button.
            </summary>
            <param name="button">The <see cref="T:System.Windows.Forms.Button"/> control to be enabled or disabled.</param>
            <param name="enable">True, if the button should be enabled, otherwise false.</param>
        </member>
        <member name="M:OgamaControls.ThreadSafe.ShowHideSplitContainerPanel(System.Windows.Forms.SplitContainer,System.Boolean,System.Boolean)">
            <summary>
            Thread safe version to show or hide a split container panel.
            </summary>
            <param name="splitContainer"> The <see cref="T:System.Windows.Forms.SplitContainer"/> control. </param>
            <param name="show"> True, if the panel should be visible, otherwise false. </param>
            <param name="panel1">True if panel1 of the splitcontainer should be modified, for panel2 set this to false.</param>
        </member>
        <member name="T:OgamaControls.ThreadSafe.GetHandleCallback">
            <summary>
            Delegate for thread safe retreiving of the controls handle.
            </summary>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> to retreive the handle for.</param>
            <returns>An <see cref="T:System.IntPtr"/> with the handle of the control.</returns>
        </member>
        <member name="T:OgamaControls.ThreadSafe.GetRectangleInvoker">
            <summary>
            This delegate enables asynchronous calls for getting
            a Rectangle property on a Control.
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> property
            of the <see cref="T:System.Windows.Forms.Control"/>.</returns>
        </member>
        <member name="T:OgamaControls.ThreadSafe.GetStringInvoker">
            <summary>
            This delegate enables asynchronous calls for getting
            a string property on a RichTextBox control.
            </summary>
            <returns>An <see cref="T:System.String"/> for the Text or RTF property
            of the <see cref="T:System.Windows.Forms.RichTextBox"/>.</returns>
        </member>
        <member name="T:OgamaControls.ThreadSafe.SetStringInvoker">
            <summary>
            This delegate enables asynchronous calls for setting
            a string property on a Textbox control.
            </summary>
            <param name="control">The Textbox for which to set the text asynchronously.</param>
            <param name="stringToSet">A <see cref="T:System.String"/> for the Text property
            of the <see cref="T:System.Windows.Forms.TextBox"/>.</param>
        </member>
        <member name="T:OgamaControls.ThreadSafe.EnableDisableButtonInvoker">
            <summary>
            This delegate enables asynchronous calls for setting
            the enabled property on a Button control.
            </summary>
            <param name="control">The Button for which to set the enabled property asynchronously.</param>
            <param name="enable">A <see cref="T:System.Boolean"/> for the Enabled property
            of the <see cref="T:System.Windows.Forms.Button"/>.</param>
        </member>
        <member name="T:OgamaControls.ThreadSafe.ShowHidePanelInvoker">
            <summary>
            This delegate enables asynchronous calls for setting
            the visible property on a SplitContainer.Panel control.
            </summary>
            <param name="control">The SplitContainer parent for the panel to be asynchronously shown or hidden.</param>
            <param name="show">A <see cref="T:System.Boolean"/> for the visible property
            of the Panel.</param>
            <param name="panel1">True if panel1 of the splitcontainer should be modified, for panel2 set this to false.</param>
        </member>
    </members>
</doc>
